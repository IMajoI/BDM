<?xml version="1.0" encoding="utf-8" ?>
<PmObject Name="Z45_Faceplates" Type="PmFolder">
  <Prop Name="LastEditTime">2017.11.09 10:14:54</Prop>
  <PmObjects>
    <PmObject Name="_AnalogPosCtrlTrend_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:28</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Prop Name="MultiView">1</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">800</Prop>
        <Prop Name="Dy">600</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par"></Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Panel" Type="PmiPanel">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">800</Prop>
          <Prop Name="Dy">600</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">2</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <Event Name="onStart" Type="Pm">
            <Script>
              <![CDATA[////add trend
//var oTrendsView = pMe.Items("AxTrendsView");
//var oTView = oTrendsView.Acx;

//oTView = oTView.AddTrend("t0", pMe.GetPar("tagName") + ".CmdValue");

////set trend
//var oTrendsView2 = pMe.Items("AxTrendsView");
//var oTView2 = oTrendsView2.Acx;

//var oTrend = oTView2.Trends("t0");

//oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".CmdValue", "");
//oTrend.ValueMax = 100;
//oTrend.ValueMin = 0;
//oTrend.Unit = "%";

//oTrend.GraphDefault.Color = pMe.Vars("trendColorSP").Value;
//oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;

////add trend
//var oTrendsView = pMe.Items("AxTrendsView");
//var oTView = oTrendsView.Acx;

//oTView = oTView.AddTrend("t1", pMe.GetPar("tagName") + ".ActFB");

////set trend
//var oTrendsView2 = pMe.Items("AxTrendsView");
//var oTView2 = oTrendsView2.Acx;

//var oTrend = oTView2.Trends("t1");

//oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".ActFB", "");
//oTrend.ValueMax = 100;
//oTrend.ValueMin = 0;
//oTrend.Unit = "%";

//oTrend.GraphDefault.Color = pMe.Vars("trendColorPV").Value;
//oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;


]]>
            </Script>
          </Event>
          <GItem Name="AxTrendsHead" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">5</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">148</Prop>
            <Prop Name="ProgID">PMTABLE.PmTableCtrl.1</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{19BA6EE6-4BB4-11D1-8085-0020AFC8C4AF}</Prop>
            <Event Name="CellClicked" Type="Ax">
              <Prop Name="Params">nRow,nCol,bCtrl,bShift,bAlt</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead  = pMe.Acx;
var nCount = oTView.TrendsCount;
if(nCol == 1 && nRow > 0 && nRow <= nCount)
{
  var oTrend = oTView.Trends(nRow -1);
  oTrend.Visible = !oTrend.Visible;
  oHead.SetCellText(nRow, nCol, oTrend.Visible ? "" : "X");
  oTView.Draw();
  oHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="CellFocusChanged" Type="Ax">
              <Prop Name="Params">nRow,nCol,nRowOld,nColOld</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead = pMe.Acx;
for(var i = 1; i < oHead.Rows; i++)
  oHead.SetCellBackColor(i, -3, "transparent");

oTView.TrendActive = nRow - 1;
oHead.SetCellBackColor(nRow, -3, "#009898");
oHead.Draw();
oTView.Draw();]]>
              </Script>
            </Event>
            <Event Name="CellEditRequested" Type="Ax">
              <Prop Name="Params">nRow,nCol</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
if(nRow > 0)
  oTView.Trends(nRow - 1).DlgProperties("resizable=yes");]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="buttTwoAutoscroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">8</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendAutoScroll')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
              <Prop Name="state" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                </DBind>
              </Prop>
            </Props>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Vars("state").Value = true;]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  var oState = pMe.Vars("state");
  if(!pEvent.Action) //if key UP
    oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
{
  var oState = pMe.Vars("state");
  oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder     = 1;
var sImgColor   = "#000000";
var sBgColor    = "#acacac";
//---------------------------------
var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
var mode        = pEvent.GetVar("mode").Value;
var nPush       = pEvent.GetVar("push").Value;
var nState      = pEvent.GetVar("state").Value;
var bDisabled   = mode & 0x0030;
var bFocused    = mode & 0x0300;
var bMouseover  = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);
  
// Border
if(nBorder > 0)
{
  // UP border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, 0.7) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // DOWN border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.7);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// FILL
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(!nPush && !nState)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}

ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush || nState)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
  
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;
if(nState)
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.8);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.closePath();
  ctx.fill();

  ctx.beginPath();
  ctx.moveTo(dx * 0.55, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.8);
  ctx.lineTo(dx * 0.55, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}
else
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.8, dy * 0.5);
  ctx.lineTo(dx * 0.4, dy * 0.2);
  ctx.lineTo(dx * 0.4, dy * 0.8);
  ctx.closePath();
  ctx.fill();
  
  ctx.beginPath();
  ctx.moveTo(dx * 0.2, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.lineTo(dx * 0.2, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttScroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">48</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','scroll'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="typeList" Type="string"></Prop>
              <Prop Name="typeSel" Type="integer">12</Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pMe.Vars("typeSel").Value);]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[var oPush = pMe.Vars("push");

if(!pEvent.Action)
{
  if(pEvent.Code == 38)
    pMe.Methods.ChangeType("up");
  if(pEvent.Code == 40)
    pMe.Methods.ChangeType("down");
  if(pEvent.Code == 37)
    pMe.Methods.ChangeTime("left");
  if(pEvent.Code == 39)
    pMe.Methods.ChangeTime("right");
  if(pEvent.Code == 32)
    pMe.ShowMenu();
  oPush.Value = 0;
}
else
{
  if(pEvent.Code == 38 || pEvent.Code == 40)
    oPush.Value = 1;
  if(pEvent.Code == 37)
    oPush.Value = 2;
  if(pEvent.Code == 39)
    oPush.Value = 3;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(!pEvent.Action && pEvent.FocusIn)
  return;

if(pMe.Vars("mode").Value & 0x0300 && !pEvent.FocusIn)
{
  var oPush = pMe.Vars("push");
  var dy = pMe.Dy;
  var dx = pMe.Dx;

  if(!pEvent.Action)
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      pMe.ShowMenu();
    else
    {
      if(pEvent.X < dy)
        pMe.Methods.ChangeTime("left");
      else if(pEvent.X > (dx - dy))
        pMe.Methods.ChangeTime("right");
    }
    oPush.Value = 0;
  }
  else
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      oPush.Value = 1;
    else if(pEvent.X < dy)
      oPush.Value = 2;
    else if(pEvent.X > (dx - dy))
      oPush.Value = 3;
  }
  pMe.Refresh();
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pEvent.Name);]]></Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[var aType = pMe.Methods.GetTypeList();
var nLength = aType.GetSize(1);

for(var i = 0; i < nLength; i++)
  pEvent.Menu.AddMenu(i, aType.GetItem(i, 0));]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangeTime">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var nIndex = pMe.Vars("typeSel").Value;
var aType = pMe.Methods.GetTypeList();
var par1  = aType.GetItem(nIndex, 1);
var par2  = aType.GetItem(nIndex, 2);
var sMeth = aType.GetItem(nIndex, 3);
var t, tOld, tNew;

if(action == "left") // "left"  or keycode 37
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMin;
    tOld = Pm.CreatePmDateObject(t).GetValue() - 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1, tOld, par2);
    oTView.ScrollTime(40, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1, par2);
}
else               // "right"  or keycode 39
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMax, tNew;
    tOld = Pm.CreatePmDateObject(t).GetValue() + 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1 + 40, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1 + 40, tOld, par2);
    oTView.ScrollTime(41, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1 + 1, par2);
}
]]>
                </Script>
              </Method>
              <Method Name="ChangeType">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var nIndex = pMe.Vars("typeSel").Value;
var nLength = aType.GetSize(1);

switch(action)
{
case "up":
  if(nIndex > 0)
    nIndex--;
  break;
case "down":
  if(nIndex < nLength-1)
    nIndex++;
  break;
default:
  nIndex = action;
  break;
}

pMe.Vars("typeSel").Value  = nIndex;
pMe.Vars("typeList").Value = aType.GetItem(nIndex, 0);]]>
                </Script>
              </Method>
              <Method Name="GetTypeList">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sMin=Macro("$text:sys.minute");
//#pragma variable sHour=Macro("$text:sys.hour");
//#pragma variable sDay=Macro("$text:sys.day");
//#pragma variable sWeek=Macro("$text:sys.week");
//#pragma variable sMonth=Macro("$text:sys.month");
//#pragma variable sPage=Macro("$text:sys.Page");
//#pragma variable sEnd=Macro("$text:sys.toEnd");

var aType = Pm.CreatePmArray().Create(14, 5);

// Text types
aType.SetItem("1 "  + sMin,   0, 0); // "1 min"
aType.SetItem("2 "  + sMin,   1, 0); // "2 min"
aType.SetItem("5 "  + sMin,   2, 0); // "5 min"
aType.SetItem("10 " + sMin,   3, 0); //"10 min"
aType.SetItem("15 " + sMin,   4, 0); //"15 min"
aType.SetItem("30 " + sMin,   5, 0); //"30 min"
aType.SetItem("1"   + sHour,  6, 0); // "1 hour"
aType.SetItem("6-14-22",      7, 0); // "shift" (6, 14, 22 hour)
aType.SetItem("1 "  + sDay,   8, 0); // "1 day"
aType.SetItem("1 "  + sWeek,  9, 0); // "1 week"
aType.SetItem("1 "  + sMonth,10, 0); // "1 month"
aType.SetItem("1/5 "+ sPage, 11, 0); // "1/5 page" 
aType.SetItem("1 "  + sPage, 12, 0); // "1 page"
aType.SetItem(sEnd,          13, 0); // "To end"

// first param methods
aType.SetItem(47,  0, 1);
aType.SetItem(47,  1, 1);
aType.SetItem(47,  2, 1);
aType.SetItem(47,  3, 1);
aType.SetItem(47,  4, 1);
aType.SetItem(47,  5, 1);
aType.SetItem(46,  6, 1);
aType.SetItem(46,  7, 1);
aType.SetItem(45,  8, 1);
aType.SetItem(44,  9, 1);
aType.SetItem(43, 10, 1);
aType.SetItem(30, 11, 1);
aType.SetItem(30, 12, 1);
aType.SetItem(90, 13, 1);

// second param method
aType.SetItem(1,     0, 2);
aType.SetItem(2,     1, 2);
aType.SetItem(5,     2, 2);
aType.SetItem(10,    3, 2);
aType.SetItem(15,    4, 2);
aType.SetItem(30,    5, 2);
aType.SetItem(1,     6, 2);
aType.SetItem(8,     7, 2);
aType.SetItem(null,  8, 2);
aType.SetItem(null,  9, 2);
aType.SetItem(null, 10, 2);
aType.SetItem(1/5,  11, 2);
aType.SetItem(1,    12, 2);
aType.SetItem(0,    13, 2);

// select methods
aType.SetItem("GetDateOf",   0, 3);
aType.SetItem("GetDateOf",   1, 3);
aType.SetItem("GetDateOf",   2, 3);
aType.SetItem("GetDateOf",   3, 3);
aType.SetItem("GetDateOf",   4, 3);
aType.SetItem("GetDateOf",   5, 3);
aType.SetItem("GetDateOf",   6, 3);
aType.SetItem("GetDateOf",   7, 3);
aType.SetItem("GetDateOf",   8, 3);
aType.SetItem("GetDateOf",   9, 3);
aType.SetItem("GetDateOf",  10, 3);
aType.SetItem("ScrollTime", 11, 3);
aType.SetItem("ScrollTime", 12, 3);
aType.SetItem("ScrollTime", 13, 3);

return aType]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var sShiftNot     = "- - -";

var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sShift        = pEvent.GetVar("typeList").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder > 0)
{
  // up border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(dy, nBorder, dy, dy-nBorder);
grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

//nPush = 3;
if(nPush > 0)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
  ctx.fillStyle = grd;
  ctx.beginPath();

  switch(nPush)
  {
  case 1:
    ctx.moveTo(dy, dy - nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - dy, dy - nBorder);
    break;

  case 2:
    ctx.moveTo(nBorder, dy - nBorder);
    ctx.lineTo(nBorder, nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dy, dy - nBorder);
    break;

  case 3:
    ctx.moveTo(dx - dy, dy - nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - nBorder, nBorder);
    ctx.lineTo(dx - nBorder, dy - nBorder);
    break;
  }
  ctx.closePath();    
  ctx.fill();
}

ctx.fillStyle    = "#000000";
ctx.beginPath();
ctx.moveTo(dy * 0.2, dy * 0.5);
ctx.lineTo(dy * 0.8, dy * 0.2);
ctx.lineTo(dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dy, nBorder);
  ctx.lineTo(dy, dy - nBorder);
  ctx.stroke();
}

ctx.beginPath();
ctx.moveTo(dx - dy * 0.2, dy * 0.5);
ctx.lineTo(dx - dy * 0.8, dy * 0.2);
ctx.lineTo(dx - dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dx - dy, nBorder);
  ctx.lineTo(dx - dy, dy - nBorder);
  ctx.stroke();
}

// text
ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = nFontSize + "px Arial";

//if(nPush)
//  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillText(bFocused ? sShift : sShiftNot, dx * 0.5, dy * 0.5);

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttNewestAll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','toEnd'),' - ',$.text('sys','right'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Items("../AxTrendsView").Acx.ScrollTime(91, 0);]]></Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.2, dy * 0.2);
ctx.lineTo(dx * 0.2, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.9, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.8);
ctx.lineTo(dx * 0.9, dy * 0.8);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">248</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 1')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M1";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">288</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 2')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M2";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomIn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">380</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' +'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(10, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.47, dy * 0.3);
ctx.lineTo(dx * 0.47, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.3);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">412</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','zoom'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="title" Type="string">
                <DStatic Type="string">00:01:00</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Vars("infozoom")</Prop>
                </DBind>
              </Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1=="graph"</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
  pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

var oTView = pMe.Items("../AxTrendsView").Acx

switch(pEvent.Name)
{
  case "1min":
    oTView.ZoomTime(21, 4, 1/24/60, 0);
    pMe.SetProp("Text", "1 " + sText0);
    break;
  case "15min":
    oTView.ZoomTime(21, 4, 1/24/4, 0);
    pMe.SetProp("Text", "1/4 " + sText1);
    break;
  case "30min":
    oTView.ZoomTime(21, 4, 1/24/2, 0);
    pMe.SetProp("Text", "1/2 " + sText1);
    break;
  case "1hour":
    oTView.ZoomTime(21, 4, 1/24, 0);
    pMe.SetProp("Text", "1 " + sText1);
    break;
  case "8hours":
    oTView.ZoomTime(21, 4, 1/3, 0);
    pMe.SetProp("Text", "8 " + sText1);
    break;
  case "1day":
    oTView.ZoomTime(21, 4, 1, 0);
    pMe.SetProp("Text", "1 " + sText2);
    break;
  case "1week":
    oTView.ZoomTime(21, 4, 7, 0);
    pMe.SetProp("Text", "1 " + sText3);
    break;
  case "1month":
    oTView.ZoomTime(21, 4, 30, 0);
    pMe.SetProp("Text", "1 " + sText4);
    break;
}

oTView.Draw()]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

pEvent.Menu.AddMenu("1min",   "1 " + sText0);
pEvent.Menu.AddMenu("15min",  "1/4 " + sText1);
pEvent.Menu.AddMenu("30min",  "1/2 " + sText1);
pEvent.Menu.AddMenu("1hour",  "1 " + sText1);
pEvent.Menu.AddMenu("8hours", "8 " + sText1);
pEvent.Menu.AddMenu("1day",   "1 " + sText2);
pEvent.Menu.AddMenu("1week",  "1 " + sText3);
pEvent.Menu.AddMenu("1month", "1 " + sText4);]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sTitle        = pEvent.GetVar("title").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy - nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// text
if(sTitle)
{
  ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
  ctx.textBaseline = "middle";
  ctx.textAlign    = "center";
  ctx.font         = nFontSize + "px Arial";

  if(nPush)
    ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
  ctx.fillText(sTitle , dx * 0.5, dy * 0.5);
}

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomOut" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">532</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' -'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(11, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttSetting" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">577</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendSetting')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[//if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
//  pMe.Vars("push").Value = pEvent.Action;
//pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();

var oTrendsView = pMe.Items("../AxTrendsView");
var oTView = oTrendsView.Acx;

oTView.DlgTrends("resizable=yes");]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//var oTrendsView = pMe.Items("../AxTrendsView");
//var oTView = oTrendsView.Acx;

//switch(pEvent.Name)
//{
//case "grmode":
//	oTView.ViewMode = oTView.ViewMode == "table" ? "graph" : "table";
//	break;
//case "inicfg":
//  oTView.LoadCfg("string:" + oTrendsView.Vars("cfgini").Value, 11);
//  oTView.ScrollTime(91, 0);
//  oTView.ReadData();
//  oTView.Draw();
//  break;
//case "loadcfg":
//	oTView.LoadCfg("input:#cfg:", 27);
//	oTView.ReadData();
//	oTView.Draw();
//	break;
//case "savecfg":
//    oTView.SaveCfg("input:#cfg:", 1, "Trends;");
//    break;
//case "setting":
//	oTView.DlgTrends("resizable=yes");
//	break;
//case "print":
//	var sHtml = oTView.SaveToHtm("ver:1", "return:", "mode:" + oTView.ViewMode + ";");
//	if(sHtml != "") // print A4 width:700px;height:930px; (210x297), landscape width:930px;height:700px;
//		Pm.PrintHtmlPage(sHtml, "sourcetype:htmlstring;printer:preview;width:700px;height:930px;");
//	break;
//}

]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[////#pragma variable sText0=Macro("$.text('sys','trendViewTable')");
////#pragma variable sText1=Macro("$.text('sys','trendViewGraph')");
////#pragma variable sText2=Macro("$.text('sys','trendLoadCfg')");
////#pragma variable sText3=Macro("$.text('sys','trendSaveCfg')");
////#pragma variable sText4=Macro("$.text('sys','trendSetting')");
////#pragma variable sText5=Macro("$.text('sys','trendPrintGraph')");
////#pragma variable sRestore=Macro("$.text('sys','restoredef')");

//if(pMe.Items("../AxTrendsView").Acx.ViewMode == "graph")
//  pEvent.Menu.AddMenu("grmode", sText0);
//else
//  pEvent.Menu.AddMenu("grmode", sText1);
//pEvent.Menu.AddMenu("inicfg", sRestore);
//pEvent.Menu.AddMenu("loadcfg", sText2);
//pEvent.Menu.AddMenu("savecfg", sText3);
//pEvent.Menu.AddMenu("setting", sText4);
//pEvent.Menu.AddMenu("print",   sText5);
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.4);
ctx.lineTo(dx * 0.7, dy * 0.8);
ctx.bezierCurveTo(dx * 0.7, dy * 0.8, dx * 0.8 , dy * 0.8 , dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.arc(dx * 0.3, dy * 0.3, dx * 0.18, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.arc(dx * 0.25, dy * 0.25, dx * 0.1, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">608</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','enterbegintime')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.CreateForm();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.CreateForm();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangedForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[var oForm = oSystem.ViewObject;
var nMonth = oForm.GetItem("month").Value;
var oIt = oForm.GetItem("day");

switch(nMonth)
{
case 1: case 3: case 5: case 7: case 8: case 10: case 12:
  oIt.Max = 31;
  break;
case 2:
  oIt.Max = 29;
  break;
case 4: case 6: case 9: case 11:
  oIt.Max = 30;
  break;
}]]>
                </Script>
              </Method>
              <Method Name="CloseForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[if(oSystem.CloseReason == "ok")
{
  var oForm = oSystem.ViewObject;
  var dDate = Pm.CreateDate(oForm.GetItem("year").Value, oForm.GetItem("month").Value, oForm.GetItem("day").Value, oForm.GetItem("hour").Value, oForm.GetItem("minute").Value, oForm.GetItem("second").Value, 0);
  pMe.Items("../AxTrendsView").Acx.ScrollTime(40, dDate);
}]]>
                </Script>
              </Method>
              <Method Name="CreateForm">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sDate=Macro("$.text('sys','date')");
//#pragma variable sTime=Macro("$.text('sys','time')");
//#pragma variable sSec=Macro("$.text('sys','second')");
//#pragma variable sMin=Macro("$.text('sys','minute')");
//#pragma variable sHour=Macro("$.text('sys','hour')");
//#pragma variable sDay=Macro("$.text('sys','day')");
//#pragma variable sMonth=Macro("$.text('sys','month')");
//#pragma variable sYear=Macro("$.text('sys','year')");

var dNow = Pm.CreatePmDateObject();

var oIt, oForm = Pm.CreatePmForm();
oForm.Title = sDate+"/"+sTime;

//create form items
var nYear = dNow.GetYear();
oIt = oForm.CreateItem("int", "year", sYear);
oIt.Value = nYear;
oIt.Min = nYear - 10;
oIt.Max = nYear + 1;

oIt = oForm.CreateItem("int", "month", sMonth, "Min:1;Max:12;");
oIt.Value = dNow.GetMonth();

oIt = oForm.CreateItem("int", "day", sDay, "Min:1;Max:31;");
oIt.Value = dNow.GetDay();

oIt = oForm.CreateItem("int", "hour", sHour, "Min:0;Max:23;");
oIt.Value = dNow.GetHour();

oIt = oForm.CreateItem("int", "minute", sMin, "Min:0;Max:59;");
oIt.Value = dNow.GetMinute();

oIt = oForm.CreateItem("int", "second", sSec, "Min:0;Max:59;");
oIt.Value = dNow.GetSecond();

//open form
var oExtra = Pm.CreatePmMap();
oExtra.ViewObject = oForm;
oExtra.onChange   = Pm.CreatePmAction(1, pMe, "ChangedForm");
oExtra.onClose    = Pm.CreatePmAction(1, pMe, "CloseForm");
pMe.PmPanel.OpenView("/#glob/form", "target:_blank;modal:1;", "", oExtra);]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.4);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.8);
ctx.lineTo(dx * 0.5, dy * 0.7);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.2, dy * 0.5);
ctx.lineTo(dx * 0.3, dy * 0.5);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.5);
ctx.closePath();
ctx.stroke();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TextLoading" Type="PmiText">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">648</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">2</Prop>
            <Props Name="Text">
              <Prop Name="Value">
                <DStatic>$.text('sys','trendDataLoading')</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.GetStateText()</Prop>
                </DBind>
              </Prop>
              <Prop Name="FontText">PmSmall</Prop>
              <Prop Name="ColorText">#a80000</Prop>
              <Prop Name="AlignHor">1</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ValueDataType">0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="EditAttr">0</Prop>
            <Prop Name="ShadowType">0</Prop>
            <Prop Name="ShadowColor">#808080</Prop>
          </GItem>
          <GItem Name="AxTrendsView" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">401</Prop>
            <Props Name="LocalProps">
              <Prop Name="infozoom" Type="string">0:01:00</Prop>
              <Prop Name="cfgini" Type="string"></Prop>
              <Prop Name="trendColorSP" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorSP;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorPV" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorPV;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendLineWidth" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/CustomData/#vars/trendLineWidth;Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="ProgID">PmTrdvw.TrendsViewCtl</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{02000002-9DFA-4B37-ABE9-1929F4BCDEA2}</Prop>
            <Event Name="onTimeChange" Type="Ax">
              <Prop Name="Params">rangeType,bZoomChanged,timeMinNew,timeMinType,timeMaxNew,timeMaxType</Prop>
              <Script>
                <![CDATA[if(bZoomChanged)
{
  var tRes = Pm.CreatePmDateObject(timeMaxNew).GetValue() - Pm.CreatePmDateObject(timeMinNew).GetValue();
  var nDay = tRes >= 1 ? Pm.Round(tRes, 1) : 0;
  var sDay = nDay > 0 ? nDay + " " : "";
  pMe.Vars("infozoom").Value = sDay + Pm.CreatePmDateObject(tRes - nDay).Format("%H:%M:%S");
}]]>
              </Script>
            </Event>
            <Event Name="onDataTrendReady" Type="Ax">
              <Prop Name="Params">sTrendID</Prop>
              <Script>
                <![CDATA[if(pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).Points.GetValueByIndex(-2, 0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onCursorTimeChange" Type="Ax">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[if(!pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).CursorValue(0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onTrendParamsChange" Type="Ax">
              <Prop Name="Params">bInit</Prop>
              <Script>
                <![CDATA[//#pragma variable sName=Macro("$.text('sys','name')");
//#pragma variable sUnit=Macro("$.text('sys','unit')");
//#pragma variable sValue=Macro("$.text('sys','value')");

var oTHead = pMe.Items("../AxTrendsHead").Acx;
var oTView = pMe.Acx;
if(bInit)
{
  oTHead.SetCellText(0, 2, sName);
  oTHead.SetCellText(0, 3, sUnit);
  oTHead.SetCellText(0, 6, sValue);
  pMe.Vars("cfgini").Value = oTView.GetCfg("Trends;TimeZoom;", "");
  
  var oTrend = oTView.AddTrend("t0", pMe.GetPar("tagName") + ".CmdValue"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".CmdValue", "");
    oTrend.ValueMax = 100;
    oTrend.ValueMin = 0;
    oTrend.Unit = "%";
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorSP").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
  
  var oTrend = oTView.AddTrend("t1", pMe.GetPar("tagName") + ".ActFB"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".ActFB", "");
    oTrend.ValueMax = 100;
    oTrend.ValueMin = 0;
    oTrend.Unit = "%";
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorPV").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
}

var nCount = oTView.TrendsCount;
oTHead.Rows = nCount + 1;
for(var i = 1; i <= nCount; i++)
{
  var oTrend = oTView.Trends(i -1);
  oTHead.SetCellText(i, 1, oTrend.Visible ? "" : "X");
  oTHead.SetCellText(i, 2, oTrend.Name);
  oTHead.SetCellTextAlign(i, 2, 0);
  oTHead.SetCellText(i, 3, oTrend.Unit);
  oTHead.SetCellText(i, 4, Pm.Round(oTrend.ValueMin, 0.001));
  oTHead.SetCellText(i, 5, Pm.Round(oTrend.ValueMax, 0.001));
  if(!oTView.Autoscroll)
	oTHead.SetCellText(i, 6, Pm.Round(oTrend.CursorValue(0), 0.001));
  oTHead.SetCellBackColor(i, 0, oTrend.GraphDefault.Color);
}
//if(oTHead.FocusedRow >= oTHead.Rows)
//  oTHead.FocusedRow = oTHead.Rows -1;

oTHead.SetCellBackColor(oTHead.FocusedRow, -3, "transparent");
oTHead.FocusedRow = oTView.TrendActive + 1;
oTHead.SetCellBackColor(oTView.TrendActive + 1, -3, "#009898");

// text align cols
oTHead.SetCellTextAlign(-3, 1, 1); //Visible - align center
oTHead.SetCellTextAlign(-3, 2, 0); //Name - align left
oTHead.SetCellTextAlign(-3, 3, 1); //Unit - align center
oTHead.SetCellTextAlign(-3, 4, 1); //Min - align center
oTHead.SetCellTextAlign(-3, 5, 1); //Max - align center
oTHead.SetCellTextAlign(-3, 6, 2); //Value - align right
oTHead.Draw();
if(bInit && !oTView.Autoscroll) oTView.ReadData();
]]>
              </Script>
            </Event>
          </GItem>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrlVSDTrend_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:52</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Title">$.expr("pMe.Name")</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Prop Name="MultiView">1</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">800</Prop>
        <Prop Name="Dy">600</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par"></Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Panel" Type="PmiPanel">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">800</Prop>
          <Prop Name="Dy">600</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">2</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <GItem Name="AxTrendsHead" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">5</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">148</Prop>
            <Prop Name="ProgID">PMTABLE.PmTableCtrl.1</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{19BA6EE6-4BB4-11D1-8085-0020AFC8C4AF}</Prop>
            <Event Name="CellClicked" Type="Ax">
              <Prop Name="Params">nRow,nCol,bCtrl,bShift,bAlt</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead  = pMe.Acx;
var nCount = oTView.TrendsCount;
if(nCol == 1 && nRow > 0 && nRow <= nCount)
{
  var oTrend = oTView.Trends(nRow -1);
  oTrend.Visible = !oTrend.Visible;
  oHead.SetCellText(nRow, nCol, oTrend.Visible ? "" : "X");
  oTView.Draw();
  oHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="CellFocusChanged" Type="Ax">
              <Prop Name="Params">nRow,nCol,nRowOld,nColOld</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead = pMe.Acx;
for(var i = 1; i < oHead.Rows; i++)
  oHead.SetCellBackColor(i, -3, "transparent");

oTView.TrendActive = nRow - 1;
oHead.SetCellBackColor(nRow, -3, "#009898");
oHead.Draw();
oTView.Draw();]]>
              </Script>
            </Event>
            <Event Name="CellEditRequested" Type="Ax">
              <Prop Name="Params">nRow,nCol</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
if(nRow > 0)
  oTView.Trends(nRow - 1).DlgProperties("resizable=yes");]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="buttTwoAutoscroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">8</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendAutoScroll')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
              <Prop Name="state" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                </DBind>
              </Prop>
            </Props>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Vars("state").Value = true;]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  var oState = pMe.Vars("state");
  if(!pEvent.Action) //if key UP
    oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
{
  var oState = pMe.Vars("state");
  oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder     = 1;
var sImgColor   = "#000000";
var sBgColor    = "#acacac";
//---------------------------------
var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
var mode        = pEvent.GetVar("mode").Value;
var nPush       = pEvent.GetVar("push").Value;
var nState      = pEvent.GetVar("state").Value;
var bDisabled   = mode & 0x0030;
var bFocused    = mode & 0x0300;
var bMouseover  = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);
  
// Border
if(nBorder > 0)
{
  // UP border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, 0.7) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // DOWN border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.7);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// FILL
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(!nPush && !nState)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}

ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush || nState)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
  
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;
if(nState)
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.8);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.closePath();
  ctx.fill();

  ctx.beginPath();
  ctx.moveTo(dx * 0.55, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.8);
  ctx.lineTo(dx * 0.55, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}
else
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.8, dy * 0.5);
  ctx.lineTo(dx * 0.4, dy * 0.2);
  ctx.lineTo(dx * 0.4, dy * 0.8);
  ctx.closePath();
  ctx.fill();
  
  ctx.beginPath();
  ctx.moveTo(dx * 0.2, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.lineTo(dx * 0.2, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttScroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">48</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','scroll'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="typeList" Type="string"></Prop>
              <Prop Name="typeSel" Type="integer">12</Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pMe.Vars("typeSel").Value);]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[var oPush = pMe.Vars("push");

if(!pEvent.Action)
{
  if(pEvent.Code == 38)
    pMe.Methods.ChangeType("up");
  if(pEvent.Code == 40)
    pMe.Methods.ChangeType("down");
  if(pEvent.Code == 37)
    pMe.Methods.ChangeTime("left");
  if(pEvent.Code == 39)
    pMe.Methods.ChangeTime("right");
  if(pEvent.Code == 32)
    pMe.ShowMenu();
  oPush.Value = 0;
}
else
{
  if(pEvent.Code == 38 || pEvent.Code == 40)
    oPush.Value = 1;
  if(pEvent.Code == 37)
    oPush.Value = 2;
  if(pEvent.Code == 39)
    oPush.Value = 3;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(!pEvent.Action && pEvent.FocusIn)
  return;

if(pMe.Vars("mode").Value & 0x0300 && !pEvent.FocusIn)
{
  var oPush = pMe.Vars("push");
  var dy = pMe.Dy;
  var dx = pMe.Dx;

  if(!pEvent.Action)
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      pMe.ShowMenu();
    else
    {
      if(pEvent.X < dy)
        pMe.Methods.ChangeTime("left");
      else if(pEvent.X > (dx - dy))
        pMe.Methods.ChangeTime("right");
    }
    oPush.Value = 0;
  }
  else
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      oPush.Value = 1;
    else if(pEvent.X < dy)
      oPush.Value = 2;
    else if(pEvent.X > (dx - dy))
      oPush.Value = 3;
  }
  pMe.Refresh();
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pEvent.Name);]]></Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[var aType = pMe.Methods.GetTypeList();
var nLength = aType.GetSize(1);

for(var i = 0; i < nLength; i++)
  pEvent.Menu.AddMenu(i, aType.GetItem(i, 0));]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangeTime">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var nIndex = pMe.Vars("typeSel").Value;
var aType = pMe.Methods.GetTypeList();
var par1  = aType.GetItem(nIndex, 1);
var par2  = aType.GetItem(nIndex, 2);
var sMeth = aType.GetItem(nIndex, 3);
var t, tOld, tNew;

if(action == "left") // "left"  or keycode 37
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMin;
    tOld = Pm.CreatePmDateObject(t).GetValue() - 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1, tOld, par2);
    oTView.ScrollTime(40, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1, par2);
}
else               // "right"  or keycode 39
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMax, tNew;
    tOld = Pm.CreatePmDateObject(t).GetValue() + 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1 + 40, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1 + 40, tOld, par2);
    oTView.ScrollTime(41, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1 + 1, par2);
}
]]>
                </Script>
              </Method>
              <Method Name="ChangeType">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var nIndex = pMe.Vars("typeSel").Value;
var nLength = aType.GetSize(1);

switch(action)
{
case "up":
  if(nIndex > 0)
    nIndex--;
  break;
case "down":
  if(nIndex < nLength-1)
    nIndex++;
  break;
default:
  nIndex = action;
  break;
}

pMe.Vars("typeSel").Value  = nIndex;
pMe.Vars("typeList").Value = aType.GetItem(nIndex, 0);]]>
                </Script>
              </Method>
              <Method Name="GetTypeList">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sMin=Macro("$text:sys.minute");
//#pragma variable sHour=Macro("$text:sys.hour");
//#pragma variable sDay=Macro("$text:sys.day");
//#pragma variable sWeek=Macro("$text:sys.week");
//#pragma variable sMonth=Macro("$text:sys.month");
//#pragma variable sPage=Macro("$text:sys.Page");
//#pragma variable sEnd=Macro("$text:sys.toEnd");

var aType = Pm.CreatePmArray().Create(14, 5);

// Text types
aType.SetItem("1 "  + sMin,   0, 0); // "1 min"
aType.SetItem("2 "  + sMin,   1, 0); // "2 min"
aType.SetItem("5 "  + sMin,   2, 0); // "5 min"
aType.SetItem("10 " + sMin,   3, 0); //"10 min"
aType.SetItem("15 " + sMin,   4, 0); //"15 min"
aType.SetItem("30 " + sMin,   5, 0); //"30 min"
aType.SetItem("1"   + sHour,  6, 0); // "1 hour"
aType.SetItem("6-14-22",      7, 0); // "shift" (6, 14, 22 hour)
aType.SetItem("1 "  + sDay,   8, 0); // "1 day"
aType.SetItem("1 "  + sWeek,  9, 0); // "1 week"
aType.SetItem("1 "  + sMonth,10, 0); // "1 month"
aType.SetItem("1/5 "+ sPage, 11, 0); // "1/5 page" 
aType.SetItem("1 "  + sPage, 12, 0); // "1 page"
aType.SetItem(sEnd,          13, 0); // "To end"

// first param methods
aType.SetItem(47,  0, 1);
aType.SetItem(47,  1, 1);
aType.SetItem(47,  2, 1);
aType.SetItem(47,  3, 1);
aType.SetItem(47,  4, 1);
aType.SetItem(47,  5, 1);
aType.SetItem(46,  6, 1);
aType.SetItem(46,  7, 1);
aType.SetItem(45,  8, 1);
aType.SetItem(44,  9, 1);
aType.SetItem(43, 10, 1);
aType.SetItem(30, 11, 1);
aType.SetItem(30, 12, 1);
aType.SetItem(90, 13, 1);

// second param method
aType.SetItem(1,     0, 2);
aType.SetItem(2,     1, 2);
aType.SetItem(5,     2, 2);
aType.SetItem(10,    3, 2);
aType.SetItem(15,    4, 2);
aType.SetItem(30,    5, 2);
aType.SetItem(1,     6, 2);
aType.SetItem(8,     7, 2);
aType.SetItem(null,  8, 2);
aType.SetItem(null,  9, 2);
aType.SetItem(null, 10, 2);
aType.SetItem(1/5,  11, 2);
aType.SetItem(1,    12, 2);
aType.SetItem(0,    13, 2);

// select methods
aType.SetItem("GetDateOf",   0, 3);
aType.SetItem("GetDateOf",   1, 3);
aType.SetItem("GetDateOf",   2, 3);
aType.SetItem("GetDateOf",   3, 3);
aType.SetItem("GetDateOf",   4, 3);
aType.SetItem("GetDateOf",   5, 3);
aType.SetItem("GetDateOf",   6, 3);
aType.SetItem("GetDateOf",   7, 3);
aType.SetItem("GetDateOf",   8, 3);
aType.SetItem("GetDateOf",   9, 3);
aType.SetItem("GetDateOf",  10, 3);
aType.SetItem("ScrollTime", 11, 3);
aType.SetItem("ScrollTime", 12, 3);
aType.SetItem("ScrollTime", 13, 3);

return aType]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var sShiftNot     = "- - -";

var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sShift        = pEvent.GetVar("typeList").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder > 0)
{
  // up border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(dy, nBorder, dy, dy-nBorder);
grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

//nPush = 3;
if(nPush > 0)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
  ctx.fillStyle = grd;
  ctx.beginPath();

  switch(nPush)
  {
  case 1:
    ctx.moveTo(dy, dy - nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - dy, dy - nBorder);
    break;

  case 2:
    ctx.moveTo(nBorder, dy - nBorder);
    ctx.lineTo(nBorder, nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dy, dy - nBorder);
    break;

  case 3:
    ctx.moveTo(dx - dy, dy - nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - nBorder, nBorder);
    ctx.lineTo(dx - nBorder, dy - nBorder);
    break;
  }
  ctx.closePath();    
  ctx.fill();
}

ctx.fillStyle    = "#000000";
ctx.beginPath();
ctx.moveTo(dy * 0.2, dy * 0.5);
ctx.lineTo(dy * 0.8, dy * 0.2);
ctx.lineTo(dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dy, nBorder);
  ctx.lineTo(dy, dy - nBorder);
  ctx.stroke();
}

ctx.beginPath();
ctx.moveTo(dx - dy * 0.2, dy * 0.5);
ctx.lineTo(dx - dy * 0.8, dy * 0.2);
ctx.lineTo(dx - dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dx - dy, nBorder);
  ctx.lineTo(dx - dy, dy - nBorder);
  ctx.stroke();
}

// text
ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = nFontSize + "px Arial";

//if(nPush)
//  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillText(bFocused ? sShift : sShiftNot, dx * 0.5, dy * 0.5);

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttNewestAll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','toEnd'),' - ',$.text('sys','right'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Items("../AxTrendsView").Acx.ScrollTime(91, 0);]]></Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.2, dy * 0.2);
ctx.lineTo(dx * 0.2, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.9, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.8);
ctx.lineTo(dx * 0.9, dy * 0.8);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">248</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 1')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M1";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">288</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 2')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M2";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomIn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">380</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' +'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(10, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.47, dy * 0.3);
ctx.lineTo(dx * 0.47, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.3);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">412</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','zoom'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="title" Type="string">
                <DStatic Type="string">00:01:00</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Vars("infozoom")</Prop>
                </DBind>
              </Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1=="graph"</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
  pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

var oTView = pMe.Items("../AxTrendsView").Acx

switch(pEvent.Name)
{
  case "1min":
    oTView.ZoomTime(21, 4, 1/24/60, 0);
    pMe.SetProp("Text", "1 " + sText0);
    break;
  case "15min":
    oTView.ZoomTime(21, 4, 1/24/4, 0);
    pMe.SetProp("Text", "1/4 " + sText1);
    break;
  case "30min":
    oTView.ZoomTime(21, 4, 1/24/2, 0);
    pMe.SetProp("Text", "1/2 " + sText1);
    break;
  case "1hour":
    oTView.ZoomTime(21, 4, 1/24, 0);
    pMe.SetProp("Text", "1 " + sText1);
    break;
  case "8hours":
    oTView.ZoomTime(21, 4, 1/3, 0);
    pMe.SetProp("Text", "8 " + sText1);
    break;
  case "1day":
    oTView.ZoomTime(21, 4, 1, 0);
    pMe.SetProp("Text", "1 " + sText2);
    break;
  case "1week":
    oTView.ZoomTime(21, 4, 7, 0);
    pMe.SetProp("Text", "1 " + sText3);
    break;
  case "1month":
    oTView.ZoomTime(21, 4, 30, 0);
    pMe.SetProp("Text", "1 " + sText4);
    break;
}

oTView.Draw()]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

pEvent.Menu.AddMenu("1min",   "1 " + sText0);
pEvent.Menu.AddMenu("15min",  "1/4 " + sText1);
pEvent.Menu.AddMenu("30min",  "1/2 " + sText1);
pEvent.Menu.AddMenu("1hour",  "1 " + sText1);
pEvent.Menu.AddMenu("8hours", "8 " + sText1);
pEvent.Menu.AddMenu("1day",   "1 " + sText2);
pEvent.Menu.AddMenu("1week",  "1 " + sText3);
pEvent.Menu.AddMenu("1month", "1 " + sText4);]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sTitle        = pEvent.GetVar("title").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy - nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// text
if(sTitle)
{
  ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
  ctx.textBaseline = "middle";
  ctx.textAlign    = "center";
  ctx.font         = nFontSize + "px Arial";

  if(nPush)
    ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
  ctx.fillText(sTitle , dx * 0.5, dy * 0.5);
}

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomOut" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">532</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' -'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(11, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttSetting" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">577</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendSetting')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[//if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
//  pMe.Vars("push").Value = pEvent.Action;
//pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();

var oTrendsView = pMe.Items("../AxTrendsView");
var oTView = oTrendsView.Acx;

oTView.DlgTrends("resizable=yes");]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//var oTrendsView = pMe.Items("../AxTrendsView");
//var oTView = oTrendsView.Acx;

//switch(pEvent.Name)
//{
//case "grmode":
//	oTView.ViewMode = oTView.ViewMode == "table" ? "graph" : "table";
//	break;
//case "inicfg":
//  oTView.LoadCfg("string:" + oTrendsView.Vars("cfgini").Value, 11);
//  oTView.ScrollTime(91, 0);
//  oTView.ReadData();
//  oTView.Draw();
//  break;
//case "loadcfg":
//	oTView.LoadCfg("input:#cfg:", 27);
//	oTView.ReadData();
//	oTView.Draw();
//	break;
//case "savecfg":
//    oTView.SaveCfg("input:#cfg:", 1, "Trends;");
//    break;
//case "setting":
//	oTView.DlgTrends("resizable=yes");
//	break;
//case "print":
//	var sHtml = oTView.SaveToHtm("ver:1", "return:", "mode:" + oTView.ViewMode + ";");
//	if(sHtml != "") // print A4 width:700px;height:930px; (210x297), landscape width:930px;height:700px;
//		Pm.PrintHtmlPage(sHtml, "sourcetype:htmlstring;printer:preview;width:700px;height:930px;");
//	break;
//}

]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[////#pragma variable sText0=Macro("$.text('sys','trendViewTable')");
////#pragma variable sText1=Macro("$.text('sys','trendViewGraph')");
////#pragma variable sText2=Macro("$.text('sys','trendLoadCfg')");
////#pragma variable sText3=Macro("$.text('sys','trendSaveCfg')");
////#pragma variable sText4=Macro("$.text('sys','trendSetting')");
////#pragma variable sText5=Macro("$.text('sys','trendPrintGraph')");
////#pragma variable sRestore=Macro("$.text('sys','restoredef')");

//if(pMe.Items("../AxTrendsView").Acx.ViewMode == "graph")
//  pEvent.Menu.AddMenu("grmode", sText0);
//else
//  pEvent.Menu.AddMenu("grmode", sText1);
//pEvent.Menu.AddMenu("inicfg", sRestore);
//pEvent.Menu.AddMenu("loadcfg", sText2);
//pEvent.Menu.AddMenu("savecfg", sText3);
//pEvent.Menu.AddMenu("setting", sText4);
//pEvent.Menu.AddMenu("print",   sText5);
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.4);
ctx.lineTo(dx * 0.7, dy * 0.8);
ctx.bezierCurveTo(dx * 0.7, dy * 0.8, dx * 0.8 , dy * 0.8 , dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.arc(dx * 0.3, dy * 0.3, dx * 0.18, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.arc(dx * 0.25, dy * 0.25, dx * 0.1, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">608</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','enterbegintime')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.CreateForm();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.CreateForm();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangedForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[var oForm = oSystem.ViewObject;
var nMonth = oForm.GetItem("month").Value;
var oIt = oForm.GetItem("day");

switch(nMonth)
{
case 1: case 3: case 5: case 7: case 8: case 10: case 12:
  oIt.Max = 31;
  break;
case 2:
  oIt.Max = 29;
  break;
case 4: case 6: case 9: case 11:
  oIt.Max = 30;
  break;
}]]>
                </Script>
              </Method>
              <Method Name="CloseForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[if(oSystem.CloseReason == "ok")
{
  var oForm = oSystem.ViewObject;
  var dDate = Pm.CreateDate(oForm.GetItem("year").Value, oForm.GetItem("month").Value, oForm.GetItem("day").Value, oForm.GetItem("hour").Value, oForm.GetItem("minute").Value, oForm.GetItem("second").Value, 0);
  pMe.Items("../AxTrendsView").Acx.ScrollTime(40, dDate);
}]]>
                </Script>
              </Method>
              <Method Name="CreateForm">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sDate=Macro("$.text('sys','date')");
//#pragma variable sTime=Macro("$.text('sys','time')");
//#pragma variable sSec=Macro("$.text('sys','second')");
//#pragma variable sMin=Macro("$.text('sys','minute')");
//#pragma variable sHour=Macro("$.text('sys','hour')");
//#pragma variable sDay=Macro("$.text('sys','day')");
//#pragma variable sMonth=Macro("$.text('sys','month')");
//#pragma variable sYear=Macro("$.text('sys','year')");

var dNow = Pm.CreatePmDateObject();

var oIt, oForm = Pm.CreatePmForm();
oForm.Title = sDate+"/"+sTime;

//create form items
var nYear = dNow.GetYear();
oIt = oForm.CreateItem("int", "year", sYear);
oIt.Value = nYear;
oIt.Min = nYear - 10;
oIt.Max = nYear + 1;

oIt = oForm.CreateItem("int", "month", sMonth, "Min:1;Max:12;");
oIt.Value = dNow.GetMonth();

oIt = oForm.CreateItem("int", "day", sDay, "Min:1;Max:31;");
oIt.Value = dNow.GetDay();

oIt = oForm.CreateItem("int", "hour", sHour, "Min:0;Max:23;");
oIt.Value = dNow.GetHour();

oIt = oForm.CreateItem("int", "minute", sMin, "Min:0;Max:59;");
oIt.Value = dNow.GetMinute();

oIt = oForm.CreateItem("int", "second", sSec, "Min:0;Max:59;");
oIt.Value = dNow.GetSecond();

//open form
var oExtra = Pm.CreatePmMap();
oExtra.ViewObject = oForm;
oExtra.onChange   = Pm.CreatePmAction(1, pMe, "ChangedForm");
oExtra.onClose    = Pm.CreatePmAction(1, pMe, "CloseForm");
pMe.PmPanel.OpenView("/#glob/form", "target:_blank;modal:1;", "", oExtra);]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.4);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.8);
ctx.lineTo(dx * 0.5, dy * 0.7);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.2, dy * 0.5);
ctx.lineTo(dx * 0.3, dy * 0.5);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.5);
ctx.closePath();
ctx.stroke();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TextLoading" Type="PmiText">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">648</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">2</Prop>
            <Props Name="Text">
              <Prop Name="Value">
                <DStatic>$.text('sys','trendDataLoading')</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.GetStateText()</Prop>
                </DBind>
              </Prop>
              <Prop Name="FontText">PmSmall</Prop>
              <Prop Name="ColorText">#a80000</Prop>
              <Prop Name="AlignHor">1</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ValueDataType">0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="EditAttr">0</Prop>
            <Prop Name="ShadowType">0</Prop>
            <Prop Name="ShadowColor">#808080</Prop>
          </GItem>
          <GItem Name="AxTrendsView" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">155</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">401</Prop>
            <Props Name="LocalProps">
              <Prop Name="infozoom" Type="string">0:01:00</Prop>
              <Prop Name="cfgini" Type="string"></Prop>
              <Prop Name="trendColorSP" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorSP;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorPV" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorPV;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendLineWidth" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/CustomData/#vars/trendLineWidth;Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="ProgID">PmTrdvw.TrendsViewCtl</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{02000002-9DFA-4B37-ABE9-1929F4BCDEA2}</Prop>
            <Event Name="onTimeChange" Type="Ax">
              <Prop Name="Params">rangeType,bZoomChanged,timeMinNew,timeMinType,timeMaxNew,timeMaxType</Prop>
              <Script>
                <![CDATA[if(bZoomChanged)
{
  var tRes = Pm.CreatePmDateObject(timeMaxNew).GetValue() - Pm.CreatePmDateObject(timeMinNew).GetValue();
  var nDay = tRes >= 1 ? Pm.Round(tRes, 1) : 0;
  var sDay = nDay > 0 ? nDay + " " : "";
  pMe.Vars("infozoom").Value = sDay + Pm.CreatePmDateObject(tRes - nDay).Format("%H:%M:%S");
}]]>
              </Script>
            </Event>
            <Event Name="onDataTrendReady" Type="Ax">
              <Prop Name="Params">sTrendID</Prop>
              <Script>
                <![CDATA[if(pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).Points.GetValueByIndex(-2, 0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onCursorTimeChange" Type="Ax">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[if(!pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).CursorValue(0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onTrendParamsChange" Type="Ax">
              <Prop Name="Params">bInit</Prop>
              <Script>
                <![CDATA[//#pragma variable sName=Macro("$.text('sys','name')");
//#pragma variable sUnit=Macro("$.text('sys','unit')");
//#pragma variable sValue=Macro("$.text('sys','value')");

var oTHead = pMe.Items("../AxTrendsHead").Acx;
var oTView = pMe.Acx;
if(bInit)
{
  oTHead.SetCellText(0, 2, sName);
  oTHead.SetCellText(0, 3, sUnit);
  oTHead.SetCellText(0, 6, sValue);
  pMe.Vars("cfgini").Value = oTView.GetCfg("Trends;TimeZoom;", "");
  
  var oTrend = oTView.AddTrend("t0", pMe.GetPar("tagName") + ".HMI_PV"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".HMI_PV", "");
    oTrend.ValueMax = 100;
    oTrend.ValueMin = 0;
    oTrend.Unit = "%";
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorPV").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
  
  var oTrend = oTView.AddTrend("t1", pMe.GetPar("tagName") + ".HMI_SV"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".HMI_SV", "");
    oTrend.ValueMax = 100;
    oTrend.ValueMin = 0;
    oTrend.Unit = "%";
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorSP").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
}

var nCount = oTView.TrendsCount;
oTHead.Rows = nCount + 1;
for(var i = 1; i <= nCount; i++)
{
  var oTrend = oTView.Trends(i -1);
  oTHead.SetCellText(i, 1, oTrend.Visible ? "" : "X");
  oTHead.SetCellText(i, 2, oTrend.Name);
  oTHead.SetCellTextAlign(i, 2, 0);
  oTHead.SetCellText(i, 3, oTrend.Unit);
  oTHead.SetCellText(i, 4, Pm.Round(oTrend.ValueMin, 0.001));
  oTHead.SetCellText(i, 5, Pm.Round(oTrend.ValueMax, 0.001));
  if(!oTView.Autoscroll)
	oTHead.SetCellText(i, 6, Pm.Round(oTrend.CursorValue(0), 0.001));
  oTHead.SetCellBackColor(i, 0, oTrend.GraphDefault.Color);
}
//if(oTHead.FocusedRow >= oTHead.Rows)
//  oTHead.FocusedRow = oTHead.Rows -1;

oTHead.SetCellBackColor(oTHead.FocusedRow, -3, "transparent");
oTHead.FocusedRow = oTView.TrendActive + 1;
oTHead.SetCellBackColor(oTView.TrendActive + 1, -3, "#009898");

// text align cols
oTHead.SetCellTextAlign(-3, 1, 1); //Visible - align center
oTHead.SetCellTextAlign(-3, 2, 0); //Name - align left
oTHead.SetCellTextAlign(-3, 3, 1); //Unit - align center
oTHead.SetCellTextAlign(-3, 4, 1); //Min - align center
oTHead.SetCellTextAlign(-3, 5, 1); //Max - align center
oTHead.SetCellTextAlign(-3, 6, 2); //Value - align right
oTHead.Draw();
if(bInit && !oTView.Autoscroll) oTView.ReadData();
]]>
              </Script>
            </Event>
          </GItem>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_AnalogPosCtrl_ExtFP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:31</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">350</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">350</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Prop Name="ToolTip">
            <DStatic></DStatic>
            <DBind Type="GP">
              <Prop Name="Value">.;Vars("Description")</Prop>
            </DBind>
          </Prop>
          <Props Name="LocalProps">
            <Prop Name="StatusVis" Type="bool">1</Prop>
            <Prop Name="SetupVis" Type="bool">0</Prop>
            <Prop Name="ConPuVis" Type="bool">0</Prop>
          </Props>
          <Event Name="onRefresh" Type="Pm">
            <Script>
              <![CDATA[
]]>
            </Script>
          </Event>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_E2Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E2";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="CmdValue" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/CmdValue");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="ActFB" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_DevDB" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_DevDB");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travel = Pm.Abs(pMe.Vars("CmdValue").Value - pMe.Vars("ActFB").Value) > pMe.Vars("HMI_DevDB").Value;
pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(travel)
{
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value ? true : false;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{    
    if(pMe.Vars("ActFB").Value > 0)
    {
        pMe.GetChildByIndex(0).Visible = true;
        pMe.GetChildByIndex(1).Visible = false;
    }
    else
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = true;
    }
}]]>
              </Script>
            </Event>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:24_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="E1" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/E1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="E2" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/E2");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "L";


if(pEvent.GetVar("Loc").Value)
{
    mode = "L";
}
else if(pEvent.GetVar("Man").Value)
{
    mode = "M";
}
else if(pEvent.GetVar("E2").Value)
{
    mode = "E2";
}
else if(pEvent.GetVar("E1").Value)
{
    mode = "E1";
}


ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E1Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_E1Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E1";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AnalogPosCtrlData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">146</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AnalogPosCtrlTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">280</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="FBFault_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/FBFault_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="PosError_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/PosError_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HWSigFault_FB_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HWSigFault_FB_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("PosError_ALAck").Value = false;
        pMe.Vars("FBFault_ALAck").Value = false;
        pMe.Vars("HWSigFault_FB_ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Background" Type="PmiRectangle">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">100</Prop>
            <Prop Name="IsSymmetry">0</Prop>
            <Prop Name="RadiusX">0</Prop>
            <Prop Name="RadiusY">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="ColorPattern">#000000</Prop>
            <Prop Name="Pattern">0</Prop>
            <Prop Name="WidthBorder">1</Prop>
            <Prop Name="ColorBorder">#808080</Prop>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">135</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:38_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">32</Prop>
            <Prop Name="CropDy">32</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AnalogPosCtrl_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="MenuBar" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Index" Type="integer">0</Prop>
              <Prop Name="Titles" Type="string">Status;Nastavení;Con-Pu</Prop>
              <Prop Name="Widths" Type="string">80;80;80</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action == 0)
{
  var nBlock = 0, nIndex = -1;
  var aWidth = Pm.StringSplit(pMe.Vars("Widths").Value, ";", "empty:1;");
  for(var i = 0; i < aWidth.GetSize(1); i++)
  {
    nBlock += Pm.ToNumber(aWidth.GetItem(i, -1));
    if(pEvent.X < nBlock) {pMe.Vars("Index").Value = i; nIndex = i; break;}
  }
  
  //var oFrame = pMe.Items("/Frame");
  switch(nIndex)
  {
  case 0:
    pMe.Parent.Vars("StatusVis").Value = true;
    pMe.Parent.Vars("SetupVis").Value = false;
    pMe.Parent.Vars("ConPuVis").Value = false;
    break;
  case 1:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = true;
    pMe.Parent.Vars("ConPuVis").Value = false;
    break;
  case 2:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    pMe.Parent.Vars("ConPuVis").Value = true;
    break;
  default: break;
  }
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
var bgColor     = "#d0d0d0";
var bgColorAct  = "#f0f0f0";
var borderColor = "#000000";
var titleColor  = "#000000";
var fontSize    = 12;
var borderWidth = 1;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

var nIndex    = pEvent.GetVar("Index").Value;
var aWidths   = Pm.StringSplit(pEvent.GetVar("Widths").Value, ";", "empty:1;");
var aTitles   = Pm.StringSplit(pEvent.GetVar("Titles").Value, ";", "empty:1;");

var dy        = pEvent.CtxDy;
var dx        = pEvent.CtxDx;
var ctx       = pEvent.GetCtx(0);
var nTitles   = aTitles.GetSize(1);
var nBlock = 0, nWidth, nB = borderWidth / 2;

ctx.lineWidth     = borderWidth;
ctx.strokeStyle   = borderColor;
ctx.font          = fontSize + "px Arial";
ctx.textAlign     = "center";
ctx.textBaseline  = "middle";

for(var i = 0; i < nTitles; i++)
{
  nWidth = Pm.ToNumber(aWidths.GetItem(i, -1));

  ctx.beginPath();

  ctx.moveTo(nBlock + nB, dy - nB);
  ctx.lineTo(nBlock + nB, dy * 0.25);
  ctx.bezierCurveTo(nBlock + nB, dy * 0.25, nBlock + nB, nB, nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.9, nB);
  ctx.lineTo(nBlock + nWidth, dy * 0.25);
  ctx.lineTo(nBlock + nWidth, dy - nB);

  if(i == nIndex)
     ctx.fillStyle = bgColorAct;
  else
  {
     ctx.fillStyle = bgColor;
     ctx.closePath();
  }
  
  if(borderWidth > 0)
    ctx.stroke();
  ctx.fill();

  ctx.fillStyle = titleColor;
  ctx.fillText(aTitles.GetItem(i, -1), nBlock + nWidth / 2, dy / 2);
    
  nBlock += nWidth;
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_PFreqFactor" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("P freq. factor", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ConPu" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("CON-PU", dx, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ConPuBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">260</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ConPuAct");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="userPriority" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="UP">
                  <Prop Name="Value">Priority</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = !pMe.Vars("Value").Value;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Enable">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[if(pEvent.GetVar("userPriority").Value < 1)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = pEvent.GetVar("Value").Value ? "OFF" : "ON";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
pEvent.Methods.Enable(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_ConPuK" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">185</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ConPuK");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_ACTT" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ACTT");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_PF" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/PF");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_PLenFactor" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">185</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("P lenght factor", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ActTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ConPuVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Actuator time", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_DevDB" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">185</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_DevDB");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_DevAlDly" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zpoždění alarmu", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_DevDB" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">185</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Pásmo necitlivosti", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_DevAlDelay" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_DevDelay");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="ActFB" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="ActFB" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="ActFB">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ActFB = Pm.Round(pEvent.GetVar("ActFB").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(ActFB + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.ActFB(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CmdValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="CmdValue" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/CmdValue");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Man");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AnalogPosCtrlData/" + pMe.GetPar("tagName") + "/#vars/CmdValue;");
}
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="CmdValue">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var CmdValue = Pm.Round(pEvent.GetVar("CmdValue").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(CmdValue + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Control">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var ManualMode = pEvent.GetVar("Man").Value;

if(!ManualMode)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.CmdValue(ctx, dx, dy);
pEvent.Methods.SP(ctx, dx, dy);
pEvent.Methods.Control(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Aktuální pozice", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zadaná pozice", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrlVSD_ExtFP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:55</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">410</Prop>
        <Prop Name="Dy">500</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">410</Prop>
          <Prop Name="Dy">500</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Props Name="LocalProps">
            <Prop Name="ControlVis" Type="bool">1</Prop>
            <Prop Name="StatusVis" Type="bool">0</Prop>
            <Prop Name="IlcksCWVis" Type="bool">0</Prop>
            <Prop Name="IlcksCCWVis" Type="bool">0</Prop>
            <Prop Name="SetupVis" Type="bool">0</Prop>
          </Props>
          <Prop Name="FocusType">0</Prop>
          <GItem Name="Background" Type="PmiRectangle">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">390</Prop>
            <Prop Name="Dy">200</Prop>
            <Prop Name="IsSymmetry">0</Prop>
            <Prop Name="RadiusX">0</Prop>
            <Prop Name="RadiusY">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="ColorPattern">#000000</Prop>
            <Prop Name="Pattern">0</Prop>
            <Prop Name="WidthBorder">1</Prop>
            <Prop Name="ColorBorder">#808080</Prop>
          </GItem>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">350</Prop>
            <Prop Name="Dx">390</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">390</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">215</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_LOC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Loc";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="Cmd0Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd1IntCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd1IntCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travelCW = pMe.Vars("Cmd1IntCW").Value && !pMe.Vars("RunCW").Value;
var travelCCW = pMe.Vars("Cmd1IntCCW").Value && !pMe.Vars("RunCCW").Value;
var travelStop = pMe.Vars("Cmd0Int").Value && (pMe.Vars("RunCW").Value || pMe.Vars("RunCCW").Value);

pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(travelCW)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = pMe.Vars("blink").Value;
    pMe.GetChildByIndex(2).Visible = false;
}
else if(travelCCW)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = pMe.Vars("blink").Value;
}
else if(travelStop)
{
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}
else
{
    if(pMe.Vars("RunCW").Value)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = true;
        pMe.GetChildByIndex(2).Visible = false;
    }
    else if(pMe.Vars("RunCCW").Value)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = true;
    }
    else
    {
        pMe.GetChildByIndex(0).Visible = true;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = false;
    }
}
]]>
              </Script>
            </Event>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCW" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCW" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "";

if(pEvent.GetVar("Cen").Value)
{
    mode = pEvent.GetVar("Auto").Value ? "A" : "M";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">215</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">346</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">296</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData_VSD/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">370</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">360</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">185</Prop>
            <Prop Name="Y">460</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:38_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.PmPanel.Close();
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrlVSD_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "Loc";


if(pEvent.GetVar("Loc").Value)
{
    mode = "Loc";
}
else if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OffBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Interlock" Type="bool">1</Prop>
              <Prop Name="Run" Type="bool">0</Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("Interlock").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="UseParentVars">1</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(!pEvent.GetParentVar("Interlock").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrlVSDTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="SVInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="InSV" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/InSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ExtSV" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ExtSV");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[
if(pMe.Vars("InSV").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else if(pMe.Vars("ExtSV").Value)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = false;
}
]]>
              </Script>
            </Event>
            <GItem Name="InSV" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:15_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">64</Prop>
              <Prop Name="CropDy">64</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="ExtSV" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:43_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">64</Prop>
              <Prop Name="CropDy">64</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_ExtSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:43_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">100</Prop>
              <Prop Name="CropDy">100</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="InBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_InSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:15_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">64</Prop>
              <Prop Name="CropDy">64</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="MenuBar" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">390</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Index" Type="integer">0</Prop>
              <Prop Name="Titles" Type="string">Ovládání;Status;BlokCW;BlokCCW;Nastavení</Prop>
              <Prop Name="Widths" Type="string">70;70;70;70;70</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action == 0)
{
  var nBlock = 0, nIndex = -1;
  var aWidth = Pm.StringSplit(pMe.Vars("Widths").Value, ";", "empty:1;");
  for(var i = 0; i < aWidth.GetSize(1); i++)
  {
    nBlock += Pm.ToNumber(aWidth.GetItem(i, -1));
    if(pEvent.X < nBlock) {pMe.Vars("Index").Value = i; nIndex = i; break;}
  }
  
  //var oFrame = pMe.Items("/Frame");
  switch(nIndex)
  {
  case 0:
    pMe.Parent.Vars("ControlVis").Value = true;
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 1:
    pMe.Parent.Vars("ControlVis").Value = false;
    pMe.Parent.Vars("StatusVis").Value = true;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 2:
    pMe.Parent.Vars("ControlVis").Value = false;
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = true;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 3:
    pMe.Parent.Vars("ControlVis").Value = false;
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = true;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 4:
    pMe.Parent.Vars("ControlVis").Value = false;
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = true;
    break;
  default: break;
  }
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
var bgColor     = "#d0d0d0";
var bgColorAct  = "#f0f0f0";
var borderColor = "#000000";
var titleColor  = "#000000";
var fontSize    = 12;
var borderWidth = 1;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

var nIndex    = pEvent.GetVar("Index").Value;
var aWidths   = Pm.StringSplit(pEvent.GetVar("Widths").Value, ";", "empty:1;");
var aTitles   = Pm.StringSplit(pEvent.GetVar("Titles").Value, ";", "empty:1;");

var dy        = pEvent.CtxDy;
var dx        = pEvent.CtxDx;
var ctx       = pEvent.GetCtx(0);
var nTitles   = aTitles.GetSize(1);
var nBlock = 0, nWidth, nB = borderWidth / 2;

ctx.lineWidth     = borderWidth;
ctx.strokeStyle   = borderColor;
ctx.font          = fontSize + "px Arial";
ctx.textAlign     = "center";
ctx.textBaseline  = "middle";

for(var i = 0; i < nTitles; i++)
{
  nWidth = Pm.ToNumber(aWidths.GetItem(i, -1));

  ctx.beginPath();

  ctx.moveTo(nBlock + nB, dy - nB);
  ctx.lineTo(nBlock + nB, dy * 0.25);
  ctx.bezierCurveTo(nBlock + nB, dy * 0.25, nBlock + nB, nB, nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.9, nB);
  ctx.lineTo(nBlock + nWidth, dy * 0.25);
  ctx.lineTo(nBlock + nWidth, dy - nB);

  if(i == nIndex)
     ctx.fillStyle = bgColorAct;
  else
  {
     ctx.fillStyle = bgColor;
     ctx.closePath();
  }
  
  if(borderWidth > 0)
    ctx.stroke();
  ctx.fill();

  ctx.fillStyle = titleColor;
  ctx.fillText(aTitles.GetItem(i, -1), nBlock + nWidth / 2, dy / 2);
    
  nBlock += nWidth;
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FBTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">120</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Zpoždění alarmu:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_OutOfSrv" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Mimo provoz", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_OutOfSrv" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="text_sim" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Simulace skupiny", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_sim" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_Sim");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="edit_FBTime" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">320</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/FBTime");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="CheckBox_ib1ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB1BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib2ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB2BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib3ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB3BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib4ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB4BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_iaccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IABlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_pdccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_PDBlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="ind_icccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ICCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib1ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB1CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB1BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib2ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB2CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB2BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib3ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB3CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB3BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib4ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB4CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB4BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_iaccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IACCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IABlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_pdccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/PDCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_PDBlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_icccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ICCCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib1ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB1CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib2ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB2CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib3ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB3CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib4ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB4CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iaccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IACCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pdccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/PDCCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_ib1cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB1BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib2cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB2BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib3cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB3BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib4cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB4BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_iacw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IABlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_pdcw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_PDBlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="ind_iccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ICCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib1cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB1CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB1BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib2cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB2CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB2BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib3cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB3CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB3BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib4cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB4CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IB4BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_iacw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IACW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_IABlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_pdcw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/PDCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_PDBlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IC", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib1cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB1", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib2cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB2", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib3cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB3", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib4cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB4", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iacw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IA", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pdcw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("PD", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ICCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib1cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB1CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib2cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB2CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib3cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB3CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib4cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IB4CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iacwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/IACW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pdcwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/PDCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_RFSCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zapnutí povoleno CW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_RFSCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zapnutí povoleno CCW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ME" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ME");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ME" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("ME - Ovládací napájení", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ActFB" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">60</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="HMI_PV" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_PV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ControlVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="ActFB">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ActFB = Pm.Round(pEvent.GetVar("HMI_PV").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(ActFB + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.ActFB(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CmdValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">60</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_SV" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_SV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="InSV" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/InSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("InSV")</Prop>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ControlVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData_VSD/" + pMe.GetPar("tagName") + "/#vars/HMI_SV;");
}
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="CmdValue">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var HMI_SV = Pm.Round(pEvent.GetVar("HMI_SV").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(HMI_SV + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Control">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var InSV = pEvent.GetVar("InSV").Value;

if(!InSV)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.CmdValue(ctx, dx, dy);
pEvent.Methods.SP(ctx, dx, dy);
pEvent.Methods.Control(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_actPV" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ControlVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Aktuální rychlost", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_actSP" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ControlVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zadaná rychlost", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_cmd1cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd1IntCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_cmd1ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd1IntCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_cmd0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_fb1cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/FB1CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_fb1ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/FB1CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_fb0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/FB0");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCW0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 1 CW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCCW0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 1 CCW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ME0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 0", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCW1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 1 CW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCCW1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 1 CCW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ME1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 0", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrl2D_ExtFP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:46</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">500</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
          <Prop Name="dirSpd" Type="par">1</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Canvas" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">500</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="dirSpd" Type="par">$.par("dirSpd")</Prop>
          </Props>
          <Props Name="LocalProps">
            <Prop Name="StatusVis" Type="bool">1</Prop>
            <Prop Name="IlcksCWVis" Type="bool">0</Prop>
            <Prop Name="IlcksCCWVis" Type="bool">0</Prop>
            <Prop Name="SetupVis" Type="bool">0</Prop>
          </Props>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">350</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_LOC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Loc";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Cmd0Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd1IntCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd1IntCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="dirSpd" Type="integer">0</Prop>
              <Prop Name="blink" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travelCW = pMe.Vars("Cmd1IntCW").Value && !pMe.Vars("RunCW").Value;
var travelCCW = pMe.Vars("Cmd1IntCCW").Value && !pMe.Vars("RunCCW").Value;
var travelStop = pMe.Vars("Cmd0Int").Value && (pMe.Vars("RunCW").Value || pMe.Vars("RunCCW").Value);

pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");
pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(pMe.Vars("dirSpd").Value == 1)
{
    if(travelCCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(3).Visible = false;
        pMe.GetChildByIndex(4).Visible = pMe.Vars("blink").Value;
    }
    else if(travelCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(3).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(4).Visible = false;
    }
    else if(travelStop)
    {
        pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(3).Visible = false;
        pMe.GetChildByIndex(4).Visible = false;
    }
    else
    {
        if(pMe.Vars("RunCCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(3).Visible = false;
            pMe.GetChildByIndex(4).Visible = true;
        }
        else if(pMe.Vars("RunCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(3).Visible = true;
            pMe.GetChildByIndex(4).Visible = false;
        }
        else
        {
            pMe.GetChildByIndex(0).Visible = true;
            pMe.GetChildByIndex(3).Visible = false;
            pMe.GetChildByIndex(4).Visible = false;
        }
    }
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}

if(pMe.Vars("dirSpd").Value == 2)
{
    if(travelCCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = pMe.Vars("blink").Value;
    }
    else if(travelCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(2).Visible = false;
    }
    
    else if(travelStop)
    {
        pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = false;
    }
    else
    {
        if(pMe.Vars("RunCCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(1).Visible = false;
            pMe.GetChildByIndex(2).Visible = true;
        }
        else if(pMe.Vars("RunCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(1).Visible = true;
            pMe.GetChildByIndex(2).Visible = false;
        }
        else
        {
            pMe.GetChildByIndex(0).Visible = true;
            pMe.GetChildByIndex(1).Visible = false;
            pMe.GetChildByIndex(2).Visible = false;
        }
    }
    pMe.GetChildByIndex(3).Visible = false;
    pMe.GetChildByIndex(4).Visible = false;
}

]]>
              </Script>
            </Event>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:28_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = pEvent.GetVar("Auto").Value ? "A" : "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData_2D/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">280</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">135</Prop>
            <Prop Name="Y">460</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:38_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">32</Prop>
            <Prop Name="CropDy">32</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrl2D_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";par:dirSpd=" + pMe.GetPar("dirSpd") + ";");
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "Loc";


if(pEvent.GetVar("Loc").Value)
{
    mode = "Loc";
}
else if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
              <Prop Name="dirSpd" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;
pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}

if(pMe.Vars("dirSpd").Value == 1)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.X = 65;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
    pMe.X = 15;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="OnCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OffBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="dirSpd" Type="integer">0</Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;
pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}

//direction/speed
if(pMe.Vars("dirSpd").Value == 1)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.X = 15;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
    pMe.X = 65;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="OnCCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:28_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Background" Type="PmiRectangle">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">200</Prop>
            <Prop Name="IsSymmetry">0</Prop>
            <Prop Name="RadiusX">0</Prop>
            <Prop Name="RadiusY">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="ColorPattern">#000000</Prop>
            <Prop Name="Pattern">0</Prop>
            <Prop Name="WidthBorder">1</Prop>
            <Prop Name="ColorBorder">#808080</Prop>
          </GItem>
          <GItem Name="MenuBar" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Index" Type="integer">0</Prop>
              <Prop Name="Titles" Type="string">Status;BlokCW;BlokCCW;Nastavení</Prop>
              <Prop Name="Widths" Type="string">70;70;70;70</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action == 0)
{
  var nBlock = 0, nIndex = -1;
  var aWidth = Pm.StringSplit(pMe.Vars("Widths").Value, ";", "empty:1;");
  for(var i = 0; i < aWidth.GetSize(1); i++)
  {
    nBlock += Pm.ToNumber(aWidth.GetItem(i, -1));
    if(pEvent.X < nBlock) {pMe.Vars("Index").Value = i; nIndex = i; break;}
  }
  
  //var oFrame = pMe.Items("/Frame");
  switch(nIndex)
  {
  case 0:
    pMe.Parent.Vars("StatusVis").Value = true;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 1:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = true;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 2:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = true;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 3:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksCWVis").Value = false;
    pMe.Parent.Vars("IlcksCCWVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = true;
    break;
  default: break;
  }
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
var bgColor     = "#d0d0d0";
var bgColorAct  = "#f0f0f0";
var borderColor = "#000000";
var titleColor  = "#000000";
var fontSize    = 12;
var borderWidth = 1;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

var nIndex    = pEvent.GetVar("Index").Value;
var aWidths   = Pm.StringSplit(pEvent.GetVar("Widths").Value, ";", "empty:1;");
var aTitles   = Pm.StringSplit(pEvent.GetVar("Titles").Value, ";", "empty:1;");

var dy        = pEvent.CtxDy;
var dx        = pEvent.CtxDx;
var ctx       = pEvent.GetCtx(0);
var nTitles   = aTitles.GetSize(1);
var nBlock = 0, nWidth, nB = borderWidth / 2;

ctx.lineWidth     = borderWidth;
ctx.strokeStyle   = borderColor;
ctx.font          = fontSize + "px Arial";
ctx.textAlign     = "center";
ctx.textBaseline  = "middle";

for(var i = 0; i < nTitles; i++)
{
  nWidth = Pm.ToNumber(aWidths.GetItem(i, -1));

  ctx.beginPath();

  ctx.moveTo(nBlock + nB, dy - nB);
  ctx.lineTo(nBlock + nB, dy * 0.25);
  ctx.bezierCurveTo(nBlock + nB, dy * 0.25, nBlock + nB, nB, nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.9, nB);
  ctx.lineTo(nBlock + nWidth, dy * 0.25);
  ctx.lineTo(nBlock + nWidth, dy - nB);

  if(i == nIndex)
     ctx.fillStyle = bgColorAct;
  else
  {
     ctx.fillStyle = bgColor;
     ctx.closePath();
  }
  
  if(borderWidth > 0)
    ctx.stroke();
  ctx.fill();

  ctx.fillStyle = titleColor;
  ctx.fillText(aTitles.GetItem(i, -1), nBlock + nWidth / 2, dy / 2);
    
  nBlock += nWidth;
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_RFSCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zapnutí povoleno CW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_RFSCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFSCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zapnutí povoleno CCW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ME" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ME");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ME" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">49</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("ME - Ovládací napájení", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_Cmd1IntCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd1IntCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Cmd1IntCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 1 CW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_Cmd1IntCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd1IntCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Cmd1IntCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 1 CCW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_Cmd0Int" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Cmd0Int" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 0", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_FB1CW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/FB1CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FB1CW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 1 CW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_FB1CCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/FB1CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FB1CCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 1 CCW", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_FB0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/FB0");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FB0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 0", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_ib1cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB1BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="ind_iccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ICCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_ib2cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB2BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib3cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB3BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib4cw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB4BlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_iacw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IABlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_pdcw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_PDBlockCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="ind_ib1cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB1CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB1BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib2cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB2CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB2BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib3cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB3CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB3BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib4cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB4CW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB4BlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_iacw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IACW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IABlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_pdcw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/PDCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_PDBlockCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_ib1ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB1BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="ind_icccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ICCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IC", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib1cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB1", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib2cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB2", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib3cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB3", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib4cw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB4", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iacw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IA", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pdcw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="V">
                <Prop Name="OperArg1">0</Prop>
                <Prop Name="Arg1">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Oper">29</Prop>
                <Prop Name="OperArg2">0</Prop>
                <Prop Name="Arg2">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
                  </DBind>
                </Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("PD", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ICCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib1cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB1CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib2cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB2CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib3cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB3CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib4cwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB4CW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iacwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IACW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pdcwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/PDCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_icccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ICCCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_ib2ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB2BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib3ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB3BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_ib4ccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB4BlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_iaccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IABlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_pdccw" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_PDBlockCCW");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="ind_ib1ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB1CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB1BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib2ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB2CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB2BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib3ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB3CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB3BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_ib4ccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB4CCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IB4BlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_iaccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IACCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_IABlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_pdccw" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/PDCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_PDBlockCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib1ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB1CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib2ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB2CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib3ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB3CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ib4ccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IB4CCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_iaccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/IACCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pdccwt" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/PDCCW_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksCCWVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_OutOfSrv" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Mimo provoz", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_OutOfSrv" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="text_sim" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Simulace skupiny", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_sim" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_Sim");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="edit_FBTime" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">220</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/FBTime");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_FBTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Zpoždění alarmu:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_AnalogPosCtrl_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:34</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">350</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">350</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Prop Name="ToolTip">
            <DStatic></DStatic>
            <DBind Type="GP">
              <Prop Name="Value">.;Vars("Description")</Prop>
            </DBind>
          </Prop>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_E2Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E2";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="ActFB" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="CmdValue" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/CmdValue");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_DevDB" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_DevDB");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travel = Pm.Abs(pMe.Vars("CmdValue").Value - pMe.Vars("ActFB").Value) > pMe.Vars("HMI_DevDB").Value;
pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(travel)
{
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value ? true : false;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{    
    if(pMe.Vars("ActFB").Value > 0)
    {
        pMe.GetChildByIndex(0).Visible = true;
        pMe.GetChildByIndex(1).Visible = false;
    }
    else
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = true;
    }
}]]>
              </Script>
            </Event>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:24_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="E1" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/E1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="E2" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/E2");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "L";


if(pEvent.GetVar("Loc").Value)
{
    mode = "L";
}
else if(pEvent.GetVar("Man").Value)
{
    mode = "M";
}
else if(pEvent.GetVar("E2").Value)
{
    mode = "E2";
}
else if(pEvent.GetVar("E1").Value)
{
    mode = "E1";
}


ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E1Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_E1Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E1";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AnalogPosCtrlData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">146</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AnalogPosCtrlTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">280</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="PosError_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/PosError_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="FBFault_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/FBFault_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HWSigFault_FB_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HWSigFault_FB_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("PosError_ALAck").Value = false;
        pMe.Vars("FBFault_ALAck").Value = false;
        pMe.Vars("HWSigFault_FB_ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetParentVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ActFB" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ActFB" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="ActFB">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ActFB = Pm.Round(pEvent.GetVar("ActFB").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(ActFB + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;
var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.ActFB(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CmdValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/ActFB");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="CmdValue" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/CmdValue");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AnalogPosCtrlData/",$.par("tagName"),"/#vars/Man");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AnalogPosCtrlData/" + pMe.GetPar("tagName") + "/#vars/CmdValue;");
}
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="CmdValue">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var CmdValue = Pm.Round(pEvent.GetVar("CmdValue").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(CmdValue + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Control">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var ManualMode = pEvent.GetVar("Man").Value;

if(!ManualMode)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

ctx.fillStyle = "black";
ctx.fillRect(0, 0, dx, dy);

pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.CmdValue(ctx, dx, dy);
pEvent.Methods.SP(ctx, dx, dy);
pEvent.Methods.Control(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Aktuální pozice", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zadaná pozice", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">135</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:39_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AnalogPosCtrl_ExtFP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_PIDCtrlTrend_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:22:18</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Title">$.expr("pMe.Name")</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Prop Name="MultiView">1</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">800</Prop>
        <Prop Name="Dy">600</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par"></Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Panel" Type="PmiPanel">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">800</Prop>
          <Prop Name="Dy">600</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">2</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <GItem Name="AxTrendsHead" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">5</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">148</Prop>
            <Prop Name="ProgID">PMTABLE.PmTableCtrl.1</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{19BA6EE6-4BB4-11D1-8085-0020AFC8C4AF}</Prop>
            <Event Name="CellClicked" Type="Ax">
              <Prop Name="Params">nRow,nCol,bCtrl,bShift,bAlt</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead  = pMe.Acx;
var nCount = oTView.TrendsCount;
if(nCol == 1 && nRow > 0 && nRow <= nCount)
{
  var oTrend = oTView.Trends(nRow -1);
  oTrend.Visible = !oTrend.Visible;
  oHead.SetCellText(nRow, nCol, oTrend.Visible ? "" : "X");
  oTView.Draw();
  oHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="CellFocusChanged" Type="Ax">
              <Prop Name="Params">nRow,nCol,nRowOld,nColOld</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead = pMe.Acx;
for(var i = 1; i < oHead.Rows; i++)
  oHead.SetCellBackColor(i, -3, "transparent");

oTView.TrendActive = nRow - 1;
oHead.SetCellBackColor(nRow, -3, "#009898");
oHead.Draw();
oTView.Draw();]]>
              </Script>
            </Event>
            <Event Name="CellEditRequested" Type="Ax">
              <Prop Name="Params">nRow,nCol</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
if(nRow > 0)
  oTView.Trends(nRow - 1).DlgProperties("resizable=yes");]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="buttTwoAutoscroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">8</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendAutoScroll')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
              <Prop Name="state" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                </DBind>
              </Prop>
            </Props>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Vars("state").Value = true;]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  var oState = pMe.Vars("state");
  if(!pEvent.Action) //if key UP
    oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
{
  var oState = pMe.Vars("state");
  oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder     = 1;
var sImgColor   = "#000000";
var sBgColor    = "#acacac";
//---------------------------------
var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
var mode        = pEvent.GetVar("mode").Value;
var nPush       = pEvent.GetVar("push").Value;
var nState      = pEvent.GetVar("state").Value;
var bDisabled   = mode & 0x0030;
var bFocused    = mode & 0x0300;
var bMouseover  = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);
  
// Border
if(nBorder > 0)
{
  // UP border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, 0.7) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // DOWN border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.7);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// FILL
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(!nPush && !nState)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}

ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush || nState)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
  
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;
if(nState)
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.8);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.closePath();
  ctx.fill();

  ctx.beginPath();
  ctx.moveTo(dx * 0.55, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.8);
  ctx.lineTo(dx * 0.55, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}
else
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.8, dy * 0.5);
  ctx.lineTo(dx * 0.4, dy * 0.2);
  ctx.lineTo(dx * 0.4, dy * 0.8);
  ctx.closePath();
  ctx.fill();
  
  ctx.beginPath();
  ctx.moveTo(dx * 0.2, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.lineTo(dx * 0.2, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttScroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">48</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','scroll'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="typeList" Type="string"></Prop>
              <Prop Name="typeSel" Type="integer">12</Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pMe.Vars("typeSel").Value);]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[var oPush = pMe.Vars("push");

if(!pEvent.Action)
{
  if(pEvent.Code == 38)
    pMe.Methods.ChangeType("up");
  if(pEvent.Code == 40)
    pMe.Methods.ChangeType("down");
  if(pEvent.Code == 37)
    pMe.Methods.ChangeTime("left");
  if(pEvent.Code == 39)
    pMe.Methods.ChangeTime("right");
  if(pEvent.Code == 32)
    pMe.ShowMenu();
  oPush.Value = 0;
}
else
{
  if(pEvent.Code == 38 || pEvent.Code == 40)
    oPush.Value = 1;
  if(pEvent.Code == 37)
    oPush.Value = 2;
  if(pEvent.Code == 39)
    oPush.Value = 3;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(!pEvent.Action && pEvent.FocusIn)
  return;

if(pMe.Vars("mode").Value & 0x0300 && !pEvent.FocusIn)
{
  var oPush = pMe.Vars("push");
  var dy = pMe.Dy;
  var dx = pMe.Dx;

  if(!pEvent.Action)
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      pMe.ShowMenu();
    else
    {
      if(pEvent.X < dy)
        pMe.Methods.ChangeTime("left");
      else if(pEvent.X > (dx - dy))
        pMe.Methods.ChangeTime("right");
    }
    oPush.Value = 0;
  }
  else
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      oPush.Value = 1;
    else if(pEvent.X < dy)
      oPush.Value = 2;
    else if(pEvent.X > (dx - dy))
      oPush.Value = 3;
  }
  pMe.Refresh();
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pEvent.Name);]]></Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[var aType = pMe.Methods.GetTypeList();
var nLength = aType.GetSize(1);

for(var i = 0; i < nLength; i++)
  pEvent.Menu.AddMenu(i, aType.GetItem(i, 0));]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangeTime">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var nIndex = pMe.Vars("typeSel").Value;
var aType = pMe.Methods.GetTypeList();
var par1  = aType.GetItem(nIndex, 1);
var par2  = aType.GetItem(nIndex, 2);
var sMeth = aType.GetItem(nIndex, 3);
var t, tOld, tNew;

if(action == "left") // "left"  or keycode 37
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMin;
    tOld = Pm.CreatePmDateObject(t).GetValue() - 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1, tOld, par2);
    oTView.ScrollTime(40, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1, par2);
}
else               // "right"  or keycode 39
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMax, tNew;
    tOld = Pm.CreatePmDateObject(t).GetValue() + 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1 + 40, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1 + 40, tOld, par2);
    oTView.ScrollTime(41, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1 + 1, par2);
}
]]>
                </Script>
              </Method>
              <Method Name="ChangeType">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var nIndex = pMe.Vars("typeSel").Value;
var nLength = aType.GetSize(1);

switch(action)
{
case "up":
  if(nIndex > 0)
    nIndex--;
  break;
case "down":
  if(nIndex < nLength-1)
    nIndex++;
  break;
default:
  nIndex = action;
  break;
}

pMe.Vars("typeSel").Value  = nIndex;
pMe.Vars("typeList").Value = aType.GetItem(nIndex, 0);]]>
                </Script>
              </Method>
              <Method Name="GetTypeList">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sMin=Macro("$text:sys.minute");
//#pragma variable sHour=Macro("$text:sys.hour");
//#pragma variable sDay=Macro("$text:sys.day");
//#pragma variable sWeek=Macro("$text:sys.week");
//#pragma variable sMonth=Macro("$text:sys.month");
//#pragma variable sPage=Macro("$text:sys.Page");
//#pragma variable sEnd=Macro("$text:sys.toEnd");

var aType = Pm.CreatePmArray().Create(14, 5);

// Text types
aType.SetItem("1 "  + sMin,   0, 0); // "1 min"
aType.SetItem("2 "  + sMin,   1, 0); // "2 min"
aType.SetItem("5 "  + sMin,   2, 0); // "5 min"
aType.SetItem("10 " + sMin,   3, 0); //"10 min"
aType.SetItem("15 " + sMin,   4, 0); //"15 min"
aType.SetItem("30 " + sMin,   5, 0); //"30 min"
aType.SetItem("1"   + sHour,  6, 0); // "1 hour"
aType.SetItem("6-14-22",      7, 0); // "shift" (6, 14, 22 hour)
aType.SetItem("1 "  + sDay,   8, 0); // "1 day"
aType.SetItem("1 "  + sWeek,  9, 0); // "1 week"
aType.SetItem("1 "  + sMonth,10, 0); // "1 month"
aType.SetItem("1/5 "+ sPage, 11, 0); // "1/5 page" 
aType.SetItem("1 "  + sPage, 12, 0); // "1 page"
aType.SetItem(sEnd,          13, 0); // "To end"

// first param methods
aType.SetItem(47,  0, 1);
aType.SetItem(47,  1, 1);
aType.SetItem(47,  2, 1);
aType.SetItem(47,  3, 1);
aType.SetItem(47,  4, 1);
aType.SetItem(47,  5, 1);
aType.SetItem(46,  6, 1);
aType.SetItem(46,  7, 1);
aType.SetItem(45,  8, 1);
aType.SetItem(44,  9, 1);
aType.SetItem(43, 10, 1);
aType.SetItem(30, 11, 1);
aType.SetItem(30, 12, 1);
aType.SetItem(90, 13, 1);

// second param method
aType.SetItem(1,     0, 2);
aType.SetItem(2,     1, 2);
aType.SetItem(5,     2, 2);
aType.SetItem(10,    3, 2);
aType.SetItem(15,    4, 2);
aType.SetItem(30,    5, 2);
aType.SetItem(1,     6, 2);
aType.SetItem(8,     7, 2);
aType.SetItem(null,  8, 2);
aType.SetItem(null,  9, 2);
aType.SetItem(null, 10, 2);
aType.SetItem(1/5,  11, 2);
aType.SetItem(1,    12, 2);
aType.SetItem(0,    13, 2);

// select methods
aType.SetItem("GetDateOf",   0, 3);
aType.SetItem("GetDateOf",   1, 3);
aType.SetItem("GetDateOf",   2, 3);
aType.SetItem("GetDateOf",   3, 3);
aType.SetItem("GetDateOf",   4, 3);
aType.SetItem("GetDateOf",   5, 3);
aType.SetItem("GetDateOf",   6, 3);
aType.SetItem("GetDateOf",   7, 3);
aType.SetItem("GetDateOf",   8, 3);
aType.SetItem("GetDateOf",   9, 3);
aType.SetItem("GetDateOf",  10, 3);
aType.SetItem("ScrollTime", 11, 3);
aType.SetItem("ScrollTime", 12, 3);
aType.SetItem("ScrollTime", 13, 3);

return aType]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var sShiftNot     = "- - -";

var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sShift        = pEvent.GetVar("typeList").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder > 0)
{
  // up border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(dy, nBorder, dy, dy-nBorder);
grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

//nPush = 3;
if(nPush > 0)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
  ctx.fillStyle = grd;
  ctx.beginPath();

  switch(nPush)
  {
  case 1:
    ctx.moveTo(dy, dy - nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - dy, dy - nBorder);
    break;

  case 2:
    ctx.moveTo(nBorder, dy - nBorder);
    ctx.lineTo(nBorder, nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dy, dy - nBorder);
    break;

  case 3:
    ctx.moveTo(dx - dy, dy - nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - nBorder, nBorder);
    ctx.lineTo(dx - nBorder, dy - nBorder);
    break;
  }
  ctx.closePath();    
  ctx.fill();
}

ctx.fillStyle    = "#000000";
ctx.beginPath();
ctx.moveTo(dy * 0.2, dy * 0.5);
ctx.lineTo(dy * 0.8, dy * 0.2);
ctx.lineTo(dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dy, nBorder);
  ctx.lineTo(dy, dy - nBorder);
  ctx.stroke();
}

ctx.beginPath();
ctx.moveTo(dx - dy * 0.2, dy * 0.5);
ctx.lineTo(dx - dy * 0.8, dy * 0.2);
ctx.lineTo(dx - dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dx - dy, nBorder);
  ctx.lineTo(dx - dy, dy - nBorder);
  ctx.stroke();
}

// text
ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = nFontSize + "px Arial";

//if(nPush)
//  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillText(bFocused ? sShift : sShiftNot, dx * 0.5, dy * 0.5);

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttNewestAll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','toEnd'),' - ',$.text('sys','right'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Items("../AxTrendsView").Acx.ScrollTime(91, 0);]]></Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.2, dy * 0.2);
ctx.lineTo(dx * 0.2, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.9, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.8);
ctx.lineTo(dx * 0.9, dy * 0.8);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">248</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 1')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M1";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">288</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 2')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M2";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomIn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">380</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' +'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(10, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.47, dy * 0.3);
ctx.lineTo(dx * 0.47, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.3);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">412</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','zoom'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="title" Type="string">
                <DStatic Type="string">00:01:00</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Vars("infozoom")</Prop>
                </DBind>
              </Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1=="graph"</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
  pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

var oTView = pMe.Items("../AxTrendsView").Acx

switch(pEvent.Name)
{
  case "1min":
    oTView.ZoomTime(21, 4, 1/24/60, 0);
    pMe.SetProp("Text", "1 " + sText0);
    break;
  case "15min":
    oTView.ZoomTime(21, 4, 1/24/4, 0);
    pMe.SetProp("Text", "1/4 " + sText1);
    break;
  case "30min":
    oTView.ZoomTime(21, 4, 1/24/2, 0);
    pMe.SetProp("Text", "1/2 " + sText1);
    break;
  case "1hour":
    oTView.ZoomTime(21, 4, 1/24, 0);
    pMe.SetProp("Text", "1 " + sText1);
    break;
  case "8hours":
    oTView.ZoomTime(21, 4, 1/3, 0);
    pMe.SetProp("Text", "8 " + sText1);
    break;
  case "1day":
    oTView.ZoomTime(21, 4, 1, 0);
    pMe.SetProp("Text", "1 " + sText2);
    break;
  case "1week":
    oTView.ZoomTime(21, 4, 7, 0);
    pMe.SetProp("Text", "1 " + sText3);
    break;
  case "1month":
    oTView.ZoomTime(21, 4, 30, 0);
    pMe.SetProp("Text", "1 " + sText4);
    break;
}

oTView.Draw()]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

pEvent.Menu.AddMenu("1min",   "1 " + sText0);
pEvent.Menu.AddMenu("15min",  "1/4 " + sText1);
pEvent.Menu.AddMenu("30min",  "1/2 " + sText1);
pEvent.Menu.AddMenu("1hour",  "1 " + sText1);
pEvent.Menu.AddMenu("8hours", "8 " + sText1);
pEvent.Menu.AddMenu("1day",   "1 " + sText2);
pEvent.Menu.AddMenu("1week",  "1 " + sText3);
pEvent.Menu.AddMenu("1month", "1 " + sText4);]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sTitle        = pEvent.GetVar("title").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy - nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// text
if(sTitle)
{
  ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
  ctx.textBaseline = "middle";
  ctx.textAlign    = "center";
  ctx.font         = nFontSize + "px Arial";

  if(nPush)
    ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
  ctx.fillText(sTitle , dx * 0.5, dy * 0.5);
}

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomOut" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">532</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' -'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(11, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttSetting" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">577</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendSetting')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[//if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
//  pMe.Vars("push").Value = pEvent.Action;
//pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();

var oTrendsView = pMe.Items("../AxTrendsView");
var oTView = oTrendsView.Acx;

oTView.DlgTrends("resizable=yes");]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//var oTrendsView = pMe.Items("../AxTrendsView");
//var oTView = oTrendsView.Acx;

//switch(pEvent.Name)
//{
//case "grmode":
//	oTView.ViewMode = oTView.ViewMode == "table" ? "graph" : "table";
//	break;
//case "inicfg":
//  oTView.LoadCfg("string:" + oTrendsView.Vars("cfgini").Value, 11);
//  oTView.ScrollTime(91, 0);
//  oTView.ReadData();
//  oTView.Draw();
//  break;
//case "loadcfg":
//	oTView.LoadCfg("input:#cfg:", 27);
//	oTView.ReadData();
//	oTView.Draw();
//	break;
//case "savecfg":
//    oTView.SaveCfg("input:#cfg:", 1, "Trends;");
//    break;
//case "setting":
//	oTView.DlgTrends("resizable=yes");
//	break;
//case "print":
//	var sHtml = oTView.SaveToHtm("ver:1", "return:", "mode:" + oTView.ViewMode + ";");
//	if(sHtml != "") // print A4 width:700px;height:930px; (210x297), landscape width:930px;height:700px;
//		Pm.PrintHtmlPage(sHtml, "sourcetype:htmlstring;printer:preview;width:700px;height:930px;");
//	break;
//}

]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[////#pragma variable sText0=Macro("$.text('sys','trendViewTable')");
////#pragma variable sText1=Macro("$.text('sys','trendViewGraph')");
////#pragma variable sText2=Macro("$.text('sys','trendLoadCfg')");
////#pragma variable sText3=Macro("$.text('sys','trendSaveCfg')");
////#pragma variable sText4=Macro("$.text('sys','trendSetting')");
////#pragma variable sText5=Macro("$.text('sys','trendPrintGraph')");
////#pragma variable sRestore=Macro("$.text('sys','restoredef')");

//if(pMe.Items("../AxTrendsView").Acx.ViewMode == "graph")
//  pEvent.Menu.AddMenu("grmode", sText0);
//else
//  pEvent.Menu.AddMenu("grmode", sText1);
//pEvent.Menu.AddMenu("inicfg", sRestore);
//pEvent.Menu.AddMenu("loadcfg", sText2);
//pEvent.Menu.AddMenu("savecfg", sText3);
//pEvent.Menu.AddMenu("setting", sText4);
//pEvent.Menu.AddMenu("print",   sText5);
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.4);
ctx.lineTo(dx * 0.7, dy * 0.8);
ctx.bezierCurveTo(dx * 0.7, dy * 0.8, dx * 0.8 , dy * 0.8 , dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.arc(dx * 0.3, dy * 0.3, dx * 0.18, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.arc(dx * 0.25, dy * 0.25, dx * 0.1, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">608</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','enterbegintime')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.CreateForm();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.CreateForm();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangedForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[var oForm = oSystem.ViewObject;
var nMonth = oForm.GetItem("month").Value;
var oIt = oForm.GetItem("day");

switch(nMonth)
{
case 1: case 3: case 5: case 7: case 8: case 10: case 12:
  oIt.Max = 31;
  break;
case 2:
  oIt.Max = 29;
  break;
case 4: case 6: case 9: case 11:
  oIt.Max = 30;
  break;
}]]>
                </Script>
              </Method>
              <Method Name="CloseForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[if(oSystem.CloseReason == "ok")
{
  var oForm = oSystem.ViewObject;
  var dDate = Pm.CreateDate(oForm.GetItem("year").Value, oForm.GetItem("month").Value, oForm.GetItem("day").Value, oForm.GetItem("hour").Value, oForm.GetItem("minute").Value, oForm.GetItem("second").Value, 0);
  pMe.Items("../AxTrendsView").Acx.ScrollTime(40, dDate);
}]]>
                </Script>
              </Method>
              <Method Name="CreateForm">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sDate=Macro("$.text('sys','date')");
//#pragma variable sTime=Macro("$.text('sys','time')");
//#pragma variable sSec=Macro("$.text('sys','second')");
//#pragma variable sMin=Macro("$.text('sys','minute')");
//#pragma variable sHour=Macro("$.text('sys','hour')");
//#pragma variable sDay=Macro("$.text('sys','day')");
//#pragma variable sMonth=Macro("$.text('sys','month')");
//#pragma variable sYear=Macro("$.text('sys','year')");

var dNow = Pm.CreatePmDateObject();

var oIt, oForm = Pm.CreatePmForm();
oForm.Title = sDate+"/"+sTime;

//create form items
var nYear = dNow.GetYear();
oIt = oForm.CreateItem("int", "year", sYear);
oIt.Value = nYear;
oIt.Min = nYear - 10;
oIt.Max = nYear + 1;

oIt = oForm.CreateItem("int", "month", sMonth, "Min:1;Max:12;");
oIt.Value = dNow.GetMonth();

oIt = oForm.CreateItem("int", "day", sDay, "Min:1;Max:31;");
oIt.Value = dNow.GetDay();

oIt = oForm.CreateItem("int", "hour", sHour, "Min:0;Max:23;");
oIt.Value = dNow.GetHour();

oIt = oForm.CreateItem("int", "minute", sMin, "Min:0;Max:59;");
oIt.Value = dNow.GetMinute();

oIt = oForm.CreateItem("int", "second", sSec, "Min:0;Max:59;");
oIt.Value = dNow.GetSecond();

//open form
var oExtra = Pm.CreatePmMap();
oExtra.ViewObject = oForm;
oExtra.onChange   = Pm.CreatePmAction(1, pMe, "ChangedForm");
oExtra.onClose    = Pm.CreatePmAction(1, pMe, "CloseForm");
pMe.PmPanel.OpenView("/#glob/form", "target:_blank;modal:1;", "", oExtra);]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.4);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.8);
ctx.lineTo(dx * 0.5, dy * 0.7);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.2, dy * 0.5);
ctx.lineTo(dx * 0.3, dy * 0.5);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.5);
ctx.closePath();
ctx.stroke();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TextLoading" Type="PmiText">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">648</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">2</Prop>
            <Props Name="Text">
              <Prop Name="Value">
                <DStatic>$.text('sys','trendDataLoading')</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.GetStateText()</Prop>
                </DBind>
              </Prop>
              <Prop Name="FontText">PmSmall</Prop>
              <Prop Name="ColorText">#a80000</Prop>
              <Prop Name="AlignHor">1</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ValueDataType">0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="EditAttr">0</Prop>
            <Prop Name="ShadowType">0</Prop>
            <Prop Name="ShadowColor">#808080</Prop>
          </GItem>
          <GItem Name="AxTrendsView" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">155</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">401</Prop>
            <Props Name="LocalProps">
              <Prop Name="infozoom" Type="string">0:01:00</Prop>
              <Prop Name="cfgini" Type="string"></Prop>
              <Prop Name="Min" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Min");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Max" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Max");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorSP" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorSP;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorPV" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorPV;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorActFB" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorActFB;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendLineWidth" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/CustomData/#vars/trendLineWidth;Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="ProgID">PmTrdvw.TrendsViewCtl</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{02000002-9DFA-4B37-ABE9-1929F4BCDEA2}</Prop>
            <Event Name="onTimeChange" Type="Ax">
              <Prop Name="Params">rangeType,bZoomChanged,timeMinNew,timeMinType,timeMaxNew,timeMaxType</Prop>
              <Script>
                <![CDATA[if(bZoomChanged)
{
  var tRes = Pm.CreatePmDateObject(timeMaxNew).GetValue() - Pm.CreatePmDateObject(timeMinNew).GetValue();
  var nDay = tRes >= 1 ? Pm.Round(tRes, 1) : 0;
  var sDay = nDay > 0 ? nDay + " " : "";
  pMe.Vars("infozoom").Value = sDay + Pm.CreatePmDateObject(tRes - nDay).Format("%H:%M:%S");
}]]>
              </Script>
            </Event>
            <Event Name="onDataTrendReady" Type="Ax">
              <Prop Name="Params">sTrendID</Prop>
              <Script>
                <![CDATA[if(pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).Points.GetValueByIndex(-2, 0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onCursorTimeChange" Type="Ax">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[if(!pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).CursorValue(0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onTrendParamsChange" Type="Ax">
              <Prop Name="Params">bInit</Prop>
              <Script>
                <![CDATA[//#pragma variable sName=Macro("$.text('sys','name')");
//#pragma variable sUnit=Macro("$.text('sys','unit')");
//#pragma variable sValue=Macro("$.text('sys','value')");

var oTHead = pMe.Items("../AxTrendsHead").Acx;
var oTView = pMe.Acx;
if(bInit)
{
  oTHead.SetCellText(0, 2, sName);
  oTHead.SetCellText(0, 3, sUnit);
  oTHead.SetCellText(0, 6, sValue);
  pMe.Vars("cfgini").Value = oTView.GetCfg("Trends;TimeZoom;", "");
  
  var oTrend = oTView.AddTrend("t0", pMe.GetPar("tagName") + ".ValueOut"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".ValueOut", "");
    oTrend.ValueMax = 100;
    oTrend.ValueMin = 0;
    oTrend.Unit = "%";
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorActFB").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
      
  var oTrend = oTView.AddTrend("t1", pMe.GetPar("tagName") + ".ActPV"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".ActPV", "");
    oTrend.ValueMax = pMe.Vars("Max").Value;
    oTrend.ValueMin = pMe.Vars("Min").Value;
    oTrend.Unit = pMe.Vars("Unit").Value;
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorPV").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
  
  var oTrend = oTView.AddTrend("t2", pMe.GetPar("tagName") + ".ActSP"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".ActSP", "");
    oTrend.ValueMax = pMe.Vars("Max").Value;
    oTrend.ValueMin = pMe.Vars("Min").Value;
    oTrend.Unit = pMe.Vars("Unit").Value;
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorSP").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
}

var nCount = oTView.TrendsCount;
oTHead.Rows = nCount + 1;
for(var i = 1; i <= nCount; i++)
{
  var oTrend = oTView.Trends(i -1);
  oTHead.SetCellText(i, 1, oTrend.Visible ? "" : "X");
  oTHead.SetCellText(i, 2, oTrend.Name);
  oTHead.SetCellTextAlign(i, 2, 0);
  oTHead.SetCellText(i, 3, oTrend.Unit);
  oTHead.SetCellText(i, 4, Pm.Round(oTrend.ValueMin, 0.001));
  oTHead.SetCellText(i, 5, Pm.Round(oTrend.ValueMax, 0.001));
  if(!oTView.Autoscroll)
	oTHead.SetCellText(i, 6, Pm.Round(oTrend.CursorValue(0), 0.001));
  oTHead.SetCellBackColor(i, 0, oTrend.GraphDefault.Color);
}
//if(oTHead.FocusedRow >= oTHead.Rows)
//  oTHead.FocusedRow = oTHead.Rows -1;

oTHead.SetCellBackColor(oTHead.FocusedRow, -3, "transparent");
oTHead.FocusedRow = oTView.TrendActive + 1;
oTHead.SetCellBackColor(oTView.TrendActive + 1, -3, "#009898");

// text align cols
oTHead.SetCellTextAlign(-3, 1, 1); //Visible - align center
oTHead.SetCellTextAlign(-3, 2, 0); //Name - align left
oTHead.SetCellTextAlign(-3, 3, 1); //Unit - align center
oTHead.SetCellTextAlign(-3, 4, 1); //Min - align center
oTHead.SetCellTextAlign(-3, 5, 1); //Max - align center
oTHead.SetCellTextAlign(-3, 6, 2); //Value - align right
oTHead.Draw();
if(bInit && !oTView.Autoscroll) oTView.ReadData();
]]>
              </Script>
            </Event>
          </GItem>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrl_ExtFP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:22:06</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">460</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">460</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Props Name="LocalProps">
            <Prop Name="StatusVis" Type="bool">1</Prop>
            <Prop Name="IlcksVis" Type="bool">0</Prop>
            <Prop Name="SetupVis" Type="bool">0</Prop>
          </Props>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">365</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_LOC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Loc";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">365</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="Cmd0Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cmd1Int");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travel = !pMe.Vars("Run").Value && pMe.Vars("Cmd1Int").Value || pMe.Vars("Run").Value && pMe.Vars("Cmd0Int").Value;
pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(travel)
{
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
}
else
{
    if(pMe.Vars("Run").Value)
    {
        pMe.GetChildByIndex(0).Visible = true;
        pMe.GetChildByIndex(1).Visible = false;
    }
    else
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = true;
    }
}
]]>
              </Script>
            </Event>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:24_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = pEvent.GetVar("Auto").Value ? "A" : "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">315</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">280</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="FPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">135</Prop>
            <Prop Name="Y">420</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:38_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">32</Prop>
            <Prop Name="CropDy">32</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrl_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "Loc";


if(pEvent.GetVar("Loc").Value)
{
    mode = "Loc";
}
else if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">315</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/RFS");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:13_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/RFS");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">315</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OffBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">365</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Background" Type="PmiRectangle">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">160</Prop>
            <Prop Name="IsSymmetry">0</Prop>
            <Prop Name="RadiusX">0</Prop>
            <Prop Name="RadiusY">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="ColorPattern">#000000</Prop>
            <Prop Name="Pattern">0</Prop>
            <Prop Name="WidthBorder">1</Prop>
            <Prop Name="ColorBorder">#808080</Prop>
          </GItem>
          <GItem Name="MenuBar" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Index" Type="integer">0</Prop>
              <Prop Name="Titles" Type="string">Status;Blokace;Nastavení</Prop>
              <Prop Name="Widths" Type="string">80;80;80</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action == 0)
{
  var nBlock = 0, nIndex = -1;
  var aWidth = Pm.StringSplit(pMe.Vars("Widths").Value, ";", "empty:1;");
  for(var i = 0; i < aWidth.GetSize(1); i++)
  {
    nBlock += Pm.ToNumber(aWidth.GetItem(i, -1));
    if(pEvent.X < nBlock) {pMe.Vars("Index").Value = i; nIndex = i; break;}
  }
  
  //var oFrame = pMe.Items("/Frame");
  switch(nIndex)
  {
  case 0:
    pMe.Parent.Vars("StatusVis").Value = true;
    pMe.Parent.Vars("IlcksVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 1:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksVis").Value = true;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 2:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("IlcksVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = true;
    break;
  default: break;
  }
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
var bgColor     = "#d0d0d0";
var bgColorAct  = "#f0f0f0";
var borderColor = "#000000";
var titleColor  = "#000000";
var fontSize    = 12;
var borderWidth = 1;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

var nIndex    = pEvent.GetVar("Index").Value;
var aWidths   = Pm.StringSplit(pEvent.GetVar("Widths").Value, ";", "empty:1;");
var aTitles   = Pm.StringSplit(pEvent.GetVar("Titles").Value, ";", "empty:1;");

var dy        = pEvent.CtxDy;
var dx        = pEvent.CtxDx;
var ctx       = pEvent.GetCtx(0);
var nTitles   = aTitles.GetSize(1);
var nBlock = 0, nWidth, nB = borderWidth / 2;

ctx.lineWidth     = borderWidth;
ctx.strokeStyle   = borderColor;
ctx.font          = fontSize + "px Arial";
ctx.textAlign     = "center";
ctx.textBaseline  = "middle";

for(var i = 0; i < nTitles; i++)
{
  nWidth = Pm.ToNumber(aWidths.GetItem(i, -1));

  ctx.beginPath();

  ctx.moveTo(nBlock + nB, dy - nB);
  ctx.lineTo(nBlock + nB, dy * 0.25);
  ctx.bezierCurveTo(nBlock + nB, dy * 0.25, nBlock + nB, nB, nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.9, nB);
  ctx.lineTo(nBlock + nWidth, dy * 0.25);
  ctx.lineTo(nBlock + nWidth, dy - nB);

  if(i == nIndex)
     ctx.fillStyle = bgColorAct;
  else
  {
     ctx.fillStyle = bgColor;
     ctx.closePath();
  }
  
  if(borderWidth > 0)
    ctx.stroke();
  ctx.fill();

  ctx.fillStyle = titleColor;
  ctx.fillText(aTitles.GetItem(i, -1), nBlock + nWidth / 2, dy / 2);
    
  nBlock += nWidth;
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_FBTime" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">220</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/FBTime");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_OutOfSrv" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Mimo provoz", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_OutOfSrv" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="text_GroupSim" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Simulace skupiny", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_GroupSim" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Sim");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="edit_GrpStopStep" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">220</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">0</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">50.5</Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_GrpStartStep" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">220</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">0</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">50.5</Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_GrpStartStep" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Startovací krok v sekvenci:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_GrpStopStep" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Stopovací krok v sekvenci:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FBTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Zpoždění alarmu:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_IB2" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB2Block");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_IB1" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB1Block");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_IB3" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB3Block");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_IA" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IABlock");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_IB4" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB4Block");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="CheckBox_PD" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_PDBlock");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="text_IB1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB1", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_IC" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IC", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_IB2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB2", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_IB4" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB4", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_IB3" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IB3", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_IA" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("IA", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_PD" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">80</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("PD", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="textVal_IC" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IC_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_IB1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB1Block");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="textVal_IB1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB1_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="textVal_IB2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB2_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="textVal_IB3" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB3_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="textVal_IB4" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB4_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="textVal_IA" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IA_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="texVal_PD" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">180</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Text")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Text" Type="string">
                <DStatic Type="string">text</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/PD_text");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var Text = pEvent.GetVar("Text").Value;
var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("- " + Text, 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_IC" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_IB2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB2");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB2Block");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_IB3" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB3");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB3Block");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_IB4" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IB4");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IB4Block");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_IA" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/IA");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_IABlock");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_PD" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/PD");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_PDBlock");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("IlcksVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_FB0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/FB0");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_FB1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/FB1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_Cmd0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_Cmd1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cmd1Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="indME" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/ME");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_RFS" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/RFS");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FB0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 0", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_FB1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Stav 1", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Cmd1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 1", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Cmd0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Povel 0", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_ME" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("ME - Ovládací napájení", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFS" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zapnutí povoleno", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[
]]>
              </Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrlVSD_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:58</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">410</Prop>
        <Prop Name="Dy">400</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">410</Prop>
          <Prop Name="Dy">400</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Prop Name="FocusType">0</Prop>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">390</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">390</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">215</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_LOC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Loc";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Cmd0Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd1IntCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cmd1IntCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="RunCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travelCW = pMe.Vars("Cmd1IntCW").Value && !pMe.Vars("RunCW").Value;
var travelCCW = pMe.Vars("Cmd1IntCCW").Value && !pMe.Vars("RunCCW").Value;
var travelStop = pMe.Vars("Cmd0Int").Value && (pMe.Vars("RunCW").Value || pMe.Vars("RunCCW").Value);

pMe.Vars("blink").Value = !pMe.Vars("blink").Value;


if(travelCW)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = pMe.Vars("blink").Value;
    pMe.GetChildByIndex(2).Visible = false;
}
else if(travelCCW)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = pMe.Vars("blink").Value;
}
else if(travelStop)
{
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}
else
{
    if(pMe.Vars("RunCW").Value)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = true;
        pMe.GetChildByIndex(2).Visible = false;
    }
    else if(pMe.Vars("RunCCW").Value)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = true;
    }
    else
    {
        pMe.GetChildByIndex(0).Visible = true;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = false;
    }
}
]]>
              </Script>
            </Event>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCW" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCW" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "";

if(pEvent.GetVar("Cen").Value)
{
    mode = pEvent.GetVar("Auto").Value ? "A" : "M";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">215</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">346</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">296</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData_VSD/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">380</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;
]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">370</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">185</Prop>
            <Prop Name="Y">360</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:39_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrlVSD_ExtFP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "Loc";


if(pEvent.GetVar("Loc").Value)
{
    mode = "Loc";
}
else if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OffBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Interlock" Type="bool">1</Prop>
              <Prop Name="Run" Type="bool">0</Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("Interlock").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrlVSDTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ActFB" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">70</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_PV" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_PV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="ActFB">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ActFB = Pm.Round(pEvent.GetVar("HMI_PV").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(ActFB + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.ActFB(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CmdValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">70</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_SV" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_SV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="InSV" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/InSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/InSV");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData_VSD/" + pMe.GetPar("tagName") + "/#vars/HMI_SV;");
}
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="CmdValue">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var HMI_SV = Pm.Round(pEvent.GetVar("HMI_SV").Value, 0.01);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(HMI_SV + "%", dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="Control">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var InSV = pEvent.GetVar("InSV").Value;

if(!InSV)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.CmdValue(ctx, dx, dy);
pEvent.Methods.SP(ctx, dx, dy);
pEvent.Methods.Control(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">210</Prop>
            <Prop Name="Y">190</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Aktuální rychlost", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">210</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zadaná rychlost", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="SVInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="InSV" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/InSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ExtSV" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/ExtSV");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[
if(pMe.Vars("InSV").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else if(pMe.Vars("ExtSV").Value)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = false;
}
]]>
              </Script>
            </Event>
            <GItem Name="InSV" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:15_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">64</Prop>
              <Prop Name="CropDy">64</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="ExtSV" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:43_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">64</Prop>
              <Prop Name="CropDy">64</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_ExtSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:43_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">100</Prop>
              <Prop Name="CropDy">100</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="InBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_VSD/",$.par("tagName"),"/#vars/HMI_InSV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:15_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">64</Prop>
              <Prop Name="CropDy">64</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrl2D_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:49</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">350</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
          <Prop Name="dirSpd" Type="par">1</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Canvas" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">350</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="dirSpd" Type="par">$.par("dirSpd")</Prop>
          </Props>
          <Event Name="onStart" Type="Pm">
            <Script><![CDATA[pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");]]></Script>
          </Event>
          <Event Name="onRefresh" Type="Pm">
            <Script>
              <![CDATA[
]]>
            </Script>
          </Event>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_LOC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Loc";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="dirSpd" Type="integer">0</Prop>
              <Prop Name="Cmd0Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd1IntCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1IntCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cmd1IntCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RunCCW" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;
pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");

var travelCW = pMe.Vars("Cmd1IntCW").Value && !pMe.Vars("RunCW").Value;
var travelCCW = pMe.Vars("Cmd1IntCCW").Value && !pMe.Vars("RunCCW").Value;
var travelStop = pMe.Vars("Cmd0Int").Value && (pMe.Vars("RunCW").Value || pMe.Vars("RunCCW").Value);

if(pMe.Vars("dirSpd").Value == 1)
{
    if(travelCCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(3).Visible = false;
        pMe.GetChildByIndex(4).Visible = pMe.Vars("blink").Value;
    }
    else if(travelCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(3).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(4).Visible = false;
    }
    else if(travelStop)
    {
        pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(3).Visible = false;
        pMe.GetChildByIndex(4).Visible = false;
    }
    else
    {
        if(pMe.Vars("RunCCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(3).Visible = false;
            pMe.GetChildByIndex(4).Visible = true;
        }
        else if(pMe.Vars("RunCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(3).Visible = true;
            pMe.GetChildByIndex(4).Visible = false;
        }
        else
        {
            pMe.GetChildByIndex(0).Visible = true;
            pMe.GetChildByIndex(3).Visible = false;
            pMe.GetChildByIndex(4).Visible = false;
        }
    }
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}

if(pMe.Vars("dirSpd").Value == 2)
{
    if(travelCCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = pMe.Vars("blink").Value;
    }
    else if(travelCW)
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(2).Visible = false;
    }
    
    else if(travelStop)
    {
        pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
        pMe.GetChildByIndex(1).Visible = false;
        pMe.GetChildByIndex(2).Visible = false;
    }
    else
    {
        if(pMe.Vars("RunCCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(1).Visible = false;
            pMe.GetChildByIndex(2).Visible = true;
        }
        else if(pMe.Vars("RunCW").Value)
        {
            pMe.GetChildByIndex(0).Visible = false;
            pMe.GetChildByIndex(1).Visible = true;
            pMe.GetChildByIndex(2).Visible = false;
        }
        else
        {
            pMe.GetChildByIndex(0).Visible = true;
            pMe.GetChildByIndex(1).Visible = false;
            pMe.GetChildByIndex(2).Visible = false;
        }
    }
    pMe.GetChildByIndex(3).Visible = false;
    pMe.GetChildByIndex(4).Visible = false;
}

]]>
              </Script>
            </Event>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:28_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:33_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = pEvent.GetVar("Auto").Value ? "A" : "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData_2D/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">280</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_OutOfSrv" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Mimo provoz", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">135</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:39_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrl2D_ExtFP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";par:dirSpd=" + pMe.GetPar("dirSpd") + ";");
    pMe.PmPanel.Close();
}



]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "Loc";


if(pEvent.GetVar("Loc").Value)
{
    mode = "Loc";
}
else if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_OutOfSrv" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="OnBtnCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="dirSpd" Type="integer">0</Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;
pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}

if(pMe.Vars("dirSpd").Value == 1)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.X = 65;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
    pMe.X = 15;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="OnCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:27_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:27_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OffBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OnBtnCCW" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="dirSpd" Type="integer">0</Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;
pMe.Vars("dirSpd").Value = pMe.GetPar("dirSpd");

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}

//direction/speed
if(pMe.Vars("dirSpd").Value == 1)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.X = 15;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
    pMe.X = 65;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="OnCCWdir" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:33_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="OnCCWspd" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:28_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/HMI_StartCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RFSCCW");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData_2D/",$.par("tagName"),"/#vars/RunCCW");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_PIDCtrl_ExtFP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:22:20</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">320</Prop>
        <Prop Name="Dy">550</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
          <Prop Name="fraction" Type="par">2</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">320</Prop>
          <Prop Name="Dy">550</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="fraction" Type="par">$.par("fraction")</Prop>
          </Props>
          <Prop Name="ToolTip">
            <DStatic></DStatic>
            <DBind Type="GP">
              <Prop Name="Value">.;Vars("Description")</Prop>
            </DBind>
          </Prop>
          <Props Name="LocalProps">
            <Prop Name="StatusVis" Type="bool">1</Prop>
            <Prop Name="SetupVis" Type="bool">0</Prop>
          </Props>
          <GItem Name="Background" Type="PmiRectangle">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">300</Prop>
            <Prop Name="Dy">250</Prop>
            <Prop Name="IsSymmetry">0</Prop>
            <Prop Name="RadiusX">0</Prop>
            <Prop Name="RadiusY">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="ColorPattern">#000000</Prop>
            <Prop Name="Pattern">0</Prop>
            <Prop Name="WidthBorder">1</Prop>
            <Prop Name="ColorBorder">#808080</Prop>
          </GItem>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">400</Prop>
            <Prop Name="Dx">300</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">300</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">455</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_E2Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E2";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="OUT_Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Cen");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "";


if(pEvent.GetVar("OUT_Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("OUT_Seq").Value)
{
    mode = "Seq";
}



ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E1Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_E1Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E1";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">256</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">206</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/PIDCtrlData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">156</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_PIDCtrlTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_PV" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Procesní hodnota", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_SP" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Žádaná hodnota", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">510</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:38_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_PIDCtrl_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";par:fraction=" + pMe.GetPar("fraction"));
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="OUT_E1" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_E1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_E2" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_E2");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Track" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Track");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "";


if(pEvent.GetVar("OUT_Man").Value)
{
    mode = "M";
}
else if(pEvent.GetVar("OUT_E2").Value)
{
    mode = "E2";
}
else if(pEvent.GetVar("OUT_E1").Value)
{
    mode = "E1";
}
else if(pEvent.GetVar("OUT_Track").Value)
{
    mode = "T";
}
else if(pEvent.GetVar("OUT_Auto").Value)
{
    mode = "A";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_outValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Výstup regulátoru", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">455</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrackBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">455</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Track");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "T";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="PV" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="ActPV" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActPV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);

var ActPV = Pm.Round(pEvent.GetVar("ActPV").Value, 1 / Pm.Pow(10, 2));
var Unit = pEvent.GetVar("Unit").Value;
var Value = "";

Value = ActPV + Unit;

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="SP" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ActSP" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/PIDCtrlData/" + pMe.GetPar("tagName") + "/#vars/ActSP;");
}

]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);

]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ActSP = Pm.Round(pEvent.GetVar("ActSP").Value, 1 / Pm.Pow(10, 2));
var Unit = pEvent.GetVar("Unit").Value;
var Value = "";

Value = ActSP + Unit;
        
ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.SP(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OutValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="fraction" Type="integer">0</Prop>
              <Prop Name="OUT_Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ValueOut" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ValueOut");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("StatusVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("fraction").Value = pMe.GetPar("fraction");]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    if(pMe.Vars("OUT_Man").Value)  
    {
        pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/PIDCtrlData/" + pMe.GetPar("tagName") + "/#vars/ValueOut;");    
    }
}

]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Control">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var ManualMode = pEvent.GetVar("OUT_Man").Value;

if(!ManualMode)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ValueOut =  Pm.Round(pEvent.GetVar("ValueOut").Value, 1 / Pm.Pow(10, 2));
var Value = "";

Value = ValueOut + "%";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.Control(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">405</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="MenuBar" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Index" Type="integer">0</Prop>
              <Prop Name="Titles" Type="string">Status;Nastavení</Prop>
              <Prop Name="Widths" Type="string">80;80</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action == 0)
{
  var nBlock = 0, nIndex = -1;
  var aWidth = Pm.StringSplit(pMe.Vars("Widths").Value, ";", "empty:1;");
  for(var i = 0; i < aWidth.GetSize(1); i++)
  {
    nBlock += Pm.ToNumber(aWidth.GetItem(i, -1));
    if(pEvent.X < nBlock) {pMe.Vars("Index").Value = i; nIndex = i; break;}
  }
  
  //var oFrame = pMe.Items("/Frame");
  switch(nIndex)
  {
  case 0:
    pMe.Parent.Vars("StatusVis").Value = true;
    pMe.Parent.Vars("SetupVis").Value = false;
    break;
  case 1:
    pMe.Parent.Vars("StatusVis").Value = false;
    pMe.Parent.Vars("SetupVis").Value = true;
    break;
  default: break;
  }
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
var bgColor     = "#d0d0d0";
var bgColorAct  = "#f0f0f0";
var borderColor = "#000000";
var titleColor  = "#000000";
var fontSize    = 12;
var borderWidth = 1;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

var nIndex    = pEvent.GetVar("Index").Value;
var aWidths   = Pm.StringSplit(pEvent.GetVar("Widths").Value, ";", "empty:1;");
var aTitles   = Pm.StringSplit(pEvent.GetVar("Titles").Value, ";", "empty:1;");

var dy        = pEvent.CtxDy;
var dx        = pEvent.CtxDx;
var ctx       = pEvent.GetCtx(0);
var nTitles   = aTitles.GetSize(1);
var nBlock = 0, nWidth, nB = borderWidth / 2;

ctx.lineWidth     = borderWidth;
ctx.strokeStyle   = borderColor;
ctx.font          = fontSize + "px Arial";
ctx.textAlign     = "center";
ctx.textBaseline  = "middle";

for(var i = 0; i < nTitles; i++)
{
  nWidth = Pm.ToNumber(aWidths.GetItem(i, -1));

  ctx.beginPath();

  ctx.moveTo(nBlock + nB, dy - nB);
  ctx.lineTo(nBlock + nB, dy * 0.25);
  ctx.bezierCurveTo(nBlock + nB, dy * 0.25, nBlock + nB, nB, nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.1, nB);
  ctx.lineTo(nBlock + nWidth * 0.9, nB);
  ctx.lineTo(nBlock + nWidth, dy * 0.25);
  ctx.lineTo(nBlock + nWidth, dy - nB);

  if(i == nIndex)
     ctx.fillStyle = bgColorAct;
  else
  {
     ctx.fillStyle = bgColor;
     ctx.closePath();
  }
  
  if(borderWidth > 0)
    ctx.stroke();
  ctx.fill();

  ctx.fillStyle = titleColor;
  ctx.fillText(aTitles.GetItem(i, -1), nBlock + nWidth / 2, dy / 2);
    
  nBlock += nWidth;
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_pidType" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Typ regulátoru", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_Gain" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>0</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Gain");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="ComboBoxPIDtype" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="selTxt" Type="string">text</Prop>
              <Prop Name="HMI_PIDType" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_PIDType");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="selVal" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onStart" Type="Pm">
              <Script>
                <![CDATA[pMe.Methods.ChangeValue("val1");

switch(pMe.Vars("HMI_PIDType").Value)
{
    case 0:
        pMe.Vars("selTxt").Value = "P";
        break;
    case 1:
        pMe.Vars("selTxt").Value = "PI";
        break;
    case 2:
        pMe.Vars("selTxt").Value = "PD";
        break;
    case 3:
        pMe.Vars("selTxt").Value = "PID";
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[switch(pMe.Vars("HMI_PIDType").Value)
{
    case 0:
        pMe.Vars("selTxt").Value = "P";
        break;
    case 1:
        pMe.Vars("selTxt").Value = "PI";
        break;
    case 2:
        pMe.Vars("selTxt").Value = "PD";
        break;
    case 3:
        pMe.Vars("selTxt").Value = "PID";
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[var oPush = pMe.Vars("push");

if(!pEvent.Action)
{
  if(pEvent.Code == 38)
    pMe.Methods.ChangeUp();
  if(pEvent.Code == 40)
    pMe.Methods.ChangeDown();
  if(pEvent.Code == 32)
    pMe.ShowMenu();
  oPush.Value = 0;
}
else
{
  if(pEvent.Code == 38 || pEvent.Code == 40)
    oPush.Value = 1;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(!pEvent.Action && pEvent.FocusIn)
  return;

if(pMe.Vars("mode").Value & 0x0300 && !pEvent.FocusIn)
{
  var oPush = pMe.Vars("push");
  if(!pEvent.Action)
     pMe.ShowMenu();
  pMe.Refresh();
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeValue(pEvent.Name);]]></Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[var aType = pMe.Methods.GetTypeList();
var nLength = aType.GetSize(1);

for(var i = 0; i < nLength; i++)
  pEvent.Menu.AddMenu(aType.GetItem(i, 0), aType.GetItem(i, 1));]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangeDown">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var vSelVal = pMe.Vars("selVal").Value;
var nLength = aType.GetSize(1);

for(i = 0; i < nLength - 1; i++)
{
  if(aType.GetItem(i, 0) == vSelVal)
  {
      vSelVal = aType.GetItem(i + 1, 0);
      pMe.Vars("selVal").Value = vSelVal;
      pMe.Vars("selTxt").Value = aType.GetItem(i + 1, 1);
      pMe.Methods.LaunchAction(vSelVal);
      break;
  }
}]]>
                </Script>
              </Method>
              <Method Name="ChangeUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var vSelVal = pMe.Vars("selVal").Value;
var nLength = aType.GetSize(1);

for(var i = 1; i < nLength; i++)
{
  if(aType.GetItem(i, 0) == vSelVal)
  {
      vSelVal = aType.GetItem(i - 1, 0);
      pMe.Vars("selVal").Value = vSelVal;
      pMe.Vars("selTxt").Value = aType.GetItem(i - 1, 1);
      pMe.Methods.LaunchAction(vSelVal);
      break;
  }
}]]>
                </Script>
              </Method>
              <Method Name="ChangeValue">
                <Prop Name="Params">sVal</Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var vSelVal = pMe.Vars("selVal").Value;
var nLength = aType.GetSize(1);

if(vSelVal != sVal)
{
  for(var i = 0; i < nLength; i++)
  {
    if(aType.GetItem(i, 0) == sVal)
    {
      pMe.Vars("selVal").Value  = sVal;
      pMe.Vars("selTxt").Value = aType.GetItem(i, 1);
      pMe.Methods.LaunchAction(sVal);
      pMe.Vars("HMI_PIDType").Value = sVal;
      break;
    }
  }
}]]>
                </Script>
              </Method>
              <Method Name="GetTypeList">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var aType = Pm.CreatePmArray();
aType.Create(4, 2);

// Text and Values
aType.SetItem(0,    0, 0); // value
aType.SetItem("P",  0, 1); // text

aType.SetItem(1,    1, 0); // value
aType.SetItem("PI",  1, 1); // text

aType.SetItem(2,    2, 0); // value
aType.SetItem("PD",  2, 1); // text

aType.SetItem(3,    3, 0); // value
aType.SetItem("PID",  3, 1); // text

return aType]]>
                </Script>
              </Method>
              <Method Name="LaunchAction">
                <Prop Name="Params">vSelVal</Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawCombo">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder    = 2;
var nFontSize  = 14;
var sFontColor = "#000000";
var sBgColor   = "#fafafa";
var sColor     = "#6a9afa";
// --------------------------------

var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder > 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// text
ctx.fillStyle    = bDisabled ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "left";
ctx.font         = nFontSize + "px Arial";

ctx.fillText(pEvent.GetVar("selTxt").Value, 5, dy * 0.5);

// Right strip
var stripWidth = 20;
ctx.fillStyle = sColor;
ctx.beginPath();
ctx.fillRect(dx - stripWidth - nBorder, nBorder, stripWidth, dy - 2 * nBorder);

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.moveTo(dx - nBorder - stripWidth * 0.7, dy * 0.3);
ctx.lineTo(dx - nBorder - stripWidth * 0.3, dy * 0.3);
ctx.lineTo(dx - nBorder - stripWidth * 0.5, dy * 0.7);
ctx.closePath();    
ctx.fill();]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
pEvent.Methods.DrawCombo(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="DirBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">180</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Dir");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = !pMe.Vars("Value").Value;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.7, 1);
var mode = pEvent.GetVar("Value").Value ? "Nepřímý" : "Přímý";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.1);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_dir" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">180</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Směr regulace", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Gain" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zesílení", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Ti" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Ti", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Td" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Td", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_db" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">300</Prop>
            <Prop Name="Dx">190</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Pásmo necitlivosti", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_OutMax" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">330</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Výstup Max", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_OutMin" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">100</Prop>
            <Prop Name="Y">360</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Výstup Min", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_Ti" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>0</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Ti");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_Td" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>0</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Td");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_DB" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">300</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>0</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_DB");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_OutMax" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">330</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>0</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_PIDOutMax");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="edit_OutMin" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">360</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>0</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_PIDOutMin");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="ApplyBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">250</Prop>
            <Prop Name="Y">330</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Apply");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("SetupVis")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:25_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">100</Prop>
              <Prop Name="CropDy">100</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_OnOffCtrl_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:22:14</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">350</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">350</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Event Name="onRefresh" Type="Pm">
            <Script>
              <![CDATA[
]]>
            </Script>
          </Event>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_LOC");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Loc";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="Cmd0Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cmd0Int");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cmd1Int" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cmd1Int");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var travel = !pMe.Vars("Run").Value && pMe.Vars("Cmd1Int").Value || pMe.Vars("Run").Value && pMe.Vars("Cmd0Int").Value;
pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(travel)
{
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
}
else
{
    if(pMe.Vars("Run").Value)
    {
        pMe.GetChildByIndex(0).Visible = true;
        pMe.GetChildByIndex(1).Visible = false;
    }
    else
    {
        pMe.GetChildByIndex(0).Visible = false;
        pMe.GetChildByIndex(1).Visible = true;
    }
}
]]>
              </Script>
            </Event>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:13_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = pEvent.GetVar("Auto").Value ? "A" : "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/OnOffCtrlData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">280</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">270</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="HMI_OutOfSrv" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192 || pEvent.GetVar("HMI_OutOfSrv").Value)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_OutOfSrv" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">50</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Mimo provoz", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">135</Prop>
            <Prop Name="Y">310</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:39_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_OnOffCtrl_ExtFP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Loc" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Loc");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "Loc";


if(pEvent.GetVar("Loc").Value)
{
    mode = "Loc";
}
else if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_OutOfSrv" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_OutOfSrv");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="OnBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/RFS");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:13_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/RFS");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">205</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_EnAuto");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OffBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Interlock" Type="bool">1</Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/OnOffCtrlData/",$.par("tagName"),"/#vars/Run");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("Interlock").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script><![CDATA[]]></Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[
]]>
              </Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_AOutTrend_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:23</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Prop Name="MultiView">1</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">800</Prop>
        <Prop Name="Dy">600</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par"></Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Panel" Type="PmiPanel">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">800</Prop>
          <Prop Name="Dy">600</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">2</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <GItem Name="AxTrendsHead" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">5</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">148</Prop>
            <Prop Name="ProgID">PMTABLE.PmTableCtrl.1</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{19BA6EE6-4BB4-11D1-8085-0020AFC8C4AF}</Prop>
            <Event Name="CellClicked" Type="Ax">
              <Prop Name="Params">nRow,nCol,bCtrl,bShift,bAlt</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead  = pMe.Acx;
var nCount = oTView.TrendsCount;
if(nCol == 1 && nRow > 0 && nRow <= nCount)
{
  var oTrend = oTView.Trends(nRow -1);
  oTrend.Visible = !oTrend.Visible;
  oHead.SetCellText(nRow, nCol, oTrend.Visible ? "" : "X");
  oTView.Draw();
  oHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="CellFocusChanged" Type="Ax">
              <Prop Name="Params">nRow,nCol,nRowOld,nColOld</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead = pMe.Acx;
for(var i = 1; i < oHead.Rows; i++)
  oHead.SetCellBackColor(i, -3, "transparent");

oTView.TrendActive = nRow - 1;
oHead.SetCellBackColor(nRow, -3, "#009898");
oHead.Draw();
oTView.Draw();]]>
              </Script>
            </Event>
            <Event Name="CellEditRequested" Type="Ax">
              <Prop Name="Params">nRow,nCol</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
if(nRow > 0)
  oTView.Trends(nRow - 1).DlgProperties("resizable=yes");]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="buttTwoAutoscroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">8</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendAutoScroll')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
              <Prop Name="state" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                </DBind>
              </Prop>
            </Props>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Vars("state").Value = true;]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  var oState = pMe.Vars("state");
  if(!pEvent.Action) //if key UP
    oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
{
  var oState = pMe.Vars("state");
  oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder     = 1;
var sImgColor   = "#000000";
var sBgColor    = "#acacac";
//---------------------------------
var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
var mode        = pEvent.GetVar("mode").Value;
var nPush       = pEvent.GetVar("push").Value;
var nState      = pEvent.GetVar("state").Value;
var bDisabled   = mode & 0x0030;
var bFocused    = mode & 0x0300;
var bMouseover  = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);
  
// Border
if(nBorder > 0)
{
  // UP border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, 0.7) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // DOWN border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.7);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// FILL
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(!nPush && !nState)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}

ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush || nState)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
  
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;
if(nState)
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.8);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.closePath();
  ctx.fill();

  ctx.beginPath();
  ctx.moveTo(dx * 0.55, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.8);
  ctx.lineTo(dx * 0.55, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}
else
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.8, dy * 0.5);
  ctx.lineTo(dx * 0.4, dy * 0.2);
  ctx.lineTo(dx * 0.4, dy * 0.8);
  ctx.closePath();
  ctx.fill();
  
  ctx.beginPath();
  ctx.moveTo(dx * 0.2, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.lineTo(dx * 0.2, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttScroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">48</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','scroll'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="typeList" Type="string"></Prop>
              <Prop Name="typeSel" Type="integer">12</Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pMe.Vars("typeSel").Value);]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[var oPush = pMe.Vars("push");

if(!pEvent.Action)
{
  if(pEvent.Code == 38)
    pMe.Methods.ChangeType("up");
  if(pEvent.Code == 40)
    pMe.Methods.ChangeType("down");
  if(pEvent.Code == 37)
    pMe.Methods.ChangeTime("left");
  if(pEvent.Code == 39)
    pMe.Methods.ChangeTime("right");
  if(pEvent.Code == 32)
    pMe.ShowMenu();
  oPush.Value = 0;
}
else
{
  if(pEvent.Code == 38 || pEvent.Code == 40)
    oPush.Value = 1;
  if(pEvent.Code == 37)
    oPush.Value = 2;
  if(pEvent.Code == 39)
    oPush.Value = 3;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(!pEvent.Action && pEvent.FocusIn)
  return;

if(pMe.Vars("mode").Value & 0x0300 && !pEvent.FocusIn)
{
  var oPush = pMe.Vars("push");
  var dy = pMe.Dy;
  var dx = pMe.Dx;

  if(!pEvent.Action)
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      pMe.ShowMenu();
    else
    {
      if(pEvent.X < dy)
        pMe.Methods.ChangeTime("left");
      else if(pEvent.X > (dx - dy))
        pMe.Methods.ChangeTime("right");
    }
    oPush.Value = 0;
  }
  else
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      oPush.Value = 1;
    else if(pEvent.X < dy)
      oPush.Value = 2;
    else if(pEvent.X > (dx - dy))
      oPush.Value = 3;
  }
  pMe.Refresh();
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pEvent.Name);]]></Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[var aType = pMe.Methods.GetTypeList();
var nLength = aType.GetSize(1);

for(var i = 0; i < nLength; i++)
  pEvent.Menu.AddMenu(i, aType.GetItem(i, 0));]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangeTime">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var nIndex = pMe.Vars("typeSel").Value;
var aType = pMe.Methods.GetTypeList();
var par1  = aType.GetItem(nIndex, 1);
var par2  = aType.GetItem(nIndex, 2);
var sMeth = aType.GetItem(nIndex, 3);
var t, tOld, tNew;

if(action == "left") // "left"  or keycode 37
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMin;
    tOld = Pm.CreatePmDateObject(t).GetValue() - 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1, tOld, par2);
    oTView.ScrollTime(40, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1, par2);
}
else               // "right"  or keycode 39
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMax, tNew;
    tOld = Pm.CreatePmDateObject(t).GetValue() + 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1 + 40, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1 + 40, tOld, par2);
    oTView.ScrollTime(41, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1 + 1, par2);
}
]]>
                </Script>
              </Method>
              <Method Name="ChangeType">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var nIndex = pMe.Vars("typeSel").Value;
var nLength = aType.GetSize(1);

switch(action)
{
case "up":
  if(nIndex > 0)
    nIndex--;
  break;
case "down":
  if(nIndex < nLength-1)
    nIndex++;
  break;
default:
  nIndex = action;
  break;
}

pMe.Vars("typeSel").Value  = nIndex;
pMe.Vars("typeList").Value = aType.GetItem(nIndex, 0);]]>
                </Script>
              </Method>
              <Method Name="GetTypeList">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sMin=Macro("$text:sys.minute");
//#pragma variable sHour=Macro("$text:sys.hour");
//#pragma variable sDay=Macro("$text:sys.day");
//#pragma variable sWeek=Macro("$text:sys.week");
//#pragma variable sMonth=Macro("$text:sys.month");
//#pragma variable sPage=Macro("$text:sys.Page");
//#pragma variable sEnd=Macro("$text:sys.toEnd");

var aType = Pm.CreatePmArray().Create(14, 5);

// Text types
aType.SetItem("1 "  + sMin,   0, 0); // "1 min"
aType.SetItem("2 "  + sMin,   1, 0); // "2 min"
aType.SetItem("5 "  + sMin,   2, 0); // "5 min"
aType.SetItem("10 " + sMin,   3, 0); //"10 min"
aType.SetItem("15 " + sMin,   4, 0); //"15 min"
aType.SetItem("30 " + sMin,   5, 0); //"30 min"
aType.SetItem("1"   + sHour,  6, 0); // "1 hour"
aType.SetItem("6-14-22",      7, 0); // "shift" (6, 14, 22 hour)
aType.SetItem("1 "  + sDay,   8, 0); // "1 day"
aType.SetItem("1 "  + sWeek,  9, 0); // "1 week"
aType.SetItem("1 "  + sMonth,10, 0); // "1 month"
aType.SetItem("1/5 "+ sPage, 11, 0); // "1/5 page" 
aType.SetItem("1 "  + sPage, 12, 0); // "1 page"
aType.SetItem(sEnd,          13, 0); // "To end"

// first param methods
aType.SetItem(47,  0, 1);
aType.SetItem(47,  1, 1);
aType.SetItem(47,  2, 1);
aType.SetItem(47,  3, 1);
aType.SetItem(47,  4, 1);
aType.SetItem(47,  5, 1);
aType.SetItem(46,  6, 1);
aType.SetItem(46,  7, 1);
aType.SetItem(45,  8, 1);
aType.SetItem(44,  9, 1);
aType.SetItem(43, 10, 1);
aType.SetItem(30, 11, 1);
aType.SetItem(30, 12, 1);
aType.SetItem(90, 13, 1);

// second param method
aType.SetItem(1,     0, 2);
aType.SetItem(2,     1, 2);
aType.SetItem(5,     2, 2);
aType.SetItem(10,    3, 2);
aType.SetItem(15,    4, 2);
aType.SetItem(30,    5, 2);
aType.SetItem(1,     6, 2);
aType.SetItem(8,     7, 2);
aType.SetItem(null,  8, 2);
aType.SetItem(null,  9, 2);
aType.SetItem(null, 10, 2);
aType.SetItem(1/5,  11, 2);
aType.SetItem(1,    12, 2);
aType.SetItem(0,    13, 2);

// select methods
aType.SetItem("GetDateOf",   0, 3);
aType.SetItem("GetDateOf",   1, 3);
aType.SetItem("GetDateOf",   2, 3);
aType.SetItem("GetDateOf",   3, 3);
aType.SetItem("GetDateOf",   4, 3);
aType.SetItem("GetDateOf",   5, 3);
aType.SetItem("GetDateOf",   6, 3);
aType.SetItem("GetDateOf",   7, 3);
aType.SetItem("GetDateOf",   8, 3);
aType.SetItem("GetDateOf",   9, 3);
aType.SetItem("GetDateOf",  10, 3);
aType.SetItem("ScrollTime", 11, 3);
aType.SetItem("ScrollTime", 12, 3);
aType.SetItem("ScrollTime", 13, 3);

return aType]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var sShiftNot     = "- - -";

var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sShift        = pEvent.GetVar("typeList").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder > 0)
{
  // up border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(dy, nBorder, dy, dy-nBorder);
grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

//nPush = 3;
if(nPush > 0)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
  ctx.fillStyle = grd;
  ctx.beginPath();

  switch(nPush)
  {
  case 1:
    ctx.moveTo(dy, dy - nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - dy, dy - nBorder);
    break;

  case 2:
    ctx.moveTo(nBorder, dy - nBorder);
    ctx.lineTo(nBorder, nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dy, dy - nBorder);
    break;

  case 3:
    ctx.moveTo(dx - dy, dy - nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - nBorder, nBorder);
    ctx.lineTo(dx - nBorder, dy - nBorder);
    break;
  }
  ctx.closePath();    
  ctx.fill();
}

ctx.fillStyle    = "#000000";
ctx.beginPath();
ctx.moveTo(dy * 0.2, dy * 0.5);
ctx.lineTo(dy * 0.8, dy * 0.2);
ctx.lineTo(dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dy, nBorder);
  ctx.lineTo(dy, dy - nBorder);
  ctx.stroke();
}

ctx.beginPath();
ctx.moveTo(dx - dy * 0.2, dy * 0.5);
ctx.lineTo(dx - dy * 0.8, dy * 0.2);
ctx.lineTo(dx - dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dx - dy, nBorder);
  ctx.lineTo(dx - dy, dy - nBorder);
  ctx.stroke();
}

// text
ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = nFontSize + "px Arial";

//if(nPush)
//  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillText(bFocused ? sShift : sShiftNot, dx * 0.5, dy * 0.5);

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttNewestAll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','toEnd'),' - ',$.text('sys','right'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Items("../AxTrendsView").Acx.ScrollTime(91, 0);]]></Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.2, dy * 0.2);
ctx.lineTo(dx * 0.2, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.9, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.8);
ctx.lineTo(dx * 0.9, dy * 0.8);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">248</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 1')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M1";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">288</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 2')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M2";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomIn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">380</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' +'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(10, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.47, dy * 0.3);
ctx.lineTo(dx * 0.47, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.3);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">412</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','zoom'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="title" Type="string">
                <DStatic Type="string">00:01:00</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Vars("infozoom")</Prop>
                </DBind>
              </Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1=="graph"</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
  pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

var oTView = pMe.Items("../AxTrendsView").Acx

switch(pEvent.Name)
{
  case "1min":
    oTView.ZoomTime(21, 4, 1/24/60, 0);
    pMe.SetProp("Text", "1 " + sText0);
    break;
  case "15min":
    oTView.ZoomTime(21, 4, 1/24/4, 0);
    pMe.SetProp("Text", "1/4 " + sText1);
    break;
  case "30min":
    oTView.ZoomTime(21, 4, 1/24/2, 0);
    pMe.SetProp("Text", "1/2 " + sText1);
    break;
  case "1hour":
    oTView.ZoomTime(21, 4, 1/24, 0);
    pMe.SetProp("Text", "1 " + sText1);
    break;
  case "8hours":
    oTView.ZoomTime(21, 4, 1/3, 0);
    pMe.SetProp("Text", "8 " + sText1);
    break;
  case "1day":
    oTView.ZoomTime(21, 4, 1, 0);
    pMe.SetProp("Text", "1 " + sText2);
    break;
  case "1week":
    oTView.ZoomTime(21, 4, 7, 0);
    pMe.SetProp("Text", "1 " + sText3);
    break;
  case "1month":
    oTView.ZoomTime(21, 4, 30, 0);
    pMe.SetProp("Text", "1 " + sText4);
    break;
}

oTView.Draw()]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

pEvent.Menu.AddMenu("1min",   "1 " + sText0);
pEvent.Menu.AddMenu("15min",  "1/4 " + sText1);
pEvent.Menu.AddMenu("30min",  "1/2 " + sText1);
pEvent.Menu.AddMenu("1hour",  "1 " + sText1);
pEvent.Menu.AddMenu("8hours", "8 " + sText1);
pEvent.Menu.AddMenu("1day",   "1 " + sText2);
pEvent.Menu.AddMenu("1week",  "1 " + sText3);
pEvent.Menu.AddMenu("1month", "1 " + sText4);]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sTitle        = pEvent.GetVar("title").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy - nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// text
if(sTitle)
{
  ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
  ctx.textBaseline = "middle";
  ctx.textAlign    = "center";
  ctx.font         = nFontSize + "px Arial";

  if(nPush)
    ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
  ctx.fillText(sTitle , dx * 0.5, dy * 0.5);
}

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomOut" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">532</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' -'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(11, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttSetting" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">577</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendSetting')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[//if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
//  pMe.Vars("push").Value = pEvent.Action;
//pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();

var oTrendsView = pMe.Items("../AxTrendsView");
var oTView = oTrendsView.Acx;

oTView.DlgTrends("resizable=yes");]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//var oTrendsView = pMe.Items("../AxTrendsView");
//var oTView = oTrendsView.Acx;

//switch(pEvent.Name)
//{
//case "grmode":
//	oTView.ViewMode = oTView.ViewMode == "table" ? "graph" : "table";
//	break;
//case "inicfg":
//  oTView.LoadCfg("string:" + oTrendsView.Vars("cfgini").Value, 11);
//  oTView.ScrollTime(91, 0);
//  oTView.ReadData();
//  oTView.Draw();
//  break;
//case "loadcfg":
//	oTView.LoadCfg("input:#cfg:", 27);
//	oTView.ReadData();
//	oTView.Draw();
//	break;
//case "savecfg":
//    oTView.SaveCfg("input:#cfg:", 1, "Trends;");
//    break;
//case "setting":
//	oTView.DlgTrends("resizable=yes");
//	break;
//case "print":
//	var sHtml = oTView.SaveToHtm("ver:1", "return:", "mode:" + oTView.ViewMode + ";");
//	if(sHtml != "") // print A4 width:700px;height:930px; (210x297), landscape width:930px;height:700px;
//		Pm.PrintHtmlPage(sHtml, "sourcetype:htmlstring;printer:preview;width:700px;height:930px;");
//	break;
//}

]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[////#pragma variable sText0=Macro("$.text('sys','trendViewTable')");
////#pragma variable sText1=Macro("$.text('sys','trendViewGraph')");
////#pragma variable sText2=Macro("$.text('sys','trendLoadCfg')");
////#pragma variable sText3=Macro("$.text('sys','trendSaveCfg')");
////#pragma variable sText4=Macro("$.text('sys','trendSetting')");
////#pragma variable sText5=Macro("$.text('sys','trendPrintGraph')");
////#pragma variable sRestore=Macro("$.text('sys','restoredef')");

//if(pMe.Items("../AxTrendsView").Acx.ViewMode == "graph")
//  pEvent.Menu.AddMenu("grmode", sText0);
//else
//  pEvent.Menu.AddMenu("grmode", sText1);
//pEvent.Menu.AddMenu("inicfg", sRestore);
//pEvent.Menu.AddMenu("loadcfg", sText2);
//pEvent.Menu.AddMenu("savecfg", sText3);
//pEvent.Menu.AddMenu("setting", sText4);
//pEvent.Menu.AddMenu("print",   sText5);
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.4);
ctx.lineTo(dx * 0.7, dy * 0.8);
ctx.bezierCurveTo(dx * 0.7, dy * 0.8, dx * 0.8 , dy * 0.8 , dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.arc(dx * 0.3, dy * 0.3, dx * 0.18, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.arc(dx * 0.25, dy * 0.25, dx * 0.1, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">608</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','enterbegintime')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.CreateForm();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.CreateForm();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangedForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[var oForm = oSystem.ViewObject;
var nMonth = oForm.GetItem("month").Value;
var oIt = oForm.GetItem("day");

switch(nMonth)
{
case 1: case 3: case 5: case 7: case 8: case 10: case 12:
  oIt.Max = 31;
  break;
case 2:
  oIt.Max = 29;
  break;
case 4: case 6: case 9: case 11:
  oIt.Max = 30;
  break;
}]]>
                </Script>
              </Method>
              <Method Name="CloseForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[if(oSystem.CloseReason == "ok")
{
  var oForm = oSystem.ViewObject;
  var dDate = Pm.CreateDate(oForm.GetItem("year").Value, oForm.GetItem("month").Value, oForm.GetItem("day").Value, oForm.GetItem("hour").Value, oForm.GetItem("minute").Value, oForm.GetItem("second").Value, 0);
  pMe.Items("../AxTrendsView").Acx.ScrollTime(40, dDate);
}]]>
                </Script>
              </Method>
              <Method Name="CreateForm">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sDate=Macro("$.text('sys','date')");
//#pragma variable sTime=Macro("$.text('sys','time')");
//#pragma variable sSec=Macro("$.text('sys','second')");
//#pragma variable sMin=Macro("$.text('sys','minute')");
//#pragma variable sHour=Macro("$.text('sys','hour')");
//#pragma variable sDay=Macro("$.text('sys','day')");
//#pragma variable sMonth=Macro("$.text('sys','month')");
//#pragma variable sYear=Macro("$.text('sys','year')");

var dNow = Pm.CreatePmDateObject();

var oIt, oForm = Pm.CreatePmForm();
oForm.Title = sDate+"/"+sTime;

//create form items
var nYear = dNow.GetYear();
oIt = oForm.CreateItem("int", "year", sYear);
oIt.Value = nYear;
oIt.Min = nYear - 10;
oIt.Max = nYear + 1;

oIt = oForm.CreateItem("int", "month", sMonth, "Min:1;Max:12;");
oIt.Value = dNow.GetMonth();

oIt = oForm.CreateItem("int", "day", sDay, "Min:1;Max:31;");
oIt.Value = dNow.GetDay();

oIt = oForm.CreateItem("int", "hour", sHour, "Min:0;Max:23;");
oIt.Value = dNow.GetHour();

oIt = oForm.CreateItem("int", "minute", sMin, "Min:0;Max:59;");
oIt.Value = dNow.GetMinute();

oIt = oForm.CreateItem("int", "second", sSec, "Min:0;Max:59;");
oIt.Value = dNow.GetSecond();

//open form
var oExtra = Pm.CreatePmMap();
oExtra.ViewObject = oForm;
oExtra.onChange   = Pm.CreatePmAction(1, pMe, "ChangedForm");
oExtra.onClose    = Pm.CreatePmAction(1, pMe, "CloseForm");
pMe.PmPanel.OpenView("/#glob/form", "target:_blank;modal:1;", "", oExtra);]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.4);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.8);
ctx.lineTo(dx * 0.5, dy * 0.7);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.2, dy * 0.5);
ctx.lineTo(dx * 0.3, dy * 0.5);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.5);
ctx.closePath();
ctx.stroke();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TextLoading" Type="PmiText">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">648</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">2</Prop>
            <Props Name="Text">
              <Prop Name="Value">
                <DStatic>$.text('sys','trendDataLoading')</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.GetStateText()</Prop>
                </DBind>
              </Prop>
              <Prop Name="FontText">PmSmall</Prop>
              <Prop Name="ColorText">#a80000</Prop>
              <Prop Name="AlignHor">1</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ValueDataType">0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="EditAttr">0</Prop>
            <Prop Name="ShadowType">0</Prop>
            <Prop Name="ShadowColor">#808080</Prop>
          </GItem>
          <GItem Name="AxTrendsView" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">155</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">401</Prop>
            <Props Name="LocalProps">
              <Prop Name="infozoom" Type="string">0:01:00</Prop>
              <Prop Name="cfgini" Type="string"></Prop>
              <Prop Name="Max" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Max");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Min" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Min");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorSP" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorSP;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendLineWidth" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/CustomData/#vars/trendLineWidth;Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="ProgID">PmTrdvw.TrendsViewCtl</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{02000002-9DFA-4B37-ABE9-1929F4BCDEA2}</Prop>
            <Event Name="onTimeChange" Type="Ax">
              <Prop Name="Params">rangeType,bZoomChanged,timeMinNew,timeMinType,timeMaxNew,timeMaxType</Prop>
              <Script>
                <![CDATA[if(bZoomChanged)
{
  var tRes = Pm.CreatePmDateObject(timeMaxNew).GetValue() - Pm.CreatePmDateObject(timeMinNew).GetValue();
  var nDay = tRes >= 1 ? Pm.Round(tRes, 1) : 0;
  var sDay = nDay > 0 ? nDay + " " : "";
  pMe.Vars("infozoom").Value = sDay + Pm.CreatePmDateObject(tRes - nDay).Format("%H:%M:%S");
}]]>
              </Script>
            </Event>
            <Event Name="onDataTrendReady" Type="Ax">
              <Prop Name="Params">sTrendID</Prop>
              <Script>
                <![CDATA[if(pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).Points.GetValueByIndex(-2, 0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onCursorTimeChange" Type="Ax">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[if(!pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).CursorValue(0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onTrendParamsChange" Type="Ax">
              <Prop Name="Params">bInit</Prop>
              <Script>
                <![CDATA[//#pragma variable sName=Macro("$.text('sys','name')");
//#pragma variable sUnit=Macro("$.text('sys','unit')");
//#pragma variable sValue=Macro("$.text('sys','value')");

var oTHead = pMe.Items("../AxTrendsHead").Acx;
var oTView = pMe.Acx;
if(bInit)
{
  oTHead.SetCellText(0, 2, sName);
  oTHead.SetCellText(0, 3, sUnit);
  oTHead.SetCellText(0, 6, sValue);
  pMe.Vars("cfgini").Value = oTView.GetCfg("Trends;TimeZoom;", "");
  
  var oTrend = oTView.AddTrend("t0", pMe.GetPar("tagName") + ".ValueOut"); 
  
  if (Pm.IsValid(oTrend))
  {
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".ValueOut", "");
    oTrend.ValueMax = pMe.Vars("Max").Value;
    oTrend.ValueMin = pMe.Vars("Min").Value;
    oTrend.Unit = pMe.Vars("Unit").Value;
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorSP").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }
}

var nCount = oTView.TrendsCount;
oTHead.Rows = nCount + 1;
for(var i = 1; i <= nCount; i++)
{
  var oTrend = oTView.Trends(i -1);
  oTHead.SetCellText(i, 1, oTrend.Visible ? "" : "X");
  oTHead.SetCellText(i, 2, oTrend.Name);
  oTHead.SetCellTextAlign(i, 2, 0);
  oTHead.SetCellText(i, 3, oTrend.Unit);
  oTHead.SetCellText(i, 4, Pm.Round(oTrend.ValueMin, 0.001));
  oTHead.SetCellText(i, 5, Pm.Round(oTrend.ValueMax, 0.001));
  if(!oTView.Autoscroll)
	oTHead.SetCellText(i, 6, Pm.Round(oTrend.CursorValue(0), 0.001));
  oTHead.SetCellBackColor(i, 0, oTrend.GraphDefault.Color);
}
//if(oTHead.FocusedRow >= oTHead.Rows)
//  oTHead.FocusedRow = oTHead.Rows -1;

oTHead.SetCellBackColor(oTHead.FocusedRow, -3, "transparent");
oTHead.FocusedRow = oTView.TrendActive + 1;
oTHead.SetCellBackColor(oTView.TrendActive + 1, -3, "#009898");

// text align cols
oTHead.SetCellTextAlign(-3, 1, 1); //Visible - align center
oTHead.SetCellTextAlign(-3, 2, 0); //Name - align left
oTHead.SetCellTextAlign(-3, 3, 1); //Unit - align center
oTHead.SetCellTextAlign(-3, 4, 1); //Min - align center
oTHead.SetCellTextAlign(-3, 5, 1); //Max - align center
oTHead.SetCellTextAlign(-3, 6, 2); //Value - align right
oTHead.Draw();
if(bInit && !oTView.Autoscroll) oTView.ReadData();
]]>
              </Script>
            </Event>
          </GItem>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_AInTrend_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:20:01</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Prop Name="MultiView">1</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">800</Prop>
        <Prop Name="Dy">600</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par"></Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="Panel" Type="PmiPanel">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">800</Prop>
          <Prop Name="Dy">600</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">2</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <GItem Name="AxTrendsHead" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">5</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">148</Prop>
            <Prop Name="ProgID">PMTABLE.PmTableCtrl.1</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{19BA6EE6-4BB4-11D1-8085-0020AFC8C4AF}</Prop>
            <Event Name="CellClicked" Type="Ax">
              <Prop Name="Params">nRow,nCol,bCtrl,bShift,bAlt</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead  = pMe.Acx;
var nCount = oTView.TrendsCount;
if(nCol == 1 && nRow > 0 && nRow <= nCount)
{
  var oTrend = oTView.Trends(nRow -1);
  oTrend.Visible = !oTrend.Visible;
  oHead.SetCellText(nRow, nCol, oTrend.Visible ? "" : "X");
  oTView.Draw();
  oHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="CellFocusChanged" Type="Ax">
              <Prop Name="Params">nRow,nCol,nRowOld,nColOld</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var oHead = pMe.Acx;
for(var i = 1; i < oHead.Rows; i++)
  oHead.SetCellBackColor(i, -3, "transparent");

oTView.TrendActive = nRow - 1;
oHead.SetCellBackColor(nRow, -3, "#009898");
oHead.Draw();
oTView.Draw();]]>
              </Script>
            </Event>
            <Event Name="CellEditRequested" Type="Ax">
              <Prop Name="Params">nRow,nCol</Prop>
              <Script>
                <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
if(nRow > 0)
  oTView.Trends(nRow - 1).DlgProperties("resizable=yes");]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="buttTwoAutoscroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">8</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendAutoScroll')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
              <Prop Name="state" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                </DBind>
              </Prop>
            </Props>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Vars("state").Value = true;]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  var oState = pMe.Vars("state");
  if(!pEvent.Action) //if key UP
    oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
{
  var oState = pMe.Vars("state");
  oState.Value = !oState.Value;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder     = 1;
var sImgColor   = "#000000";
var sBgColor    = "#acacac";
//---------------------------------
var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
var mode        = pEvent.GetVar("mode").Value;
var nPush       = pEvent.GetVar("push").Value;
var nState      = pEvent.GetVar("state").Value;
var bDisabled   = mode & 0x0030;
var bFocused    = mode & 0x0300;
var bMouseover  = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);
  
// Border
if(nBorder > 0)
{
  // UP border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, 0.7) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // DOWN border
  ctx.fillStyle = (!nPush && !nState) ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.7);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// FILL
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(!nPush && !nState)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}

ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush || nState)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
  
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;
if(nState)
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.2);
  ctx.lineTo(dx * 0.45, dy * 0.8);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.closePath();
  ctx.fill();

  ctx.beginPath();
  ctx.moveTo(dx * 0.55, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.2);
  ctx.lineTo(dx * 0.7, dy * 0.8);
  ctx.lineTo(dx * 0.55, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}
else
{
  ctx.beginPath();
  ctx.moveTo(dx * 0.8, dy * 0.5);
  ctx.lineTo(dx * 0.4, dy * 0.2);
  ctx.lineTo(dx * 0.4, dy * 0.8);
  ctx.closePath();
  ctx.fill();
  
  ctx.beginPath();
  ctx.moveTo(dx * 0.2, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.2);
  ctx.lineTo(dx * 0.3, dy * 0.8);
  ctx.lineTo(dx * 0.2, dy * 0.8);
  ctx.closePath();
  ctx.fill();
}

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttScroll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">48</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','scroll'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="typeList" Type="string"></Prop>
              <Prop Name="typeSel" Type="integer">12</Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onStart" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pMe.Vars("typeSel").Value);]]></Script>
            </Event>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[var oPush = pMe.Vars("push");

if(!pEvent.Action)
{
  if(pEvent.Code == 38)
    pMe.Methods.ChangeType("up");
  if(pEvent.Code == 40)
    pMe.Methods.ChangeType("down");
  if(pEvent.Code == 37)
    pMe.Methods.ChangeTime("left");
  if(pEvent.Code == 39)
    pMe.Methods.ChangeTime("right");
  if(pEvent.Code == 32)
    pMe.ShowMenu();
  oPush.Value = 0;
}
else
{
  if(pEvent.Code == 38 || pEvent.Code == 40)
    oPush.Value = 1;
  if(pEvent.Code == 37)
    oPush.Value = 2;
  if(pEvent.Code == 39)
    oPush.Value = 3;
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(!pEvent.Action && pEvent.FocusIn)
  return;

if(pMe.Vars("mode").Value & 0x0300 && !pEvent.FocusIn)
{
  var oPush = pMe.Vars("push");
  var dy = pMe.Dy;
  var dx = pMe.Dx;

  if(!pEvent.Action)
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      pMe.ShowMenu();
    else
    {
      if(pEvent.X < dy)
        pMe.Methods.ChangeTime("left");
      else if(pEvent.X > (dx - dy))
        pMe.Methods.ChangeTime("right");
    }
    oPush.Value = 0;
  }
  else
  {
    if(pEvent.X > dy && pEvent.X < (dx - dy))
      oPush.Value = 1;
    else if(pEvent.X < dy)
      oPush.Value = 2;
    else if(pEvent.X > (dx - dy))
      oPush.Value = 3;
  }
  pMe.Refresh();
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script><![CDATA[pMe.Methods.ChangeType(pEvent.Name);]]></Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[var aType = pMe.Methods.GetTypeList();
var nLength = aType.GetSize(1);

for(var i = 0; i < nLength; i++)
  pEvent.Menu.AddMenu(i, aType.GetItem(i, 0));]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangeTime">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
var nIndex = pMe.Vars("typeSel").Value;
var aType = pMe.Methods.GetTypeList();
var par1  = aType.GetItem(nIndex, 1);
var par2  = aType.GetItem(nIndex, 2);
var sMeth = aType.GetItem(nIndex, 3);
var t, tOld, tNew;

if(action == "left") // "left"  or keycode 37
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMin;
    tOld = Pm.CreatePmDateObject(t).GetValue() - 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1, tOld, par2);
    oTView.ScrollTime(40, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1, par2);
}
else               // "right"  or keycode 39
{
  if("GetDateOf" == sMeth)
  {
    t = oTView.TimeMax, tNew;
    tOld = Pm.CreatePmDateObject(t).GetValue() + 0.000001;
    if(par2 == 8) // "shift"
      tNew = Pm.GetDateOf(par1 + 40, tOld - 6/24, par2) + 6/24;
    else
      tNew = Pm.GetDateOf(par1 + 40, tOld, par2);
    oTView.ScrollTime(41, tNew);
  }
  else // ScrollTime
    oTView.ScrollTime(par1 + 1, par2);
}
]]>
                </Script>
              </Method>
              <Method Name="ChangeType">
                <Prop Name="Params">action</Prop>
                <Script>
                  <![CDATA[var aType = pMe.Methods.GetTypeList();
var nIndex = pMe.Vars("typeSel").Value;
var nLength = aType.GetSize(1);

switch(action)
{
case "up":
  if(nIndex > 0)
    nIndex--;
  break;
case "down":
  if(nIndex < nLength-1)
    nIndex++;
  break;
default:
  nIndex = action;
  break;
}

pMe.Vars("typeSel").Value  = nIndex;
pMe.Vars("typeList").Value = aType.GetItem(nIndex, 0);]]>
                </Script>
              </Method>
              <Method Name="GetTypeList">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sMin=Macro("$text:sys.minute");
//#pragma variable sHour=Macro("$text:sys.hour");
//#pragma variable sDay=Macro("$text:sys.day");
//#pragma variable sWeek=Macro("$text:sys.week");
//#pragma variable sMonth=Macro("$text:sys.month");
//#pragma variable sPage=Macro("$text:sys.Page");
//#pragma variable sEnd=Macro("$text:sys.toEnd");

var aType = Pm.CreatePmArray().Create(14, 5);

// Text types
aType.SetItem("1 "  + sMin,   0, 0); // "1 min"
aType.SetItem("2 "  + sMin,   1, 0); // "2 min"
aType.SetItem("5 "  + sMin,   2, 0); // "5 min"
aType.SetItem("10 " + sMin,   3, 0); //"10 min"
aType.SetItem("15 " + sMin,   4, 0); //"15 min"
aType.SetItem("30 " + sMin,   5, 0); //"30 min"
aType.SetItem("1"   + sHour,  6, 0); // "1 hour"
aType.SetItem("6-14-22",      7, 0); // "shift" (6, 14, 22 hour)
aType.SetItem("1 "  + sDay,   8, 0); // "1 day"
aType.SetItem("1 "  + sWeek,  9, 0); // "1 week"
aType.SetItem("1 "  + sMonth,10, 0); // "1 month"
aType.SetItem("1/5 "+ sPage, 11, 0); // "1/5 page" 
aType.SetItem("1 "  + sPage, 12, 0); // "1 page"
aType.SetItem(sEnd,          13, 0); // "To end"

// first param methods
aType.SetItem(47,  0, 1);
aType.SetItem(47,  1, 1);
aType.SetItem(47,  2, 1);
aType.SetItem(47,  3, 1);
aType.SetItem(47,  4, 1);
aType.SetItem(47,  5, 1);
aType.SetItem(46,  6, 1);
aType.SetItem(46,  7, 1);
aType.SetItem(45,  8, 1);
aType.SetItem(44,  9, 1);
aType.SetItem(43, 10, 1);
aType.SetItem(30, 11, 1);
aType.SetItem(30, 12, 1);
aType.SetItem(90, 13, 1);

// second param method
aType.SetItem(1,     0, 2);
aType.SetItem(2,     1, 2);
aType.SetItem(5,     2, 2);
aType.SetItem(10,    3, 2);
aType.SetItem(15,    4, 2);
aType.SetItem(30,    5, 2);
aType.SetItem(1,     6, 2);
aType.SetItem(8,     7, 2);
aType.SetItem(null,  8, 2);
aType.SetItem(null,  9, 2);
aType.SetItem(null, 10, 2);
aType.SetItem(1/5,  11, 2);
aType.SetItem(1,    12, 2);
aType.SetItem(0,    13, 2);

// select methods
aType.SetItem("GetDateOf",   0, 3);
aType.SetItem("GetDateOf",   1, 3);
aType.SetItem("GetDateOf",   2, 3);
aType.SetItem("GetDateOf",   3, 3);
aType.SetItem("GetDateOf",   4, 3);
aType.SetItem("GetDateOf",   5, 3);
aType.SetItem("GetDateOf",   6, 3);
aType.SetItem("GetDateOf",   7, 3);
aType.SetItem("GetDateOf",   8, 3);
aType.SetItem("GetDateOf",   9, 3);
aType.SetItem("GetDateOf",  10, 3);
aType.SetItem("ScrollTime", 11, 3);
aType.SetItem("ScrollTime", 12, 3);
aType.SetItem("ScrollTime", 13, 3);

return aType]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var sShiftNot     = "- - -";

var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sShift        = pEvent.GetVar("typeList").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder > 0)
{
  // up border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(dy, nBorder, dy, dy-nBorder);
grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
ctx.fillStyle = grd;
ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

//nPush = 3;
if(nPush > 0)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
  ctx.fillStyle = grd;
  ctx.beginPath();

  switch(nPush)
  {
  case 1:
    ctx.moveTo(dy, dy - nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - dy, dy - nBorder);
    break;

  case 2:
    ctx.moveTo(nBorder, dy - nBorder);
    ctx.lineTo(nBorder, nBorder);
    ctx.lineTo(dy, nBorder);
    ctx.lineTo(dy, dy - nBorder);
    break;

  case 3:
    ctx.moveTo(dx - dy, dy - nBorder);
    ctx.lineTo(dx - dy, nBorder);
    ctx.lineTo(dx - nBorder, nBorder);
    ctx.lineTo(dx - nBorder, dy - nBorder);
    break;
  }
  ctx.closePath();    
  ctx.fill();
}

ctx.fillStyle    = "#000000";
ctx.beginPath();
ctx.moveTo(dy * 0.2, dy * 0.5);
ctx.lineTo(dy * 0.8, dy * 0.2);
ctx.lineTo(dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dy, nBorder);
  ctx.lineTo(dy, dy - nBorder);
  ctx.stroke();
}

ctx.beginPath();
ctx.moveTo(dx - dy * 0.2, dy * 0.5);
ctx.lineTo(dx - dy * 0.8, dy * 0.2);
ctx.lineTo(dx - dy * 0.8, dy * 0.8);
ctx.closePath();
ctx.stroke();
if(bFocused)
{
  ctx.fill();
  ctx.beginPath();
  ctx.moveTo(dx - dy, nBorder);
  ctx.lineTo(dx - dy, dy - nBorder);
  ctx.stroke();
}

// text
ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = nFontSize + "px Arial";

//if(nPush)
//  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillText(bFocused ? sShift : sShiftNot, dx * 0.5, dy * 0.5);

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttNewestAll" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">200</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','toEnd'),' - ',$.text('sys','right'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Items("../AxTrendsView").Acx.ScrollTime(91, 0);]]></Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.2, dy * 0.2);
ctx.lineTo(dx * 0.2, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.8);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.9, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.2);
ctx.lineTo(dx * 0.8, dy * 0.8);
ctx.lineTo(dx * 0.9, dy * 0.8);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">248</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 1')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M1";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttMemPos2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">288</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','memory'),' - 2')</Prop>
            <Props Name="LocalProps">
              <Prop Name="memcfg" Type="string"></Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[switch(pEvent.Name)
{
case "remove":
  pMe.Methods.RemoveMemory();
  break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sRemove=Macro("$.text('sys','remove')");
pEvent.Menu.AddMenu("remove", sRemove, pMe.Vars("memcfg").Value != "" ? "enabled:1;" : "enabled:0;");]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="LoadFromMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.LoadCfg("string:" + pMe.Vars("memcfg").Value, 11);
oTView.ReadData();
oTView.Draw();]]>
                </Script>
              </Method>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[if(pMe.Vars("memcfg").Value !="")
  pMe.Methods.LoadFromMemory();
else
  pMe.Methods.SaveToMemory();
  ]]>
                </Script>
              </Method>
              <Method Name="RemoveMemory">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[pMe.Vars("memcfg").Value = "";]]></Script>
              </Method>
              <Method Name="SaveToMemory">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
pMe.Vars("memcfg").Value = oTView.GetCfg("Trends;TimeMinMax;", "");]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="DrawButton">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sText         = "M2";
var sBgColor      = "#acacac";
var sFontColor    = "#000000";
// --------------------------------
var sMemCfg          = pEvent.GetVar("memcfg").Value;
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(sMemCfg != "")
  sBgColor = "#acfcac";

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);

ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
ctx.textBaseline = "middle";
ctx.textAlign    = "center";
ctx.font         = Pm.Round(dy * 0.5, 1) + "px Arial";

ctx.fillText(sText, dx * 0.5, dy * 0.5);

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var dx          = pEvent.CtxDx;
var dy          = pEvent.CtxDy;
var ctx         = pEvent.GetCtx(0);
pEvent.Methods.DrawButton(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomIn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">380</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' +'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(10, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.moveTo(dx * 0.47, dy * 0.3);
ctx.lineTo(dx * 0.47, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.7);
ctx.lineTo(dx * 0.53, dy * 0.3);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">412</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join($.text('sys','time'),' - ',$.text('sys','zoom'))</Prop>
            <Props Name="LocalProps">
              <Prop Name="title" Type="string">
                <DStatic Type="string">00:01:00</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Vars("infozoom")</Prop>
                </DBind>
              </Prop>
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1=="graph"</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
  pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

var oTView = pMe.Items("../AxTrendsView").Acx

switch(pEvent.Name)
{
  case "1min":
    oTView.ZoomTime(21, 4, 1/24/60, 0);
    pMe.SetProp("Text", "1 " + sText0);
    break;
  case "15min":
    oTView.ZoomTime(21, 4, 1/24/4, 0);
    pMe.SetProp("Text", "1/4 " + sText1);
    break;
  case "30min":
    oTView.ZoomTime(21, 4, 1/24/2, 0);
    pMe.SetProp("Text", "1/2 " + sText1);
    break;
  case "1hour":
    oTView.ZoomTime(21, 4, 1/24, 0);
    pMe.SetProp("Text", "1 " + sText1);
    break;
  case "8hours":
    oTView.ZoomTime(21, 4, 1/3, 0);
    pMe.SetProp("Text", "8 " + sText1);
    break;
  case "1day":
    oTView.ZoomTime(21, 4, 1, 0);
    pMe.SetProp("Text", "1 " + sText2);
    break;
  case "1week":
    oTView.ZoomTime(21, 4, 7, 0);
    pMe.SetProp("Text", "1 " + sText3);
    break;
  case "1month":
    oTView.ZoomTime(21, 4, 30, 0);
    pMe.SetProp("Text", "1 " + sText4);
    break;
}

oTView.Draw()]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[//#pragma variable sText0=Macro("$.text('sys','minute')");
//#pragma variable sText1=Macro("$.text('sys','hour')");
//#pragma variable sText2=Macro("$.text('sys','day')");
//#pragma variable sText3=Macro("$.text('sys','week')");
//#pragma variable sText4=Macro("$.text('sys','month')");

pEvent.Menu.AddMenu("1min",   "1 " + sText0);
pEvent.Menu.AddMenu("15min",  "1/4 " + sText1);
pEvent.Menu.AddMenu("30min",  "1/2 " + sText1);
pEvent.Menu.AddMenu("1hour",  "1 " + sText1);
pEvent.Menu.AddMenu("8hours", "8 " + sText1);
pEvent.Menu.AddMenu("1day",   "1 " + sText2);
pEvent.Menu.AddMenu("1week",  "1 " + sText3);
pEvent.Menu.AddMenu("1month", "1 " + sText4);]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var nFontSize     = 14;
var sFontColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var sTitle        = pEvent.GetVar("title").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy - nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// text
if(sTitle)
{
  ctx.fillStyle    = (bDisabled) ? "#f0f0f0" : sFontColor;
  ctx.textBaseline = "middle";
  ctx.textAlign    = "center";
  ctx.font         = nFontSize + "px Arial";

  if(nPush)
    ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
  ctx.fillText(sTitle , dx * 0.5, dy * 0.5);
}

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttZoomOut" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">532</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.join("$.text('sys','zoom'),' -'")</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value"><![CDATA[v1==0&&v2=="graph"]]></Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                  <Prop Name="v2">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.ViewMode</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("mode").Value = pEvent.NewValue;
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.onPressUp();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.onPressUp();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="onPressUp">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var oTView = pMe.Items("../AxTrendsView").Acx;
oTView.ZoomTime(11, 4, 0, 0);
oTView.Draw();]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.47);
ctx.lineTo(dx * 0.7, dy * 0.53);
ctx.lineTo(dx * 0.3, dy * 0.53);
ctx.closePath();
ctx.fill();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttSetting" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">577</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','trendSetting')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="MenuType">1</Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000)) //if not focused and not mouseover
  pMe.Vars("push").Value = 0;  
pMe.Refresh();
]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[//if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
//  pMe.Vars("push").Value = pEvent.Action;
//pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
pMe.Refresh();

var oTrendsView = pMe.Items("../AxTrendsView");
var oTView = oTrendsView.Acx;

oTView.DlgTrends("resizable=yes");]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[//var oTrendsView = pMe.Items("../AxTrendsView");
//var oTView = oTrendsView.Acx;

//switch(pEvent.Name)
//{
//case "grmode":
//	oTView.ViewMode = oTView.ViewMode == "table" ? "graph" : "table";
//	break;
//case "inicfg":
//  oTView.LoadCfg("string:" + oTrendsView.Vars("cfgini").Value, 11);
//  oTView.ScrollTime(91, 0);
//  oTView.ReadData();
//  oTView.Draw();
//  break;
//case "loadcfg":
//	oTView.LoadCfg("input:#cfg:", 27);
//	oTView.ReadData();
//	oTView.Draw();
//	break;
//case "savecfg":
//    oTView.SaveCfg("input:#cfg:", 1, "Trends;");
//    break;
//case "setting":
//	oTView.DlgTrends("resizable=yes");
//	break;
//case "print":
//	var sHtml = oTView.SaveToHtm("ver:1", "return:", "mode:" + oTView.ViewMode + ";");
//	if(sHtml != "") // print A4 width:700px;height:930px; (210x297), landscape width:930px;height:700px;
//		Pm.PrintHtmlPage(sHtml, "sourcetype:htmlstring;printer:preview;width:700px;height:930px;");
//	break;
//}

]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script>
                <![CDATA[////#pragma variable sText0=Macro("$.text('sys','trendViewTable')");
////#pragma variable sText1=Macro("$.text('sys','trendViewGraph')");
////#pragma variable sText2=Macro("$.text('sys','trendLoadCfg')");
////#pragma variable sText3=Macro("$.text('sys','trendSaveCfg')");
////#pragma variable sText4=Macro("$.text('sys','trendSetting')");
////#pragma variable sText5=Macro("$.text('sys','trendPrintGraph')");
////#pragma variable sRestore=Macro("$.text('sys','restoredef')");

//if(pMe.Items("../AxTrendsView").Acx.ViewMode == "graph")
//  pEvent.Menu.AddMenu("grmode", sText0);
//else
//  pEvent.Menu.AddMenu("grmode", sText1);
//pEvent.Menu.AddMenu("inicfg", sRestore);
//pEvent.Menu.AddMenu("loadcfg", sText2);
//pEvent.Menu.AddMenu("savecfg", sText3);
//pEvent.Menu.AddMenu("setting", sText4);
//pEvent.Menu.AddMenu("print",   sText5);
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

if(nPush)
  ctx.transform(1, 0, 0, 1, nBorder, nBorder);
    
// Image symbol
ctx.fillStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.moveTo(dx * 0.3, dy * 0.4);
ctx.lineTo(dx * 0.7, dy * 0.8);
ctx.bezierCurveTo(dx * 0.7, dy * 0.8, dx * 0.8 , dy * 0.8 , dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.8, dy * 0.7);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.fill();

ctx.beginPath();
ctx.arc(dx * 0.3, dy * 0.3, dx * 0.18, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

ctx.fillStyle = sBgColor;
ctx.beginPath();
ctx.arc(dx * 0.25, dy * 0.25, dx * 0.1, 1.55 * Pm.PI, 0.95 * Pm.PI);
ctx.fill();

// disabled fill
if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="buttTime" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">608</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">32</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="ToolTip">$.text('sys','enterbegintime')</Prop>
            <Props Name="LocalProps">
              <Prop Name="mode" Type="integer">0</Prop>
              <Prop Name="push" Type="integer">0</Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="E">
                <Prop Name="Value">v1==0</Prop>
                <Props Name="Vars">
                  <Prop Name="v1">
                    <DStatic>0</DStatic>
                    <DBind Type="GP">
                      <Prop Name="Value">../AxTrendsView;Acx.Autoscroll</Prop>
                    </DBind>
                  </Prop>
                </Props>
              </DBind>
            </Prop>
            <Event Name="onModeChange" Type="Pm">
              <Script>
                <![CDATA[var nVal = pEvent.NewValue;
pMe.Vars("mode").Value = nVal;
if(!(nVal & 0x0300) && !(nVal & 0x3000))
  pMe.Vars("push").Value = 0;  
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onKeyPress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Code == 32 || pEvent.Code == 13) // if press key space or key enter
{
  pMe.Vars("push").Value = pEvent.Action;
  if(!pEvent.Action) //if key UP
    pMe.Methods.CreateForm();
}
pMe.Refresh();]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("push").Value = pEvent.Action;
if(!pEvent.Action) //if mouse button UP
  pMe.Methods.CreateForm();
pMe.Refresh();]]>
              </Script>
            </Event>
            <Methods>
              <Method Name="ChangedForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[var oForm = oSystem.ViewObject;
var nMonth = oForm.GetItem("month").Value;
var oIt = oForm.GetItem("day");

switch(nMonth)
{
case 1: case 3: case 5: case 7: case 8: case 10: case 12:
  oIt.Max = 31;
  break;
case 2:
  oIt.Max = 29;
  break;
case 4: case 6: case 9: case 11:
  oIt.Max = 30;
  break;
}]]>
                </Script>
              </Method>
              <Method Name="CloseForm">
                <Prop Name="Params">oSystem,oPrivate</Prop>
                <Script>
                  <![CDATA[if(oSystem.CloseReason == "ok")
{
  var oForm = oSystem.ViewObject;
  var dDate = Pm.CreateDate(oForm.GetItem("year").Value, oForm.GetItem("month").Value, oForm.GetItem("day").Value, oForm.GetItem("hour").Value, oForm.GetItem("minute").Value, oForm.GetItem("second").Value, 0);
  pMe.Items("../AxTrendsView").Acx.ScrollTime(40, dDate);
}]]>
                </Script>
              </Method>
              <Method Name="CreateForm">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//#pragma variable sDate=Macro("$.text('sys','date')");
//#pragma variable sTime=Macro("$.text('sys','time')");
//#pragma variable sSec=Macro("$.text('sys','second')");
//#pragma variable sMin=Macro("$.text('sys','minute')");
//#pragma variable sHour=Macro("$.text('sys','hour')");
//#pragma variable sDay=Macro("$.text('sys','day')");
//#pragma variable sMonth=Macro("$.text('sys','month')");
//#pragma variable sYear=Macro("$.text('sys','year')");

var dNow = Pm.CreatePmDateObject();

var oIt, oForm = Pm.CreatePmForm();
oForm.Title = sDate+"/"+sTime;

//create form items
var nYear = dNow.GetYear();
oIt = oForm.CreateItem("int", "year", sYear);
oIt.Value = nYear;
oIt.Min = nYear - 10;
oIt.Max = nYear + 1;

oIt = oForm.CreateItem("int", "month", sMonth, "Min:1;Max:12;");
oIt.Value = dNow.GetMonth();

oIt = oForm.CreateItem("int", "day", sDay, "Min:1;Max:31;");
oIt.Value = dNow.GetDay();

oIt = oForm.CreateItem("int", "hour", sHour, "Min:0;Max:23;");
oIt.Value = dNow.GetHour();

oIt = oForm.CreateItem("int", "minute", sMin, "Min:0;Max:59;");
oIt.Value = dNow.GetMinute();

oIt = oForm.CreateItem("int", "second", sSec, "Min:0;Max:59;");
oIt.Value = dNow.GetSecond();

//open form
var oExtra = Pm.CreatePmMap();
oExtra.ViewObject = oForm;
oExtra.onChange   = Pm.CreatePmAction(1, pMe, "ChangedForm");
oExtra.onClose    = Pm.CreatePmAction(1, pMe, "CloseForm");
pMe.PmPanel.OpenView("/#glob/form", "target:_blank;modal:1;", "", oExtra);]]>
                </Script>
              </Method>
            </Methods>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var nBorder       = 1;
var sImgColor    = "#000000";
var sBgColor      = "#acacac";
// --------------------------------
var dx            = pEvent.CtxDx;
var dy            = pEvent.CtxDy;
var ctx           = pEvent.GetCtx(0);
var mode          = pEvent.GetVar("mode").Value;
var nPush         = pEvent.GetVar("push").Value;
var bDisabled     = mode & 0x0030;
var bFocused      = mode & 0x0300;
var bMouseover    = mode & 0x3000;

if(!bDisabled && bMouseover || bFocused)
  sBgColor = Pm.ColorOper(sBgColor, 2, 0.1);

if(nBorder> 0)
{
  // up border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, -0.5) : Pm.ColorOper(sBgColor, 2, 0.6);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(0, 0);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(nBorder, nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
  
  // down border
  ctx.fillStyle = nPush ? Pm.ColorOper(sBgColor, 2, 0.6) : Pm.ColorOper(sBgColor, 2, -0.5);
  ctx.beginPath();
  ctx.moveTo(0, dy);
  ctx.lineTo(dx, dy);
  ctx.lineTo(dx, 0);
  ctx.lineTo(dx - nBorder, nBorder);
  ctx.lineTo(dx - nBorder, dy - nBorder);
  ctx.lineTo(nBorder, dy - nBorder);
  ctx.closePath();
  ctx.fill();
}

// fill
var grd = ctx.createLinearGradient(nBorder, nBorder, nBorder, dy-nBorder);
if(nPush)
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, -0.1));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, 0.1));
}
else
{
  grd.addColorStop(0, Pm.ColorOper(sBgColor, 2, 0.2));
  grd.addColorStop(1, Pm.ColorOper(sBgColor, 2, -0.1));
}
ctx.fillStyle = grd;

ctx.beginPath();
ctx.fillRect(nBorder, nBorder, dx - 2 * nBorder, dy - 2 * nBorder);

// Image symbol
ctx.fillStyle = ctx.strokeStyle = (bDisabled) ? "#f0f0f0" : sImgColor;

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.35, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.arc(dx * 0.5, dy * 0.5, dy * 0.3, 0, 2 * Pm.PI);
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.4);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.5);
ctx.lineTo(dx * 0.4, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.2);
ctx.lineTo(dx * 0.5, dy * 0.3);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.5, dy * 0.8);
ctx.lineTo(dx * 0.5, dy * 0.7);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.2, dy * 0.5);
ctx.lineTo(dx * 0.3, dy * 0.5);
ctx.closePath();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx * 0.8, dy * 0.5);
ctx.lineTo(dx * 0.7, dy * 0.5);
ctx.closePath();
ctx.stroke();

if(bDisabled)
{
  ctx.beginPath();
  ctx.fillStyle = "rgba(128, 128, 128, 0.4)";
  ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TextLoading" Type="PmiText">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">648</Prop>
            <Prop Name="Y">561</Prop>
            <Prop Name="Dx">143</Prop>
            <Prop Name="Dy">35</Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">2</Prop>
            <Props Name="Text">
              <Prop Name="Value">
                <DStatic>$.text('sys','trendDataLoading')</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">../AxTrendsView;Acx.GetStateText()</Prop>
                </DBind>
              </Prop>
              <Prop Name="FontText">PmSmall</Prop>
              <Prop Name="ColorText">#a80000</Prop>
              <Prop Name="AlignHor">1</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ValueDataType">0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="EditAttr">0</Prop>
            <Prop Name="ShadowType">0</Prop>
            <Prop Name="ShadowColor">#808080</Prop>
          </GItem>
          <GItem Name="AxTrendsView" Type="PmiAx">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">5</Prop>
            <Prop Name="Y">155</Prop>
            <Prop Name="Dx">790</Prop>
            <Prop Name="Dy">401</Prop>
            <Props Name="LocalProps">
              <Prop Name="infozoom" Type="string">0:01:00</Prop>
              <Prop Name="cfgini" Type="string"></Prop>
              <Prop Name="Max" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Max");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Min" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Min");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendLineWidth" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/CustomData/#vars/trendLineWidth;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="trendColorPV" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/trendColorPV;Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="ProgID">PmTrdvw.TrendsViewCtl</Prop>
            <Prop Name="AxProps">v01stream initrop>
            <Prop Name="WndBorderType">2</Prop>
            <Prop Name="ClsID" Type="string">{02000002-9DFA-4B37-ABE9-1929F4BCDEA2}</Prop>
            <Event Name="onTimeChange" Type="Ax">
              <Prop Name="Params">rangeType,bZoomChanged,timeMinNew,timeMinType,timeMaxNew,timeMaxType</Prop>
              <Script>
                <![CDATA[if(bZoomChanged)
{
  var tRes = Pm.CreatePmDateObject(timeMaxNew).GetValue() - Pm.CreatePmDateObject(timeMinNew).GetValue();
  var nDay = tRes >= 1 ? Pm.Round(tRes, 1) : 0;
  var sDay = nDay > 0 ? nDay + " " : "";
  pMe.Vars("infozoom").Value = sDay + Pm.CreatePmDateObject(tRes - nDay).Format("%H:%M:%S");
}]]>
              </Script>
            </Event>
            <Event Name="onDataTrendReady" Type="Ax">
              <Prop Name="Params">sTrendID</Prop>
              <Script>
                <![CDATA[if(pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).Points.GetValueByIndex(-2, 0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onCursorTimeChange" Type="Ax">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[if(!pMe.Acx.Autoscroll)
{
  var oTHead = pMe.Items("../AxTrendsHead").Acx;
  var nCount = pMe.Acx.TrendsCount;
  for(var i = 0; i < nCount; i++)
    oTHead.SetCellText(i + 1, 6, Pm.Round(pMe.Acx.Trends(i).CursorValue(0), 0.001));
  oTHead.Draw();
}]]>
              </Script>
            </Event>
            <Event Name="onTrendParamsChange" Type="Ax">
              <Prop Name="Params">bInit</Prop>
              <Script>
                <![CDATA[//#pragma variable sName=Macro("$.text('sys','name')");
//#pragma variable sUnit=Macro("$.text('sys','unit')");
//#pragma variable sValue=Macro("$.text('sys','value')");

var oTHead = pMe.Items("../AxTrendsHead").Acx;
var oTView = pMe.Acx;
if(bInit)
{
  oTHead.SetCellText(0, 2, sName);
  oTHead.SetCellText(0, 3, sUnit);
  oTHead.SetCellText(0, 6, sValue);
  pMe.Vars("cfgini").Value = oTView.GetCfg("Trends;TimeZoom;", "");
  
  var oTrend = oTView.AddTrend("t0", pMe.GetPar("tagName") + ".Value");
  
  if (Pm.IsValid(oTrend))
  {
    //set trends
    oTrend.Connect(1, "local", "IO", pMe.GetPar("tagName") + ".Value", "");
    oTrend.ValueMax = pMe.Vars("Max").Value;
    oTrend.ValueMin = pMe.Vars("Min").Value;
    oTrend.Unit = pMe.Vars("Unit").Value;
    
    oTrend.GraphDefault.Color = pMe.Vars("trendColorPV").Value;
    oTrend.GraphDefault.Width = pMe.Vars("trendLineWidth").Value;
  }  
}

var nCount = oTView.TrendsCount;
oTHead.Rows = nCount + 1;
for(var i = 1; i <= nCount; i++)
{
  var oTrend = oTView.Trends(i -1);
  oTHead.SetCellText(i, 1, oTrend.Visible ? "" : "X");
  oTHead.SetCellText(i, 2, oTrend.Name);
  oTHead.SetCellTextAlign(i, 2, 0);
  oTHead.SetCellText(i, 3, oTrend.Unit);
  oTHead.SetCellText(i, 4, Pm.Round(oTrend.ValueMin, 0.001));
  oTHead.SetCellText(i, 5, Pm.Round(oTrend.ValueMax, 0.001));
  if(!oTView.Autoscroll)
	oTHead.SetCellText(i, 6, Pm.Round(oTrend.CursorValue(0), 0.001));
  oTHead.SetCellBackColor(i, 0, oTrend.GraphDefault.Color);
}
//if(oTHead.FocusedRow >= oTHead.Rows)
//  oTHead.FocusedRow = oTHead.Rows -1;

oTHead.SetCellBackColor(oTHead.FocusedRow, -3, "transparent");
oTHead.FocusedRow = oTView.TrendActive + 1;
oTHead.SetCellBackColor(oTView.TrendActive + 1, -3, "#009898");

// text align cols
oTHead.SetCellTextAlign(-3, 1, 1); //Visible - align center
oTHead.SetCellTextAlign(-3, 2, 0); //Name - align left
oTHead.SetCellTextAlign(-3, 3, 1); //Unit - align center
oTHead.SetCellTextAlign(-3, 4, 1); //Min - align center
oTHead.SetCellTextAlign(-3, 5, 1); //Max - align center
oTHead.SetCellTextAlign(-3, 6, 2); //Value - align right
oTHead.Draw();
if(bInit && !oTView.Autoscroll) oTView.ReadData();
]]>
              </Script>
            </Event>
          </GItem>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_PIDCtrl_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:22:23</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">320</Prop>
        <Prop Name="Dy">400</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
          <Prop Name="fraction" Type="par">2</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">320</Prop>
          <Prop Name="Dy">400</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="fraction" Type="par">$.par("fraction")</Prop>
          </Props>
          <Prop Name="ToolTip">
            <DStatic></DStatic>
            <DBind Type="GP">
              <Prop Name="Value">.;Vars("Description")</Prop>
            </DBind>
          </Prop>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">300</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">300</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_AutoSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "A";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E2Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_E2Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E2";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="OUT_Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Seq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Cen");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "";


if(pEvent.GetVar("OUT_Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("OUT_Seq").Value)
{
    mode = "Seq";
}



ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="E1Btn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_E1Sel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "E1";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">256</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">206</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/PIDCtrlData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">156</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_PIDCtrlTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">300</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_PV" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">150</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Procesní hodnota", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_SP" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">150</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Žádaná hodnota", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="OUT_E1" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_E1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_E2" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_E2");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Track" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Track");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Auto" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Auto");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "";


if(pEvent.GetVar("OUT_Man").Value)
{
    mode = "M";
}
else if(pEvent.GetVar("OUT_E2").Value)
{
    mode = "E2";
}
else if(pEvent.GetVar("OUT_E1").Value)
{
    mode = "E1";
}
else if(pEvent.GetVar("OUT_Track").Value)
{
    mode = "T";
}
else if(pEvent.GetVar("OUT_Auto").Value)
{
    mode = "A";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_outValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">150</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Výstup regulátoru", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManBtn0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_ManSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "M";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManBtn1" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_Track");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.6, 1);
var mode = "T";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.2);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="PV" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="ActPV" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActPV");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);

var ActPV = Pm.Round(pEvent.GetVar("ActPV").Value, 1 / Pm.Pow(10, 2));
var Unit = pEvent.GetVar("Unit").Value;
var Value;

Value = ActPV + Unit;

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="SP" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ActSP" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";    
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/PIDCtrlData/" + pMe.GetPar("tagName") + "/#vars/ActSP;");    
}

]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);

]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);
var ActSP = Pm.Round(pEvent.GetVar("ActSP").Value, 1 / Pm.Pow(10, 2));

var Unit = pEvent.GetVar("Unit").Value;
var Value = "";

Value = ActSP + Unit;

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.SP(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="OutValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">130</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ActSP");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="OUT_Man" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/OUT_Man");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ValueOut" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/ValueOut");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="fraction" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("fraction").Value = pMe.GetPar("fraction");]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";    
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/PIDCtrlData/" + pMe.GetPar("tagName") + "/#vars/ValueOut;");    
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);
]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Control">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var ManualMode = pEvent.GetVar("OUT_Man").Value;

if(!ManualMode)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dy * 0.09;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="SP">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fFontSize = Pm.Round(dy * 0.5, 1);
ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("SP", dx * 0.1, fFontSize);

]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.8, 1);

var ValueOut =  Pm.Round(pEvent.GetVar("ValueOut").Value, 1 / Pm.Pow(10, 2));
var Value = "";

Value = ValueOut + "%";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);


pEvent.Methods.Control(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManBtn2" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">255</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/PIDCtrlData/",$.par("tagName"),"/#vars/HMI_CenSel");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ExtFPBtn" Type="PmiRasterImage">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">360</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">40</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="File">#appres:39_64x64.png</Prop>
            <Prop Name="CropX">0</Prop>
            <Prop Name="CropY">0</Prop>
            <Prop Name="CropDx">64</Prop>
            <Prop Name="CropDy">64</Prop>
            <Prop Name="TranspColorEnabled">1</Prop>
            <Prop Name="TranspColor">#ffffff</Prop>
            <Prop Name="ConstPagesRatio">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + pMe.PmPanel.X + "," + pMe.PmPanel.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_PIDCtrl_ExtFP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";par:fraction=" + pMe.GetPar("fraction"));
    pMe.PmPanel.Close();
}

]]>
              </Script>
            </Event>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_GrpCtrl_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:43</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">310</Prop>
        <Prop Name="Dy">420</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasEoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">310</Prop>
          <Prop Name="Dy">420</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
          </Props>
          <Prop Name="FocusType">0</Prop>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">300</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">110</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="LocBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_SetSeq");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Seq";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="GroupHold" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GroupHold");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="GrpStarting" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStarting");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="GrpStopping" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStopping");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="GrpStarted" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStarted");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="GrpStopped" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStopped");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

if(pMe.Vars("GroupHold").Value)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = true;
}
else if(pMe.Vars("GrpStarting").Value)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = pMe.Vars("blink").Value;
    pMe.GetChildByIndex(2).Visible = false;
}
else if(pMe.Vars("GrpStopping").Value)
{
    pMe.GetChildByIndex(0).Visible = pMe.Vars("blink").Value;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}
else if(pMe.Vars("GrpStarted").Value)
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
    pMe.GetChildByIndex(2).Visible = false;
}
else if(pMe.Vars("GrpStopped").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = false;
    pMe.GetChildByIndex(2).Visible = false;
}]]>
              </Script>
            </Event>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:13_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Hold" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:32_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CenBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">165</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_SetCen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Letter">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var vFontSize = Pm.Round(dy * 0.4, 1);
var mode = "Cen";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.6);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Letter(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">246</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/GrpData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Sim" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">40</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.6, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Simulace", 0, vFontSize * 1.2);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="PoCInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">115</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Cen" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/Cen");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Seq" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/Seq");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.5, 1);
var mode = "";


if(pEvent.GetVar("Cen").Value)
{
    mode = "Cen";
}
else if(pEvent.GetVar("Seq").Value)
{
    mode = "Seq";
}

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = "bold " + vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx / 2, vFontSize * 1.35);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="CheckBox_Sim" Type="PmiButtonTwo">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">270</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="DrawBg">1</Prop>
            <Prop Name="ColorItem">transparent</Prop>
            <Prop Name="BorderWidth">0</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">0</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
            <Prop Name="BnAttributesTwo">0</Prop>
            <Prop Name="ButtonPressMode">0</Prop>
            <Prop Name="State">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/Sim");Value</Prop>
              </DBind>
            </Prop>
            <Props Name="Text">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc">#pmres:img/Check0.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper">2</Prop>
            <Props Name="Text1">
              <Prop Name="StringText"></Prop>
              <Prop Name="FontText">PmMiddle</Prop>
              <Prop Name="AlignHor">0</Prop>
              <Prop Name="AlignVer">1</Prop>
            </Props>
            <Prop Name="ImageSrc1">#pmres:img/Check1.svg?bgcolor=#efefef</Prop>
            <Prop Name="ImageOper1">2</Prop>
          </GItem>
          <GItem Name="StartBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrRFS");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Run" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStarted");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="Start" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:13_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="RFS" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrRFS");Value</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Run" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStarted");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || !pEvent.GetVar("RFS").Value || pEvent.GetVar("Run").Value)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StopBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">355</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:14_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="HoldBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Hold");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">1</Prop>
              <Prop Name="Run" Type="bool">0</Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}

]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="Hold" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:32_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="PGMBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">215</Prop>
            <Prop Name="Y">305</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/PGM");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="RFS" Type="bool">1</Prop>
              <Prop Name="Run" Type="bool">0</Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}

]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Run").Value && pMe.Vars("RFS").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="PGM0" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">20</Prop>
              <Prop Name="Y">15</Prop>
              <Prop Name="Dx">25</Prop>
              <Prop Name="Dy">25</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:25_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="PGM" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">10</Prop>
              <Prop Name="Dx">25</Prop>
              <Prop Name="Dy">25</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:25_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_GrpActStep" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">230</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">0</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#a8a8a8</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/ActualStep");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_GrpActStep" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">210</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Aktuální krok v sekvenci:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ind_RFS" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrRFS");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Blocked" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var circleR = dy * 0.45;
var Value =  pEvent.GetVar("Value").Value;
var Blocked = pEvent.GetVar("Blocked").Value;

ctx.beginPath();
ctx.fillStyle = Blocked ? "yellow" : "white";
ctx.arc(dx * 0.5, dy * 0.5, circleR, 0, 2 * Pm.PI);
ctx.fill();
ctx.stroke();
ctx.closePath();

if(Value)
{
    ctx.beginPath();
    ctx.fillStyle = "#00ac00";
    ctx.arc(dx * 0.5, dy * 0.5, circleR/2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}

]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFS" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">40</Prop>
            <Prop Name="Y">120</Prop>
            <Prop Name="Dx">260</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zapnutí povoleno", 0, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_RFS0" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">290</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/PreselMiss");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText("Chybí předvýběr", dx/2, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_GrpStepTimer" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">210</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.7, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "right";
ctx.fillText("Časovač zpoždění:", dx, vFontSize * 1.15);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_GrpStepTimer" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;0</Prop>
            <Prop Name="X">230</Prop>
            <Prop Name="Y">230</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">0</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#a8a8a8</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/StepTimer");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">1</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_DOut_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:39</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">260</Prop>
        <Prop Name="Dy">360</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="RootCanvas" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">260</Prop>
          <Prop Name="Dy">360</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="fraction" Type="par">2</Prop>
          </Props>
          <Prop Name="ToolTip">
            <DStatic></DStatic>
            <DBind Type="GP">
              <Prop Name="Value">.;Vars("Description")</Prop>
            </DBind>
          </Prop>
          <Prop Name="FocusType">0</Prop>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">220</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/Value");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[if(pMe.Vars("Value").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}]]>
              </Script>
            </Event>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:24_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">146</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/DoutData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AlDlyArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">130</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">70</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="text_timepulse" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Délka pulzu", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_timepulse" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">80</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/PulseTime");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="ManualArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">130</Prop>
            <Prop Name="Y">130</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">70</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("ManualMode")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="text_InValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">210</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Auto", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Manual" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">60</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Manual", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="statusInValue" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">210</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="InValue" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/InValue");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var InValue;

var vFontSize = Pm.Round(dy * 0.8, 1);

InValue = pEvent.GetVar("InValue").Value ? "ON" : "OFF";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(InValue, dx / 2, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ValueBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/Value");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = !pMe.Vars("Value").Value;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);

]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Text">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[
var Value = pEvent.GetVar("Value").Value;
var vFontSize = Pm.Round(dy * 0.5, 1);
var text;

text = Value ? "OFF" : "ON";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(text, dx / 2, vFontSize * 1.3);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Text(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">295</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/SetManual");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:21_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="ManualMode" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[if(pMe.Vars("ManualMode").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}]]>
              </Script>
            </Event>
            <GItem Name="Man" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:21_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Auto" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:22_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">295</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DoutData/",$.par("tagName"),"/#vars/SetAuto");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:22_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_AOut_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:26</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">260</Prop>
        <Prop Name="Dy">500</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
          <Prop Name="fraction" Type="par">1</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="CanvasRoot" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">260</Prop>
          <Prop Name="Dy">500</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="fraction" Type="par">$.par("fraction")</Prop>
          </Props>
          <Prop Name="FocusType">0</Prop>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="Bargraph" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">110</Prop>
            <Prop Name="Dx">80</Prop>
            <Prop Name="Dy">380</Prop>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="ValueOut" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ValueOut");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="barGraphColor1" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/barGraphColor1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="barGraphColor2" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/barGraphColor2");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ValueOut");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="Min" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Min");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Max" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Max");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLineX = dx * 0.035;
var borderLineY = dy * 0.035 / 3.5;

ctx.fillStyle = "#c0c0c0";
ctx.fillRect(borderLineX, borderLineY, dx - 2 * borderLineX, dy - 2 * borderLineY);]]>
                </Script>
              </Method>
              <Method Name="Bar">
                <Prop Name="Params">ctx,dx,dy,Value</Prop>
                <Script>
                  <![CDATA[//background
var barSpaceX = dx * 0.25;
var barSpaceY = dy * 0.25 / 3.5;

var barGraphColor1 = pEvent.GetVar("barGraphColor1").Value;
var barGraphColor2 = pEvent.GetVar("barGraphColor2").Value;

ctx.fillStyle = "white";
ctx.fillRect(barSpaceX, barSpaceY, dx - 2 * barSpaceX, dy * 0.7);

//value
var Min = pEvent.GetVar("Min").Value;
var Max = pEvent.GetVar("Max").Value;
var vBarSpaceX = dx * 0.28;
var vBarSpaceY = dy * 0.28 / 3.5;
var valPerc = Pm.Round((Value - Min) / ((Max - Min) / 1), 0.01);
valPerc = valPerc > 1 ? 1 : valPerc;

var invPerc = 1 - valPerc;

var grd2 = ctx.createLinearGradient(vBarSpaceX, vBarSpaceY + invPerc*dy * 0.7, barSpaceX + dx - 2 * barSpaceX, barSpaceY + invPerc*dy * 0.7 + valPerc*dy * 0.7);
grd2.addColorStop(0, barGraphColor1);
grd2.addColorStop(1, barGraphColor2);

ctx.fillStyle = grd2;
ctx.fillRect(vBarSpaceX, vBarSpaceY + invPerc*dy * 0.7, dx - 2 * vBarSpaceX, valPerc*dy * 0.7 - 2*(vBarSpaceY - barSpaceY))

//min, max
var mFontSize = Pm.Round(dy * 0.0375, 1) > 13 ? 13 : Pm.Round(dy * 0.0375, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = mFontSize + "px arial";
ctx.textAlign = "center";

ctx.fillText(Max, dx/2, barSpaceY - 0.4*mFontSize);
ctx.fillText(Min, dx/2, barSpaceY + (dy * 0.7) + mFontSize);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var qBorderSize = dx * 0.05;
var quality = pEvent.GetVar("quality").Value;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var ValueOut =  pEvent.GetVar("ValueOut").Value;

pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Bar(ctx, dx, dy, ValueOut);
pEvent.Methods.Quality(ctx, dx, dy);


]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">220</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ValueOut");Quality</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">230</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HWSigFault_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/HWSigFault_ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("HWSigFault_ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">430</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ManBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">435</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/SetManual");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:21_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ManInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="ManualMode" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[if(pMe.Vars("ManualMode").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}]]>
              </Script>
            </Event>
            <GItem Name="Man" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:21_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Auto" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:22_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">96</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AOutTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">146</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AoutData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="AutoBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">435</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/SetAuto");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ctr" Type="integer">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[var ctr = pMe.Vars("ctr").Value;
var time = 2;

if(pMe.Vars("Value").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("Value").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:22_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Numeric" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">390</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">$.par("fraction")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="fraction" Type="integer">0</Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ValueOut");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="ManualMode" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ManualMode");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ValueOut" Type="double">
                <DStatic Type="double">5</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/ValueOut");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Description" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Note" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AoutData/",$.par("tagName"),"/#vars/Note");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;
pMe.Vars("fraction").Value = pMe.GetPar("fraction");]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("ManualMode").Value)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AoutData/" + pMe.GetPar("tagName") + "/#vars/HMI_Value;");
}
]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;
var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;

if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.1;

grd.addColorStop(0, "white");
grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Mode">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var ManualMode = pEvent.GetVar("ManualMode").Value;
var fFontSize = Pm.Round(dy * 0.5, 1);
var borderLine = dy * 0.1;
var mode = ManualMode ? "M" : "A";

ctx.strokeStyle = "gray";
ctx.fillStyle = "gray";
ctx.font = "bold " + fFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(mode, dx * 0.9, dy - borderLine);
]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.09;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fraction = pEvent.GetVar("fraction").Value;
var ValueOut =  Pm.Round(pEvent.GetVar("ValueOut").Value, 1 / Pm.Pow(10, fraction));
var vFontSize = Pm.Round(dy * 0.8, 1);
var Unit = pEvent.GetVar("Unit").Value;

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(ValueOut + Unit, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.Mode(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_DIn_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:37</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">260</Prop>
        <Prop Name="Dy">360</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[pMe.ViewerTitle = pMe.GetPar("tagName");]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="RootCanvas" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">260</Prop>
          <Prop Name="Dy">360</Prop>
          <Props Name="Params">
            <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            <Prop Name="fraction" Type="par">2</Prop>
          </Props>
          <Prop Name="ToolTip">
            <DStatic></DStatic>
            <DBind Type="GP">
              <Prop Name="Value">.;Vars("Description")</Prop>
            </DBind>
          </Prop>
          <Prop Name="FocusType">0</Prop>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">220</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/W1");Quality</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">230</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AlarmInhibit" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/AlarmInhibit");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;
var AlInhibit = pEvent.GetVar("AlarmInhibit").Value;

if(AlInhibit)
{
    ctx.fillStyle = alInhColor;
}
else if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">290</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ForceBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">295</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">2</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Value").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:19_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="userPriority" Type="integer">
                  <DStatic Type="integer">0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="UseParentVars">1</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || pEvent.GetVar("userPriority").Value < 2)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="UnforceBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">295</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">2</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("Value").Value)
{
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:20_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="userPriority" Type="integer">
                  <DStatic Type="integer">0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="UseParentVars">1</Prop>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(!pEvent.GetParentVar("Value").Value || pEvent.GetVar("userPriority").Value < 2)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = !pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Value");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[if(pMe.Vars("Value").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}]]>
              </Script>
            </Event>
            <GItem Name="On" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:24_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Off" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:14_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">146</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/DinData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ForceInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">68</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Force" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[if(pMe.Vars("Force").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}]]>
              </Script>
            </Event>
            <GItem Name="Force" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:19_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Unforce" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">2</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="FocusType">0</Prop>
              <Prop Name="File">#appres:20_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="StatusArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">130</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">70</Prop>
            <Props Name="LocalProps">
              <Prop Name="Force" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">
              <DStatic>#ffffff</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="GP">
                    <Prop Name="Value">.;Vars("Force")</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">#ffffff</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">#ffffff</Prop>
                </Props>
                <Props Name="Row2">
                  <Prop Name="Var">1</Prop>
                  <Prop Name="Prop">#ffff00</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="text_Status" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">60</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Status", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NormPosArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">70</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="AlDlyArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">130</Prop>
            <Prop Name="Y">200</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">70</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="text_alarmdelay" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zpoždění", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_alarmdelay" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">160</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">80</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/AlarmDelay");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="ForceArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">130</Prop>
            <Prop Name="Y">130</Prop>
            <Prop Name="Dx">120</Prop>
            <Prop Name="Dy">70</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("Force")</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="text_Channel" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">220</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">30</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("HW", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_Force" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">140</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Force", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_NormPos" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">20</Prop>
            <Prop Name="Y">210</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Normal stav", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="statusNormal" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">30</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var status;

var vFontSize = Pm.Round(dy * 0.8, 1);

status = pEvent.GetVar("AnyAl").Value ? "ALARM" : "NORMAL";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(status, dx / 2, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="statusNormPos" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">30</Prop>
            <Prop Name="Y">240</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="NormalState" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/NormalState");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var NormalState;

var vFontSize = Pm.Round(dy * 0.8, 1);

NormalState = pEvent.GetVar("NormalState").Value ? "ON" : "OFF";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(NormalState, dx / 2, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="statusChannel" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">210</Prop>
            <Prop Name="Y">170</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">20</Prop>
            <Props Name="LocalProps">
              <Prop Name="HWSig" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/HWSig");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var HWSig;

var vFontSize = Pm.Round(dy * 0.8, 1);

HWSig = pEvent.GetVar("HWSig").Value ? "ON" : "OFF";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(HWSig, dx / 2, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ForceValBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">140</Prop>
            <Prop Name="Y">160</Prop>
            <Prop Name="Dx">40</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Value");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Visible">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/DinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    pMe.Vars("Value").Value = !pMe.Vars("Value").Value;
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);

]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="Text">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[
var Value = pEvent.GetVar("Value").Value;
var vFontSize = Pm.Round(dy * 0.5, 1);
var text;

text = Value ? "OFF" : "ON";

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(text, dx / 2, vFontSize * 1.3);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Text(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
    <PmObject Name="_AIn_FP" Type="PmPanel">
      <Prop Name="LastEditTime">2018.02.27 12:21:21</Prop>
      <Prop Name="MemberOfLogicalGroups">menu</Prop>
      <Prop Name="Options">fixed:state,size;</Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">client</Prop>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80323">
        <Prop Name="Dx">260</Prop>
        <Prop Name="Dy">500</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
          <Prop Name="tagName" Type="string"></Prop>
        </Props>
        <Props Name="Params">
          <Prop Name="tagName" Type="par">tag</Prop>
          <Prop Name="fraction" Type="par">1</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script>
            <![CDATA[pMe.Vars("tagName").Value = pMe.GetPar("tagName");
pMe.ViewerTitle = pMe.Vars("tagName").Value;]]>
          </Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="RootCanvas" Type="PmiCanvas">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">
            <DStatic>260</DStatic>
            <DBind Type="GP">
              <Prop Name="Value">/;Dx</Prop>
            </DBind>
          </Prop>
          <Prop Name="Dy">
            <DStatic>500</DStatic>
            <DBind Type="GP">
              <Prop Name="Value">/;Dy</Prop>
            </DBind>
          </Prop>
          <Props Name="LocalProps">
            <Prop Name="HH_ALEn" Type="bool">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_ALEn");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="H_ALEn" Type="bool">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_ALEn");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="L_ALEn" Type="bool">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_ALEn");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="LL_ALEn" Type="bool">
              <DStatic>1</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_ALEn");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="HH_En" Type="bool">
              <DStatic>0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_En");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="H_En" Type="bool">
              <DStatic>0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_En");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="L_En" Type="bool">
              <DStatic>0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_En");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="LL_En" Type="bool">
              <DStatic>0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_En");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="AELevelHH" Type="double">
              <DStatic Type="double">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelHH");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="AELevelH" Type="double">
              <DStatic Type="double">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelH");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="AELevelL" Type="double">
              <DStatic Type="double">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelL");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="AELevelLL" Type="double">
              <DStatic Type="double">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelLL");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Min" Type="double">
              <DStatic Type="double">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Min");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Max" Type="double">
              <DStatic Type="double">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Max");Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="AlarmDelay" Type="integer">
              <DStatic Type="integer">0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmDelay");Value</Prop>
              </DBind>
            </Prop>
          </Props>
          <Prop Name="FocusType">0</Prop>
          <Event Name="onRefresh" Type="Pm">
            <Script>
              <![CDATA[
pMe.GetChildByIndex(13).Visible = pMe.Vars("HH_ALEn").Value || pMe.Vars("HH_En").Value;
pMe.GetChildByIndex(14).Visible = pMe.Vars("HH_ALEn").Value || pMe.Vars("HH_En").Value;

pMe.GetChildByIndex(15).Visible = pMe.Vars("H_ALEn").Value || pMe.Vars("H_En").Value;
pMe.GetChildByIndex(16).Visible = pMe.Vars("H_ALEn").Value || pMe.Vars("H_En").Value;

pMe.GetChildByIndex(17).Visible = pMe.Vars("L_ALEn").Value || pMe.Vars("L_En").Value;
pMe.GetChildByIndex(18).Visible = pMe.Vars("L_ALEn").Value || pMe.Vars("L_En").Value;

pMe.GetChildByIndex(19).Visible = pMe.Vars("LL_ALEn").Value || pMe.Vars("LL_En").Value;
pMe.GetChildByIndex(20).Visible = pMe.Vars("LL_ALEn").Value || pMe.Vars("LL_En").Value;]]>
            </Script>
          </Event>
          <GItem Name="Bargraph" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">110</Prop>
            <Prop Name="Dx">80</Prop>
            <Prop Name="Dy">380</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="Min" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Min");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Max" Type="double">
                <DStatic Type="double">100</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Max");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Value" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="barGraphColor1" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/barGraphColor1");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="barGraphColor2" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/barGraphColor2");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AELevelHH" Type="double">
                <DStatic Type="double">90</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelHH");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AELevelH" Type="double">
                <DStatic Type="double">70</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelH");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AELevelL" Type="double">
                <DStatic Type="double">15</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelL");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AELevelLL" Type="double">
                <DStatic Type="double">13</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelLL");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HH_ALEn" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_ALEn");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="H_ALEn" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_ALEn");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="L_ALEn" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_ALEn");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="LL_ALEn" Type="bool">
                <DStatic>1</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_ALEn");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HH_En" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_En");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="H_En" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_En");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="L_En" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_En");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="LL_En" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_En");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AlarmHH" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmHH");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AlarmH" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmH");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AlarmL" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmL");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AlarmLL" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmLL");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLineX = dx * 0.035;
var borderLineY = dy * 0.035 / 3.5;

ctx.fillStyle = "#c0c0c0";
ctx.fillRect(borderLineX, borderLineY, dx - 2 * borderLineX, dy - 2 * borderLineY);]]>
                </Script>
              </Method>
              <Method Name="Bar">
                <Prop Name="Params">ctx,dx,dy,Value,Min,Max</Prop>
                <Script>
                  <![CDATA[//background
var barSpaceX = dx * 0.25;
var barSpaceY = dy * 0.25 / 3.5;

var barGraphColor1 = pEvent.GetVar("barGraphColor1").Value;
var barGraphColor2 = pEvent.GetVar("barGraphColor2").Value;

ctx.fillStyle = "white";
ctx.fillRect(barSpaceX, barSpaceY, dx - 2 * barSpaceX, dy * 0.7);

//value
var vBarSpaceX = dx * 0.28;
var vBarSpaceY = dy * 0.28 / 3.5;
var valPerc = Pm.Round((Value - Min) / ((Max - Min) / 1), 0.01);
valPerc = valPerc > 1 ? 1 : valPerc;

var invPerc = 1 - valPerc;

var grd2 = ctx.createLinearGradient(vBarSpaceX, vBarSpaceY + invPerc*dy * 0.7, barSpaceX + dx - 2 * barSpaceX, barSpaceY + invPerc*dy * 0.7 + valPerc*dy * 0.7);
grd2.addColorStop(0, barGraphColor1);
grd2.addColorStop(1, barGraphColor2);

ctx.fillStyle = grd2;
ctx.fillRect(vBarSpaceX, vBarSpaceY + invPerc*dy * 0.7, dx - 2 * vBarSpaceX, valPerc*dy * 0.7 - 2*(vBarSpaceY - barSpaceY))

//min, max
var mFontSize = Pm.Round(dy * 0.0375, 1) > 13 ? 13 : Pm.Round(dy * 0.0375, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = mFontSize + "px arial";
ctx.textAlign = "center";

ctx.fillText(Max, dx/2, barSpaceY - 0.4*mFontSize);
ctx.fillText(Min, dx/2, barSpaceY + (dy * 0.7) + mFontSize);]]>
                </Script>
              </Method>
              <Method Name="Limit">
                <Prop Name="Params">ctx,dx,dy,Value,Min,Max</Prop>
                <Script>
                  <![CDATA[//init
var HHLevel = pEvent.GetVar("AELevelHH").Value;
var HLevel = pEvent.GetVar("AELevelH").Value;
var LLevel = pEvent.GetVar("AELevelL").Value;
var LLLevel = pEvent.GetVar("AELevelLL").Value;

var HH_ALEn = pEvent.GetVar("HH_ALEn").Value;
var H_ALEn = pEvent.GetVar("H_ALEn").Value;
var L_ALEn = pEvent.GetVar("L_ALEn").Value;
var LL_ALEn = pEvent.GetVar("LL_ALEn").Value;

var HH_En = pEvent.GetVar("HH_En").Value;
var H_En = pEvent.GetVar("H_En").Value;
var L_En = pEvent.GetVar("L_En").Value;
var LL_En = pEvent.GetVar("LL_En").Value;

var AlarmHH = pEvent.GetVar("AlarmHH").Value;
var AlarmH = pEvent.GetVar("AlarmH").Value;
var AlarmL = pEvent.GetVar("AlarmL").Value;
var AlarmLL = pEvent.GetVar("AlarmLL").Value;

var HHColor = "rgba(255,0,0,0.4)";
var HColor = "rgba(255,125,125,0.3)";

var barSpaceY = dy * 0.25 / 3.5;
var vBarSpaceY = dy * 0.28 / 3.5;

var limitLine = 2;

//HH Limit
if(HH_ALEn || HH_En)
{
  var HHx = dx * 0.2;
  var HHy = dy * 0.28 / 3.5;
  
  var HHPerc = Pm.Round((HHLevel - Min) / ((Max - Min) / 1), 0.01);
  HHPerc = HHPerc > 1 ? 1 : HHPerc;
  var invHHPerc = 1 - HHPerc;
  
  ctx.fillStyle = (HH_ALEn && AlarmHH) ? HHColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(HHx, HHy, dx - 2 * HHx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHHPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(HHx, HHy + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHHPerc, dx - 2 * HHx, limitLine);
}

//H Limit
if(H_ALEn || H_En)
{
  var Hx = dx * 0.2;
  var Hy = dy * 0.28 / 3.5;
  
  var HPerc = Pm.Round((HLevel - Min) / ((Max - Min) / 1), 0.01);
  HPerc = HPerc > 1 ? 1 : HPerc;
  var invHPerc = 1 - HPerc;
  
  ctx.fillStyle = (H_ALEn && AlarmH) ? HColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(Hx, Hy, dx - 2 * Hx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(Hx, Hy + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHPerc, dx - 2 * Hx, limitLine);
}

//L Limit
if(L_ALEn || L_En)
{
  var LPerc = Pm.Round((LLevel - Min) / ((Max - Min) / 1), 0.01);
  LPerc = LPerc > 1 ? 1 : LPerc;
  var invLPerc = 1 - LPerc;
  
  var Lx = dx * 0.2;
  var Ly = (dy * 0.28 / 3.5) + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invLPerc;
  
  ctx.fillStyle = (L_ALEn && AlarmL) ? HColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(Lx, Ly, dx - 2 * Lx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*LPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(Lx, Ly, dx - 2 * Lx, limitLine);
}

//LL Limit
if(LL_ALEn || LL_En)
{
  var LLPerc = Pm.Round((LLLevel - Min) / ((Max - Min) / 1), 0.01);
  LLPerc = LLPerc > 1 ? 1 : LLPerc;
  var invLLPerc = 1 - LLPerc;
  
  var LLx = dx * 0.2;
  var LLy = (dy * 0.28 / 3.5) + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invLLPerc;
  
  ctx.fillStyle = (LL_ALEn && AlarmLL) ? HHColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(LLx, LLy, dx - 2 * LLx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*LLPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(LLx, LLy, dx - 2 * LLx, limitLine);
}]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dx * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var blink = pEvent.GetVar("blink").Value;

var Min = pEvent.GetVar("Min").Value;
var Max = pEvent.GetVar("Max").Value;
var Fraction = 2;
var Value =  Pm.Round(pEvent.GetVar("Value").Value, 1 / Pm.Pow(10, Fraction));

pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Bar(ctx, dx, dy, Value, Min, Max);
pEvent.Methods.Limit(ctx, dx, dy,Value, Min, Max);
pEvent.Methods.Quality(ctx, dx, dy);


]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Numeric" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">110</Prop>
            <Prop Name="Y">390</Prop>
            <Prop Name="Dx">140</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">$.par("fraction")</Prop>
            </Props>
            <Props Name="LocalProps">
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Quality</Prop>
                </DBind>
              </Prop>
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="Force" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="fraction" Type="integer">0</Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyInh" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyInh");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Value" Type="double">
                <DStatic Type="double">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="Unit" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Unit</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="UseParentVars">1</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;

pMe.Vars("fraction").Value = pMe.GetPar("fraction")]]>
              </Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("Force").Value)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_SP", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AinData/" + pMe.GetPar("tagName") + "/#vars/Value;");
}]]>
              </Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;
var AlInhibit = pEvent.GetVar("AnyInh").Value;

if(AlInhibit)
{
    ctx.fillStyle = alInhColor;
}
else if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var grd = ctx.createLinearGradient(0, 0, dx, dy);
var borderLine = dy * 0.08;

if(pEvent.GetVar("Force").Value)
{
    grd.addColorStop(0, "yellow");
}
else
{
    grd.addColorStop(0, "white");
}

grd.addColorStop(1, "#d0d0d0");
ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Force">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Force = pEvent.GetVar("Force").Value;
var fFontSize = Pm.Round(dy * 0.5, 1);
var borderLine = dy * 0.1;

if(Force)
{
    ctx.strokeStyle = "gray";
    ctx.fillStyle = "gray";
    ctx.font = "bold " + fFontSize + "px arial";
    ctx.textAlign = "center";
    ctx.fillText("F", dx * 0.9, dy - borderLine);
}
]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.09;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="Value">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var fraction = pEvent.GetVar("fraction").Value;
var Value =  Pm.Round(pEvent.GetVar("Value").Value, 1 / Pm.Pow(10, fraction));
var vFontSize = Pm.Round(dy * 0.8, 1);
var Unit = pEvent.GetVar("Unit").Value;

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value + Unit, dx/2, vFontSize);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Value(ctx, dx, dy);
pEvent.Methods.Force(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Description" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">0</Prop>
            <Prop Name="Dx">220</Prop>
            <Prop Name="Dy">40</Prop>
            <Props Name="LocalProps">
              <Prop Name="Description" Type="string">
                <DStatic Type="string">description</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Description");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="quality" Type="integer">
                <DStatic Type="integer">0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Quality</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="Description">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var Description =  pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.4, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Description, dx/2, vFontSize * 1.5);]]>
                </Script>
              </Method>
              <Method Name="Quality">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="Alarm" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">230</Prop>
            <Prop Name="Y">10</Prop>
            <Prop Name="Dx">20</Prop>
            <Prop Name="Dy">30</Prop>
            <Props Name="Params">
              <Prop Name="tagName" Type="par">$.par("tagName")</Prop>
              <Prop Name="fraction" Type="par">2</Prop>
            </Props>
            <Prop Name="ToolTip">
              <DStatic></DStatic>
              <DBind Type="GP">
                <Prop Name="Value">.;Vars("Description")</Prop>
              </DBind>
            </Prop>
            <Props Name="LocalProps">
              <Prop Name="blink" Type="bool">0</Prop>
              <Prop Name="alUnackColor" Type="string">
                <DStatic Type="string">(0,"/Z45AppCore/Colors/#var</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alActColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alNormalColor" Type="string">
                <DStatic Type="string">black</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="alInhColor" Type="string">
                <DStatic Type="string"></DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyAl" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="AnyInh" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyInh");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HH_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="H_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="L_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="LL_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_ALAck");Value</Prop>
                </DBind>
              </Prop>
              <Prop Name="HWSigFault_ALAck" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HWSigFault_ALAck");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script><![CDATA[pMe.Vars("blink").Value = !pMe.Vars("blink").Value;]]></Script>
            </Event>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <Event Name="onMenuSelect" Type="Pm">
              <Script>
                <![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("HH_ALAck").Value = false;
        pMe.Vars("H_ALAck").Value = false;
        pMe.Vars("L_ALAck").Value = false;
        pMe.Vars("LL_ALAck").Value = false;
        pMe.Vars("HWSigFault_ALAck").Value = false;
        break;
}]]>
              </Script>
            </Event>
            <Event Name="onMenuFill" Type="Pm">
              <Script><![CDATA[pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
            </Event>
            <Methods Name="Canvas">
              <Method Name="Alarm">
                <Prop Name="Params">ctx,dx,dy,blink</Prop>
                <Script>
                  <![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;
var AlInhibit = pEvent.GetVar("AnyInh").Value;

if(AlInhibit)
{
    ctx.fillStyle = alInhColor;
}
else if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="ControlBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">430</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ForceBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">435</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">2</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && !pMe.Vars("Value").Value)
{
    pMe.Vars("Value").Value = true;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:19_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="userPriority" Type="integer">
                  <DStatic Type="integer">0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(pEvent.GetVar("Value").Value || pEvent.GetVar("userPriority").Value < 2)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="IndicationBtnArea" Type="PmiPanel">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">10</Prop>
            <Prop Name="Y">50</Prop>
            <Prop Name="Dx">240</Prop>
            <Prop Name="Dy">60</Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#ffffff</Prop>
            <Prop Name="BorderWidth">2</Prop>
            <Prop Name="BorderType">1</Prop>
            <Prop Name="BorderContrast">60</Prop>
            <Prop Name="GradientEnabled">1</Prop>
            <Prop Name="GradientContrast">15</Prop>
            <Prop Name="GradientDirection">0</Prop>
          </GItem>
          <GItem Name="ForceInd" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">15</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Force" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="GP">
                  <Prop Name="Value">..;Vars("Force")</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="DrawBg">0</Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onRefresh" Type="Pm">
              <Script>
                <![CDATA[if(pMe.Vars("Force").Value)
{
    pMe.GetChildByIndex(0).Visible = true;
    pMe.GetChildByIndex(1).Visible = false;
}
else
{
    pMe.GetChildByIndex(0).Visible = false;
    pMe.GetChildByIndex(1).Visible = true;
}]]>
              </Script>
            </Event>
            <GItem Name="Force" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="Visible">0</Prop>
              <Prop Name="File">#appres:19_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Unforce" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:20_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script><![CDATA[]]></Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="TrendBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">96</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AInTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:10_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="NoteBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">146</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Graphics/_Note", "target:_blank;" + sPos, "par:tagPath=/Z45AppCore/AinData/" + pMe.GetPar("tagName") + "/#vars/Note;");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:12_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="EventBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">196</Prop>
            <Prop Name="Y">55</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">0</Prop>
            </Props>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:09_32x32.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="text_alarmdelay" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">90</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("Zpoždění", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_alarmdelay" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">180</Prop>
            <Prop Name="Y">250</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("AlarmDelay")</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
          </GItem>
          <GItem Name="text_HH" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">90</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("HH Limit", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_HH" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">180</Prop>
            <Prop Name="Y">150</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("AELevelHH")</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
            <Event Name="onDataEditAccept" Type="Pm">
              <Script>
                <![CDATA[var HH = pMe.Parent.Vars("HH_ALEn").Value || pMe.Parent.Vars("HH_En").Value;
var H = pMe.Parent.Vars("H_ALEn").Value || pMe.Parent.Vars("H_En").Value;
var L = pMe.Parent.Vars("L_ALEn").Value || pMe.Parent.Vars("L_En").Value;
var LL = pMe.Parent.Vars("LL_ALEn").Value || pMe.Parent.Vars("LL_En").Value;

var AELevelHH = pMe.Parent.Vars("AELevelHH").Value;
var AELevelH = pMe.Parent.Vars("AELevelH").Value;
var AELevelL = pMe.Parent.Vars("AELevelL").Value;
var AELevelLL = pMe.Parent.Vars("AELevelLL").Value;

var Max = pMe.Parent.Vars("Max").Value;
var Min = pMe.Parent.Vars("Min").Value;

//updir check
pMe.Value = (pMe.Value > Max) ? Max : pMe.Value;

//downdir check
pMe.Value = (pMe.Value < Min) ? Min : pMe.Value;
pMe.Value = LL && (pMe.Value < AELevelLL) ? AELevelLL : pMe.Value;
pMe.Value = L && (pMe.Value < AELevelL) ? AELevelL : pMe.Value;
pMe.Value = H && (pMe.Value < AELevelH) ? AELevelH : pMe.Value;]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="text_H" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">90</Prop>
            <Prop Name="Y">180</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("H Limit", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_H" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">180</Prop>
            <Prop Name="Y">180</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("AELevelH")</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
            <Event Name="onDataEditAccept" Type="Pm">
              <Script>
                <![CDATA[var HH = pMe.Parent.Vars("HH_ALEn").Value || pMe.Parent.Vars("HH_En").Value;
var H = pMe.Parent.Vars("H_ALEn").Value || pMe.Parent.Vars("H_En").Value;
var L = pMe.Parent.Vars("L_ALEn").Value || pMe.Parent.Vars("L_En").Value;
var LL = pMe.Parent.Vars("LL_ALEn").Value || pMe.Parent.Vars("LL_En").Value;

var AELevelHH = pMe.Parent.Vars("AELevelHH").Value;
var AELevelH = pMe.Parent.Vars("AELevelH").Value;
var AELevelL = pMe.Parent.Vars("AELevelL").Value;
var AELevelLL = pMe.Parent.Vars("AELevelLL").Value;

var Max = pMe.Parent.Vars("Max").Value;
var Min = pMe.Parent.Vars("Min").Value;

//updir check
pMe.Value = (pMe.Value > Max) ? Max : pMe.Value;
pMe.Value = HH && (pMe.Value > AELevelHH) ? AELevelHH : pMe.Value;

//downdir check
pMe.Value = (pMe.Value < Min) ? Min : pMe.Value;
pMe.Value = LL && (pMe.Value < AELevelLL) ? AELevelLL : pMe.Value;
pMe.Value = L && (pMe.Value < AELevelL) ? AELevelL : pMe.Value;
]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="text_L" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">90</Prop>
            <Prop Name="Y">330</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("L Limit", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_L" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">180</Prop>
            <Prop Name="Y">330</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("AELevelL")</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
            <Event Name="onDataEditAccept" Type="Pm">
              <Script>
                <![CDATA[var HH = pMe.Parent.Vars("HH_ALEn").Value || pMe.Parent.Vars("HH_En").Value;
var H = pMe.Parent.Vars("H_ALEn").Value || pMe.Parent.Vars("H_En").Value;
var L = pMe.Parent.Vars("L_ALEn").Value || pMe.Parent.Vars("L_En").Value;
var LL = pMe.Parent.Vars("LL_ALEn").Value || pMe.Parent.Vars("LL_En").Value;

var AELevelHH = pMe.Parent.Vars("AELevelHH").Value;
var AELevelH = pMe.Parent.Vars("AELevelH").Value;
var AELevelL = pMe.Parent.Vars("AELevelL").Value;
var AELevelLL = pMe.Parent.Vars("AELevelLL").Value;

var Max = pMe.Parent.Vars("Max").Value;
var Min = pMe.Parent.Vars("Min").Value;

//updir check
pMe.Value = (pMe.Value > Max) ? Max : pMe.Value;
pMe.Value = HH && (pMe.Value > AELevelHH) ? AELevelHH : pMe.Value;
pMe.Value = H && (pMe.Value > AELevelH) ? AELevelH : pMe.Value;

//downdir check
pMe.Value = (pMe.Value < Min) ? Min : pMe.Value;
pMe.Value = LL && (pMe.Value < AELevelLL) ? AELevelLL : pMe.Value;

]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="text_LL" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">90</Prop>
            <Prop Name="Y">360</Prop>
            <Prop Name="Dx">90</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="FocusType">0</Prop>
            <Methods Name="Canvas">
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

var vFontSize = Pm.Round(dy * 0.8, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText("LL Limit", 0, vFontSize);]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <GItem Name="edit_LL" Type="PmiWEdit">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">180</Prop>
            <Prop Name="Y">360</Prop>
            <Prop Name="Dx">70</Prop>
            <Prop Name="Dy">20</Prop>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">1</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Prop Name="ColorItem">#f0f0f0</Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="Value">
              <DStatic>50.5</DStatic>
              <DBind Type="GP">
                <Prop Name="Value">..;Vars("AELevelLL")</Prop>
              </DBind>
            </Prop>
            <Prop Name="ValueDataType">2</Prop>
            <Prop Name="ValueMin">0;0</Prop>
            <Prop Name="ValueMax">100;0</Prop>
            <Prop Name="ValueFormatType">0</Prop>
            <Prop Name="ValueFormat">%.2f</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AttrEdit">4</Prop>
            <Prop Name="AttrEditEx">7</Prop>
            <Prop Name="WndBorderType">3</Prop>
            <Event Name="onDataEditAccept" Type="Pm">
              <Script>
                <![CDATA[var HH = pMe.Parent.Vars("HH_ALEn").Value || pMe.Parent.Vars("HH_En").Value;
var H = pMe.Parent.Vars("H_ALEn").Value || pMe.Parent.Vars("H_En").Value;
var L = pMe.Parent.Vars("L_ALEn").Value || pMe.Parent.Vars("L_En").Value;
var LL = pMe.Parent.Vars("LL_ALEn").Value || pMe.Parent.Vars("LL_En").Value;

var AELevelHH = pMe.Parent.Vars("AELevelHH").Value;
var AELevelH = pMe.Parent.Vars("AELevelH").Value;
var AELevelL = pMe.Parent.Vars("AELevelL").Value;
var AELevelLL = pMe.Parent.Vars("AELevelLL").Value;

var Max = pMe.Parent.Vars("Max").Value;
var Min = pMe.Parent.Vars("Min").Value;

//updir check
pMe.Value = (pMe.Value > Max) ? Max : pMe.Value;
pMe.Value = HH && (pMe.Value > AELevelHH) ? AELevelHH : pMe.Value;
pMe.Value = H && (pMe.Value > AELevelH) ? AELevelH : pMe.Value;
pMe.Value = L && (pMe.Value > AELevelL) ? AELevelL : pMe.Value;

//downdir check
pMe.Value = (pMe.Value < Min) ? Min : pMe.Value;


]]>
              </Script>
            </Event>
          </GItem>
          <GItem Name="UnforceBtn" Type="PmiCanvas">
            <Prop Name="Attr0Dt">;24960</Prop>
            <Prop Name="X">65</Prop>
            <Prop Name="Y">435</Prop>
            <Prop Name="Dx">50</Prop>
            <Prop Name="Dy">50</Prop>
            <Props Name="LocalProps">
              <Prop Name="Value" Type="bool">
                <DStatic>0</DStatic>
                <DBind Type="PP">
                  <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                </DBind>
              </Prop>
            </Props>
            <Prop Name="Enabled">
              <DStatic>1</DStatic>
              <DBind Type="T">
                <Prop Name="Var">
                  <DStatic>0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Props Name="Row0">
                  <Prop Name="Var">0</Prop>
                  <Prop Name="Prop">0</Prop>
                </Props>
                <Props Name="Row1">
                  <Prop Name="Var">2</Prop>
                </Props>
              </DBind>
            </Prop>
            <Prop Name="FocusType">0</Prop>
            <Event Name="onMousePress" Type="Pm">
              <Script>
                <![CDATA[if(pEvent.Action === 0 && pMe.Vars("Value").Value)
{
    pMe.Vars("Value").Value = false;
}]]>
              </Script>
            </Event>
            <GItem Name="RImg" Type="PmiRasterImage">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">5</Prop>
              <Prop Name="Y">5</Prop>
              <Prop Name="Dx">40</Prop>
              <Prop Name="Dy">40</Prop>
              <Prop Name="File">#appres:20_64x64.png</Prop>
              <Prop Name="CropX">0</Prop>
              <Prop Name="CropY">0</Prop>
              <Prop Name="CropDx">32</Prop>
              <Prop Name="CropDy">32</Prop>
              <Prop Name="TranspColorEnabled">1</Prop>
              <Prop Name="TranspColor">#ffffff</Prop>
              <Prop Name="ConstPagesRatio">0</Prop>
            </GItem>
            <GItem Name="Canvas" Type="PmiCanvas">
              <Prop Name="Attr0Dt">;24960</Prop>
              <Prop Name="X">0</Prop>
              <Prop Name="Y">0</Prop>
              <Prop Name="Dx">50</Prop>
              <Prop Name="Dy">50</Prop>
              <Props Name="LocalProps">
                <Prop Name="userPriority" Type="integer">
                  <DStatic Type="integer">0</DStatic>
                  <DBind Type="UP">
                    <Prop Name="Value">Priority</Prop>
                  </DBind>
                </Prop>
                <Prop Name="Value" Type="bool">
                  <DStatic>0</DStatic>
                  <DBind Type="PP">
                    <Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
                  </DBind>
                </Prop>
              </Props>
              <Methods Name="Canvas">
                <Method Name="onDraw">
                  <Prop Name="Params"></Prop>
                  <Script>
                    <![CDATA[var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

if(!pEvent.GetVar("Value").Value || pEvent.GetVar("userPriority").Value < 2)
{
    ctx.fillStyle = "rgba(192, 192, 192, 0.6)";
    ctx.fillRect(0, 0, dx, dy);
}]]>
                  </Script>
                </Method>
              </Methods>
            </GItem>
            <Methods Name="Canvas">
              <Method Name="Background">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);

grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.fillStyle = grd;
ctx.fillRect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);]]>
                </Script>
              </Method>
              <Method Name="Border">
                <Prop Name="Params">ctx,dx,dy</Prop>
                <Script>
                  <![CDATA[var borderLine = dy * 0.075;
var Value = !pEvent.GetVar("Value").Value;

ctx.beginPath();
ctx.strokeStyle = "#686868";
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.rect(0, 0, dx, dy);
ctx.fill();
ctx.stroke();
ctx.closePath();

ctx.fillStyle = Value ? "white" : "#686868";
ctx.fillRect(borderLine, borderLine, dx - borderLine, dy - borderLine);

ctx.strokeStyle = Value ? "white" : "#686868";

ctx.beginPath();
ctx.moveTo(0, dy);
ctx.lineTo(borderLine, dy - borderLine);
ctx.lineTo(borderLine, dy);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(dx, 0);
ctx.lineTo(dx - borderLine, borderLine);
ctx.lineTo(dx, borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();
]]>
                </Script>
              </Method>
              <Method Name="onDraw">
                <Prop Name="Params"></Prop>
                <Script>
                  <![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Border(ctx, dx, dy);
pEvent.Methods.Background(ctx, dx, dy);
]]>
                </Script>
              </Method>
            </Methods>
          </GItem>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script><![CDATA[]]></Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
    </PmObject>
  </PmObjects>
</PmObject>