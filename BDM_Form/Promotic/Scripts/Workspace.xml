<?xml version="1.0" encoding="utf-8" ?>
<PmObject Name="Workspace" Type="PmWorkspace">
  <Prop Name="DisabledInRt">0</Prop>
  <Prop Name="LastEditTime">2018.10.04 11:59:27</Prop>
  <Prop Name="MacroPars"></Prop>
  <Prop Name="MemberOfLogicalGroups"></Prop>
  <Prop Name="ReferenceType">0</Prop>
  <Prop Name="ReferenceName"></Prop>
  <Events Name="PmEvents">
    <Event Name="onStart" Type="Pm">
      <Script><![CDATA[]]></Script>
    </Event>
    <Event Name="onStop" Type="Pm">
      <Script><![CDATA[]]></Script>
    </Event>
  </Events>
  <Methods/>
  <Prop Name="MainWindow">1</Prop>
  <Prop Name="WindowState">Maximized</Prop>
  <Prop Name="Caption">0</Prop>
  <Prop Name="CaptionText"></Prop>
  <Prop Name="FrameParams"></Prop>
  <Prop Name="DefaultFrame">main</Prop>
  <Props Name="MainFrame">
    <Prop Name="Layout">Vertical</Prop>
    <Prop Name="Border">None</Prop>
    <Prop Name="Size">*</Prop>
    <Prop Name="Extra"></Prop>
    <Prop Name="Src"></Prop>
    <Prop Name="Params"></Prop>
    <List Name="Frames">
      <Props Name="toolbar">
        <Prop Name="Layout">Simple</Prop>
        <Prop Name="Border">None</Prop>
        <Prop Name="Size">20px</Prop>
        <Prop Name="Extra"></Prop>
        <Prop Name="Src">/Z45AppCore/Workspace/Toolbar</Prop>
        <Prop Name="Params"></Prop>
        <List Name="Frames"/>
      </Props>
      <Props Name="menu">
        <Prop Name="Layout">Simple</Prop>
        <Prop Name="Border">None</Prop>
        <Prop Name="Size">80px</Prop>
        <Prop Name="Extra"></Prop>
        <Prop Name="Src">/Z45AppCore/Workspace/Menu</Prop>
        <Prop Name="Params"></Prop>
        <List Name="Frames"/>
      </Props>
      <Props Name="main">
        <Prop Name="Layout">Simple</Prop>
        <Prop Name="Border">None</Prop>
        <Prop Name="Size">*</Prop>
        <Prop Name="Extra"></Prop>
        <Prop Name="Src"></Prop>
        <Prop Name="Params"></Prop>
        <List Name="Frames"/>
      </Props>
    </List>
  </Props>
  <Props Name="WebServer">
    <Prop Name="Enable">1</Prop>
    <Prop Name="Id">$.expr("pMe.Name")</Prop>
    <Prop Name="Server">/Z45AppCore/Web</Prop>
    <Prop Name="AddToList">1</Prop>
    <Prop Name="RefreshErrMode">0</Prop>
  </Props>
  <Props Name="AccessList">
    <Prop Name="Style">0</Prop>
    <List Name="Actions">
      <Props Name="WebRead">
        <Prop Name="Users">$OPER</Prop>
      </Props>
    </List>
  </Props>
  <PmObjects>
    <PmObject Name="Menu" Type="PmPanel">
      <Prop Name="DisabledInRt">0</Prop>
      <Prop Name="LastEditTime">2018.10.04 11:59:27</Prop>
      <Prop Name="MacroPars"></Prop>
      <Prop Name="MemberOfLogicalGroups"></Prop>
      <Prop Name="ReferenceType">0</Prop>
      <Prop Name="ReferenceName"></Prop>
      <Events Name="PmEvents">
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onOpen" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onClose" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onFocusIn" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onFocusOut" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onKeyPress" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onMousePress" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
      </Events>
      <Methods/>
      <Prop Name="Title"></Prop>
      <Prop Name="Help"></Prop>
      <Prop Name="Options"></Prop>
      <Prop Name="Params"></Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">full</Prop>
      <Prop Name="MultiView">0</Prop>
      <Prop Name="KeyCodeOpen">0</Prop>
      <Props Name="AccessList">
        <Prop Name="Style">0</Prop>
        <List Name="Actions">
          <Props Name="PanelClose">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="PanelOpen">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="WebMethods">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="WebRead">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="WebWrite">
            <Prop Name="Users">$OPER</Prop>
          </Props>
        </List>
      </Props>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshErrMode">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80327">
        <Prop Name="Dx">1920</Prop>
        <Prop Name="Dy">80</Prop>
        <GItem Name="menuBar" Type="PmiCanvas">
          <Prop Name="Dx">1920</Prop>
          <Prop Name="Dy">80</Prop>
          <Prop Name="FocusType">0</Prop>
          <Props Name="LocalProps">
            <Prop Name="titles" Type="string"></Prop>
            <Prop Name="pathes" Type="string"></Prop>
            <Prop Name="names" Type="string"></Prop>
            <Prop Name="subTitles" Type="string"></Prop>
            <Prop Name="subPathes" Type="string"></Prop>
            <Prop Name="titlesWidth" Type="double">0</Prop>
            <Prop Name="subTitlesWidth" Type="double">0</Prop>
            <Prop Name="selMain" Type="integer">1000</Prop>
            <Prop Name="selSub" Type="integer">1000</Prop>
            <Prop Name="blink" Type="bool">0</Prop>
            <Prop Name="DefaultPanel" Type="integer">0</Prop>
            <Prop Name="Stripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/Menu;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="AStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/A;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="BStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/B;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="CStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/C;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="DStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/D;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="EStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/E;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="FStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/F;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="GStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/G;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="HStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/H;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="IStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/I;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="JStripes" Type="string">
              <DStatic Type="string"></DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/AlarmStripes/#vars/J;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Alphabet" Type="string">A;B;C;D;E;F;G;H;I;J;</Prop>
          </Props>
          <Event Name="onStart" Type="Pm">
            <Script>
              <![CDATA[
pMe.Methods.Init();
]]>
            </Script>
          </Event>
          <Event Name="onRefresh" Type="Pm">
            <Script>
              <![CDATA[
//generate blink on refresh event
pMe.Vars("blink").Value = !pMe.Vars("blink").Value;
]]>
            </Script>
          </Event>
          <Event Name="onMousePress" Type="Pm">
            <Script>
              <![CDATA[

//left click release on main menu
if (pEvent.Action === 0 && pEvent.Y < pMe.Dy/2)
{

    //Init
    pMe.Vars("subTitles").Value = "";
    pMe.Vars("subPathes").Value = "";
    
    var width = pMe.Vars("titlesWidth").Value;
    var sum1 = 0;
    var elementMain = 0;
    
    do
    {
        sum1 = sum1 + width;
        elementMain++;
    }while(sum1 < pEvent.X)
    
    var aPathes = Pm.StringSplit(pMe.Vars("pathes").Value, ";","empty:1;");
    var aNames = Pm.StringSplit(pMe.Vars("names").Value, ";","empty:1;");
    
    //Open panel
    
    if(Pm.StringSub(aPathes.GetItem(elementMain-1), 0, 1) === "/")
    {
        pMe.PmPanel.OpenView(aPathes.GetItem(elementMain-1), "target:main");
        var name = aNames.GetItem(elementMain-1);
        
        //Set pointer to selected panel
        pMe.Vars("selMain").Value = elementMain - 1;
        pMe.Vars("selSub").Value = 1000;
        
        //get subpathes and subtitles
        var ctr = 0;
        var aSubPathes = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:path;");
        var aSubTitles = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:title;");
        
        for(var a = 1; a < 16; a++)
        {
            for(var i = 0; i < aSubPathes.GetSize(2); i++)
            {
                if(Pm.StringFind(aSubPathes.GetItem(0,i), "Z45_Panels/" + Pm.StringSub(name, 0, 1) + a, 0) > 0)
                {
                    //pMe.Vars("subTitles").Value = pMe.Vars("subTitles").Value + Pm.StringSub(aSubPathes.GetItem(0,i), 12) + ";";
                    pMe.Vars("subTitles").Value = pMe.Vars("subTitles").Value + aSubTitles.GetItem(0,i) + ";";
                    pMe.Vars("subPathes").Value = pMe.Vars("subPathes").Value + aSubPathes.GetItem(0,i) + ";";
                    ctr++;
                }
            }
        }
        
        pMe.Vars("subTitlesWidth").Value = ctr > 6 ? pMe.Dx / ctr : pMe.Dx / 6;
    }
}

//left click release on sub menu
if (pEvent.Action === 0 && pEvent.Y > pMe.Dy/2)
{
    var aSubPathes = Pm.StringSplit(pMe.Vars("subPathes").Value, ";","empty:1;");
    var subWidth = pMe.Vars("subTitlesWidth").Value;
    var sum2 = 0;
    var elementSub = 0;
    
    do
    {
        sum2 = sum2 + subWidth;
        elementSub++;
    }while(sum2 < pEvent.X)
    
    if(Pm.StringSub(aSubPathes.GetItem(elementSub-1), 0, 1) === "/")
    {
        pMe.PmPanel.OpenView(aSubPathes.GetItem(elementSub-1), "target:main");
    
        //Set pointer to selected panel
        pMe.Vars("selSub").Value = elementSub - 1;
    }
}

]]>
            </Script>
          </Event>
          <Methods>
            <Method Name="Init">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[

//Initialization
var ctr = 0;
pMe.Vars("titles").Value = "";
pMe.Vars("pathes").Value = "";

var aAlphabet = Pm.StringSplit(pMe.Vars("Alphabet").Value, ";","empty:1;");

//get pathes of main panels and sub panels
var aPathes = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:path;");
var aTitles = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:title;");

for(var a = 0; a < aAlphabet.GetSize(1); a++)
{
    for(var i = 0; i < aPathes.GetSize(2); i++)
    {
        if(Pm.StringFind(aPathes.GetItem(0,i), "Z45_Panels/" + aAlphabet.GetItem(a) + "0", 0) > 0)
        {
            pMe.Vars("titles").Value = pMe.Vars("titles").Value + aTitles.GetItem(0,i) + ";";
            pMe.Vars("names").Value = pMe.Vars("names").Value + Pm.StringSub(aPathes.GetItem(0,i), 12) + ";";
            pMe.Vars("pathes").Value = pMe.Vars("pathes").Value + aPathes.GetItem(0,i) + ";";
            pMe.Vars("Stripes").Value = pMe.Vars("Stripes").Value + "0;";
            ctr++;
        }
    }
}

pMe.Vars("titlesWidth").Value = ctr > 6 ? (pMe.Dx / ctr) : (pMe.Dx / 6);

//init substripes
var aSubTitles = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:title;");

for(var i = 0; i < aAlphabet.GetSize(1); i++)
{
    for(var j = 0; j < aSubTitles.GetSize(2); j++)
    {
        if(Pm.StringSub(aSubTitles.GetItem(0,j), 0, 1) === aAlphabet.GetItem(i) && Pm.StringSub(aSubTitles.GetItem(0,j), 1, 2) !== "0" && aSubTitles.GetItem(0,j) !== "Název")
        {
            pMe.Vars(aAlphabet.GetItem(i) + "Stripes").Value = pMe.Vars(aAlphabet.GetItem(i) + "Stripes").Value + "0;";
        }
    }
}





//set default page open on start

var aPathes = Pm.StringSplit(pMe.Vars("pathes").Value, ";","empty:1;");
var aNames = Pm.StringSplit(pMe.Vars("names").Value, ";","empty:1;");

//Open panel
pMe.PmPanel.OpenView(aPathes.GetItem(pMe.GetPar("DefaultPanel")), "target:main");
var name = aNames.GetItem(0);

//Set pointer to selected panel
pMe.Vars("selMain").Value = pMe.GetPar("DefaultPanel");
pMe.Vars("selSub").Value = 1000;

//get subpathes and subtitles
var ctr = 0;
var aSubPathes = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:path;");
var aSubTitles = Pm.FindViewers("groups:menu;viewers:panel;","", "columns:title;");

for(var a = 1; a < 16; a++)
{
    for(var i = 0; i < aSubPathes.GetSize(2); i++)
    {
        if(Pm.StringFind(aSubPathes.GetItem(0,i), "Z45_Panels/" + Pm.StringSub(name, 0, 1) + a, 0) > 0)
        {
            pMe.Vars("subTitles").Value = pMe.Vars("subTitles").Value + aSubTitles.GetItem(0,i) + ";";
            pMe.Vars("subPathes").Value = pMe.Vars("subPathes").Value + aSubPathes.GetItem(0,i) + ";";
            ctr++;
        }
    }
}

pMe.Vars("subTitlesWidth").Value = ctr > 6 ? pMe.Dx / ctr : pMe.Dx / 6;

]]>
              </Script>
            </Method>
          </Methods>
          <Methods Name="Canvas">
            <Method Name="onDraw">
              <Prop Name="Params"></Prop>
              <Script>
                <![CDATA[
//local
var dx  = pEvent.CtxDx;
var dy  = pEvent.CtxDy;
var ctx = pEvent.GetCtx(0);
var alUnackColor = "#ff6868";
var alActColor = "red";
var alNormalColor = "transparent";
var selectedColor = "#808080";

//Vars
var aAlphabet = Pm.StringSplit(pEvent.GetVar("Alphabet").Value, ";","empty:1;");
var aTitles = Pm.StringSplit(pEvent.GetVar("titles").Value, ";","empty:1;");
var aSubTitles = Pm.StringSplit(pEvent.GetVar("subTitles").Value, ";","empty:1;");

var titleElements = aTitles.GetSize(1) > 6 ? aTitles.GetSize(1) : 6;
var subTitleElements = aSubTitles.GetSize(1) > 6 ? aSubTitles.GetSize(1) : 6;

//get alarm stripes
var mStripes = Pm.StringSplit(pEvent.GetVar("Stripes").Value, ";","empty:1;");

if(pEvent.GetVar("selMain").Value < aAlphabet.GetSize(1) + 1)
{
    var subStripes = Pm.StringSplit(pEvent.GetVar(aAlphabet.GetItem(pEvent.GetVar("selMain").Value) + "Stripes").Value, ";","empty:1;");
}

ctx.lineWidth = 2;

//titles rect
for(var i = 0; i < aTitles.GetSize(1); i++)
{
    if(mStripes.GetItem(i) === "2" || Pm.StringFind(pEvent.GetVar(aAlphabet.GetItem(i) + "Stripes").Value, "2", 0) >= 0)
    {
        ctx.fillStyle = pEvent.GetVar("blink").Value ? alActColor : alNormalColor;
    }
    else if(mStripes.GetItem(i) === "1" || Pm.StringFind(pEvent.GetVar(aAlphabet.GetItem(i) + "Stripes").Value, "1", 0) >= 0)
    {
        ctx.fillStyle = alActColor;
    }
    else if (mStripes.GetItem(i) === "3" || Pm.StringFind(pEvent.GetVar(aAlphabet.GetItem(i) + "Stripes").Value, "3", 0) >= 0)
    {
        ctx.fillStyle = pEvent.GetVar("blink").Value ? alUnackColor : alNormalColor;
    }
    else
    {
        ctx.fillStyle = pEvent.GetVar("selMain").Value === i ? selectedColor : alNormalColor;
    }

    ctx.fillRect(dx/titleElements * i, 0, dx/titleElements, dy/2.5);
    ctx.fill();
}

//subtitles rect
for(var i = 0; i < aSubTitles.GetSize(1); i++)
{
    if(subStripes.GetItem(i) === "2")
    {
        ctx.fillStyle = pEvent.GetVar("blink").Value ? alActColor : alNormalColor;
    }
    else if(subStripes.GetItem(i) === "1")
    {
        ctx.fillStyle = alActColor;
    }
    else if(subStripes.GetItem(i) === "3")
    {
        ctx.fillStyle = pEvent.GetVar("blink").Value ? alUnackColor : alNormalColor;
    }
    else
    {
        ctx.fillStyle = pEvent.GetVar("selSub").Value === i ? selectedColor : alNormalColor;
    }
    
    ctx.fillRect(dx/subTitleElements * i, dy/2, dx/subTitleElements, dy/2.5);
    ctx.fill();
}

//adjust text style
ctx.font = "22px Arial";
ctx.textAlign = "center";

//title text
for(var i = 0; i < aTitles.GetSize(1); i++)
{  
    ctx.strokeStyle = pEvent.GetVar("selMain").Value === i ? "white" : "black";
    ctx.fillStyle = pEvent.GetVar("selMain").Value === i ? "white" : "black";
    ctx.fillText(Pm.StringSub(aTitles.GetItem(i), Pm.StringFind(aTitles.GetItem(i), "_",0) + 1), dx/titleElements * i + dx/titleElements/2, dy/3);
    ctx.stroke();
}

//subtitle text
for(var i = 0; i < aSubTitles.GetSize(1); i++)
{  
    ctx.strokeStyle = pEvent.GetVar("selSub").Value === i ? "white" : "black";
    ctx.fillStyle = pEvent.GetVar("selSub").Value === i ? "white" : "black";
    ctx.fillText(Pm.StringSub(aSubTitles.GetItem(i), Pm.StringFind(aSubTitles.GetItem(i), "_",0) + 1), dx/subTitleElements * i + dx/subTitleElements/2, dy/3 + dy/2);
    ctx.stroke();
}

////titles line
//ctx.lineWidth = 3;

//for(var i = 0; i < aTitles.GetSize(1); i++)
//{
//    if(pEvent.GetVar("selMain").Value !== i)
//    {
//        ctx.strokeStyle = "black";
//        ctx.moveTo(dx/titleElements * i, dy/2.5-2);
//        ctx.lineTo(dx/titleElements * i + dx/titleElements, dy/2.5-2);
//        ctx.stroke();
//    }
//}

////subtitles line
//for(var i = 0; i < aSubTitles.GetSize(1); i++)
//{
//    if(pEvent.GetVar("selSub").Value !== i)
//    {
//        ctx.moveTo(dx/titleElements * i, dy/2 + dy/2.5 -2);
//        ctx.lineTo(dx/titleElements * i + dx/titleElements, dy/2 + dy/2.5 -2);
//        ctx.stroke();
//    }
//}
]]>
              </Script>
            </Method>
          </Methods>
        </GItem>
      </GPanel>
      <PmObjects/>
    </PmObject>
    <PmObject Name="Toolbar" Type="PmPanel">
      <Prop Name="DisabledInRt">0</Prop>
      <Prop Name="LastEditTime">2018.10.04 11:59:27</Prop>
      <Prop Name="MacroPars"></Prop>
      <Prop Name="MemberOfLogicalGroups"></Prop>
      <Prop Name="ReferenceType">0</Prop>
      <Prop Name="ReferenceName"></Prop>
      <Events Name="PmEvents">
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onOpen" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onClose" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onFocusIn" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onFocusOut" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onKeyPress" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onMousePress" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
      </Events>
      <Methods/>
      <Prop Name="Title"></Prop>
      <Prop Name="Help"></Prop>
      <Prop Name="Options"></Prop>
      <Prop Name="Params"></Prop>
      <Prop Name="ScriptEngine">javascript</Prop>
      <Prop Name="View2AppLevel">full</Prop>
      <Prop Name="MultiView">0</Prop>
      <Prop Name="KeyCodeOpen">0</Prop>
      <Props Name="AccessList">
        <Prop Name="Style">0</Prop>
        <List Name="Actions">
          <Props Name="PanelClose">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="PanelOpen">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="WebMethods">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="WebRead">
            <Prop Name="Users">$OPER</Prop>
          </Props>
          <Props Name="WebWrite">
            <Prop Name="Users">$OPER</Prop>
          </Props>
        </List>
      </Props>
      <Props Name="WebServer">
        <Prop Name="Enable">1</Prop>
        <Prop Name="Id">$.expr("pMe.Name")</Prop>
        <Prop Name="Server">/Z45AppCore/Web</Prop>
        <Prop Name="AddToList">0</Prop>
        <Prop Name="RefreshErrMode">0</Prop>
        <Prop Name="RefreshPeriod">0.5</Prop>
      </Props>
      <GPanel ver="80327">
        <Prop Name="Dx">1920</Prop>
        <Prop Name="Dy">20</Prop>
        <Prop Name="ItemsLockedDt">0</Prop>
        <Prop Name="RasterEnabledDt">1</Prop>
        <Prop Name="RasterSizeDt">10</Prop>
        <Prop Name="RasterColorDt">#808080</Prop>
        <Prop Name="OrderItemsEnabledDt">0</Prop>
        <Prop Name="Enabled">1</Prop>
        <Props Name="LocalProps">
          <Prop Name="BackgroundColor">#c0c0c0</Prop>
          <Prop Name="FocusColor">#000000</Prop>
        </Props>
        <Event Name="onStart" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onStop" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onRefresh" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onModeChange" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onViewerResize" Type="Pm">
          <Script>
            <![CDATA[
pMe.Dx = pEvent.Dx > pMe.IniDx ? pEvent.Dx : pMe.IniDx;

var dx = pMe.Dx - pMe.IniDx;
var oItem = pMe.Items("/time");

oItem.X = oItem.IniX + dx;

pMe.Refresh();
]]>
          </Script>
        </Event>
        <Event Name="onPanelStartEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Event Name="onPanelStopEnd" Type="Pm">
          <Script><![CDATA[]]></Script>
        </Event>
        <Methods></Methods>
        <GItem Name="button2" Type="PmiButton">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">0</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">20</Prop>
          <Prop Name="Dy">20</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">1</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <Prop Name="BnAttributes">12</Prop>
          <Props Name="Text">
            <Prop Name="StringText"></Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ImageSrc">#pmres:img/IconAlarms1.svg</Prop>
          <Prop Name="ImageOper">4</Prop>
          <Event Name="onButtonUp" Type="Pm">
            <Script>
              <![CDATA[
//#pragma variable sDlgTitle=Macro("$.text('sys','alarmsName')");

var aList = Pm.FindViewers("groups:menu;viewers:alarm_state;","", "columns:path,title,alstate3,alstate2,alstate1,alhoot;");
var sViewer = Pm.SelectionDialog(aList, "", sDlgTitle, "size:500,350;autoselect:1;");

if(Pm.IsValid(sViewer))
pMe.PmPanel.OpenView(sViewer, "target:_blank;", "");
]]>
            </Script>
          </Event>
        </GItem>
        <GItem Name="button3" Type="PmiButton">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">20</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">20</Prop>
          <Prop Name="Dy">20</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">1</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <Prop Name="BnAttributes">12</Prop>
          <Props Name="Text">
            <Prop Name="StringText"></Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ImageSrc">#pmres:img/IconEvents1.svg</Prop>
          <Prop Name="ImageOper">4</Prop>
          <Event Name="onButtonUp" Type="Pm">
            <Script>
              <![CDATA[
//#pragma variable sDlgTitle=Macro("$.text('sys','eventsName')");

var aList = Pm.FindViewers("groups:menu;viewers:event;", "", "columns:path,title;");
var sViewer = Pm.SelectionDialog(aList, "", sDlgTitle, "size:500,350;autoselect:1;");

if(Pm.IsValid(sViewer))
  pMe.PmPanel.OpenView(sViewer, "target:_blank;", "");
]]>
            </Script>
          </Event>
        </GItem>
        <GItem Name="button4" Type="PmiButton">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">40</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">20</Prop>
          <Prop Name="Dy">20</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">1</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <Prop Name="BnAttributes">12</Prop>
          <Props Name="Text">
            <Prop Name="StringText"></Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ImageSrc">#pmres:img/IconInfo1.svg</Prop>
          <Prop Name="ImageOper">4</Prop>
          <Event Name="onButtonUp" Type="Pm">
            <Script>
              <![CDATA[
pMe.PmPanel.OpenView("/#glob/infosystem", "target:_blank;");
]]>
            </Script>
          </Event>
        </GItem>
        <GItem Name="button5" Type="PmiButton">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">60</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">20</Prop>
          <Prop Name="Dy">20</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="ColorItem">#c0c0c0</Prop>
          <Prop Name="BorderWidth">1</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">0</Prop>
          <Prop Name="BnAttributes">12</Prop>
          <Props Name="Text">
            <Prop Name="StringText"></Prop>
            <Prop Name="FontText">PmMiddle</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ImageSrc">#pmres:img/IconStop2.svg?lightcolor=#00cc00</Prop>
          <Prop Name="ImageOper">4</Prop>
          <Event Name="onButtonUp" Type="Pm">
            <Script>
              <![CDATA[
Pm.AppStop();
]]>
            </Script>
          </Event>
        </GItem>
        <GItem Name="time" Type="PmiText">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">1800</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">120</Prop>
          <Prop Name="Dy">20</Prop>
          <Prop Name="DrawBg">1</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="ColorItem">transparent</Prop>
          <Prop Name="BorderWidth">0</Prop>
          <Prop Name="BorderType">1</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">2</Prop>
          <Prop Name="Multiline">1</Prop>
          <Props Name="Text">
            <Prop Name="Value">00:00:00</Prop>
            <Prop Name="FontText">PmBig</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ValueDataType">0</Prop>
          <Prop Name="ValueFormatType">0</Prop>
          <Prop Name="ValueFormat">%.2f</Prop>
          <Prop Name="ValueMin">0;0</Prop>
          <Prop Name="ValueMax">100;0</Prop>
          <Prop Name="EditAttr">2</Prop>
          <Prop Name="ShadowType">0</Prop>
          <Prop Name="ShadowColor">#808080</Prop>
          <Event Name="onRefresh" Type="Pm">
            <Script>
              <![CDATA[
pMe.SetProp("Value", Pm.CreatePmDateObject().Format("%H:%M:%S"));
]]>
            </Script>
          </Event>
        </GItem>
        <GItem Name="user" Type="PmiText">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">1660</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">140</Prop>
          <Prop Name="Dy">20</Prop>
          <Prop Name="DrawBg">1</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="ColorItem">#a8a8a8</Prop>
          <Prop Name="BorderWidth">0</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">2</Prop>
          <Prop Name="Multiline">1</Prop>
          <Props Name="Text">
            <Prop Name="Value">
              <DStatic>USER</DStatic>
              <DBind Type="UP">
                <Prop Name="Value">Name</Prop>
              </DBind>
            </Prop>
            <Prop Name="FontText">PmBig</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ValueDataType">0</Prop>
          <Prop Name="ValueFormatType">0</Prop>
          <Prop Name="ValueFormat">%.2f</Prop>
          <Prop Name="ValueMin">0;0</Prop>
          <Prop Name="ValueMax">100;0</Prop>
          <Prop Name="EditAttr">2</Prop>
          <Prop Name="ShadowType">0</Prop>
          <Prop Name="ShadowColor">#808080</Prop>
          <Event Name="onMousePress" Type="Pm">
            <Script>
              <![CDATA[
if(pEvent.Action == 0)
{
    Pm.WndLogon(true);
}
]]>
            </Script>
          </Event>
        </GItem>
        <GItem Name="user0" Type="PmiText">
          <Prop Name="Attr0Dt">;24960</Prop>
          <Prop Name="X">1510</Prop>
          <Prop Name="Y">0</Prop>
          <Prop Name="Dx">140</Prop>
          <Prop Name="Dy">20</Prop>
          <Props Name="LocalProps">
            <Prop Name="Save" Type="bool">
              <DStatic>0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/SaveSettings/#vars/Save;Value</Prop>
              </DBind>
            </Prop>
            <Prop Name="Load" Type="bool">
              <DStatic>0</DStatic>
              <DBind Type="PP">
                <Prop Name="Value">/Z45AppCore/SaveSettings/#vars/Load;Value</Prop>
              </DBind>
            </Prop>
          </Props>
          <Prop Name="Enabled">
            <DStatic>1</DStatic>
            <DBind Type="T">
              <Prop Name="Var">
                <DStatic>0</DStatic>
                <DBind Type="UP">
                  <Prop Name="Value">Priority</Prop>
                </DBind>
              </Prop>
              <Props Name="Row0">
                <Prop Name="Var">0</Prop>
                <Prop Name="Prop">0</Prop>
              </Props>
              <Props Name="Row1">
                <Prop Name="Var">1</Prop>
              </Props>
            </DBind>
          </Prop>
          <Prop Name="DrawBg">1</Prop>
          <Prop Name="FocusType">0</Prop>
          <Prop Name="MenuType">1</Prop>
          <Prop Name="ColorItem">#a8a8a8</Prop>
          <Prop Name="BorderWidth">0</Prop>
          <Prop Name="BorderType">0</Prop>
          <Prop Name="BorderContrast">60</Prop>
          <Prop Name="GradientEnabled">1</Prop>
          <Prop Name="GradientContrast">15</Prop>
          <Prop Name="GradientDirection">2</Prop>
          <Prop Name="Multiline">1</Prop>
          <Props Name="Text">
            <Prop Name="Value">CONFIG</Prop>
            <Prop Name="FontText">PmBig</Prop>
            <Prop Name="AlignHor">1</Prop>
            <Prop Name="AlignVer">1</Prop>
          </Props>
          <Prop Name="ValueDataType">0</Prop>
          <Prop Name="ValueFormatType">0</Prop>
          <Prop Name="ValueFormat">%.2f</Prop>
          <Prop Name="ValueMin">0;0</Prop>
          <Prop Name="ValueMax">100;0</Prop>
          <Prop Name="EditAttr">2</Prop>
          <Prop Name="ShadowType">0</Prop>
          <Prop Name="ShadowColor">#808080</Prop>
          <Event Name="onMenuSelect" Type="Pm">
            <Script>
              <![CDATA[switch(pEvent.Name)
{
case "Save": 
      pMe.Vars("Save").Value = true;
      Pm.MessageBox("Info", "Konfigurační parametry uloženy do souboru."); 
      break;
case "Load": 
      pMe.Vars("Load").Value = true;
      Pm.MessageBox("Info", "Konfigurační parametry načteny ze souboru."); 
      break;
}
]]>
            </Script>
          </Event>
          <Event Name="onMenuFill" Type="Pm">
            <Script>
              <![CDATA[pEvent.Menu.AddMenu("Save", "Save");
pEvent.Menu.AddMenu("Load", "Load");
]]>
            </Script>
          </Event>
        </GItem>
      </GPanel>
      <PmObjects/>
    </PmObject>
  </PmObjects>
</PmObject>