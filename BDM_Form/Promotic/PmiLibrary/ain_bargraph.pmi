<?xml version="1.0" encoding="UTF-8"?>
<Document Load="Auto">
	<Cfg Name="Default">
		<Content ver="80323">
			<GItem Name="Canvas0" Type="PmiCanvas">
				<Prop Name="EnabledInRt">1</Prop>
				<Prop Name="EnabledInPanel">1</Prop>
				<Prop Name="EnabledInWeb">1</Prop>
				<Prop Name="EnabledInPrint">1</Prop>
				<Prop Name="Attr0Dt">;24960</Prop>
				<Prop Name="X">50</Prop>
				<Prop Name="Y">200</Prop>
				<Prop Name="Dx">100</Prop>
				<Prop Name="Dy">350</Prop>
				<Props Name="Params">
					<Prop Name="tagName" Type="par">ain1</Prop>
					<Prop Name="fraction" Type="par">2</Prop>
				</Props>
				<Prop Name="ToolTip">
					<DStatic></DStatic>
					<DBind Type="GP">
						<Prop Name="Value">.;Vars("Description")</Prop>
						<Prop Name="Reconnect">0</Prop>
					</DBind>
				</Prop>
				<Props Name="LocalProps">
					<Prop Name="blink" Type="bool">0</Prop>
					<Prop Name="alUnackColor" Type="string">
						<DStatic Type="string"></DStatic>
						<DBind Type="PP">
							<Prop Name="Value">/Z45AppCore/Colors/#vars/alUnackColor;Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="alActColor" Type="string">
						<DStatic Type="string"></DStatic>
						<DBind Type="PP">
							<Prop Name="Value">/Z45AppCore/Colors/#vars/alActColor;Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="alNormalColor" Type="string">
						<DStatic Type="string">black</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="alInhColor" Type="string">
						<DStatic Type="string"></DStatic>
						<DBind Type="PP">
							<Prop Name="Value">/Z45AppCore/Colors/#vars/alInhColor;Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="barGraphColor1" Type="string">
						<DStatic Type="string">#30ccff</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/barGraphColor1");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="barGraphColor2" Type="string">
						<DStatic Type="string">#a8ccf0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/barGraphColor2");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="fraction" Type="integer">0</Prop>
					<Prop Name="quality" Type="integer">
						<DStatic Type="integer">0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Quality</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Force" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Force");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmHH" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmHH");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmH" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmH");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmL" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmL");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmLL" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmLL");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HWSigFault" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HWSigFault");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HH_ALAck" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_ALAck");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="H_ALAck" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_ALAck");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="L_ALAck" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_ALAck");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="LL_ALAck" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_ALAck");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HWSigFault_ALAck" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HWSigFault_ALAck");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmLInhibit" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmLInhibit");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmLLInhibit" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmLLInhibit");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmHInhibit" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmHInhibit");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AlarmHHInhibit" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AlarmHHInhibit");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Value" Type="double">
						<DStatic Type="double">100</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Value");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Unit" Type="string">
						<DStatic Type="string">unit</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Unit");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Min" Type="double">
						<DStatic Type="double">0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Min");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Max" Type="double">
						<DStatic Type="double">100</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Max");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AELevelHH" Type="double">
						<DStatic Type="double">90</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelHH");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AELevelH" Type="double">
						<DStatic Type="double">70</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelH");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AELevelL" Type="double">
						<DStatic Type="double">15</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelL");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AELevelLL" Type="double">
						<DStatic Type="double">13</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AELevelLL");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HH_ALEn" Type="bool">
						<DStatic>1</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_ALEn");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="H_ALEn" Type="bool">
						<DStatic>1</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_ALEn");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="L_ALEn" Type="bool">
						<DStatic>1</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_ALEn");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="LL_ALEn" Type="bool">
						<DStatic>1</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_ALEn");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HH_En" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/HH_En");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="H_En" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/H_En");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="L_En" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/L_En");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="LL_En" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/LL_En");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AnyAck" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyAck");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="AnyAl" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/AnyAl");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Description" Type="string">
						<DStatic Type="string"></DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Description");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Note" Type="string">
						<DStatic Type="string"></DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/AinData/",$.par("tagName"),"/#vars/Note");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
				</Props>
				<Prop Name="Enabled">1</Prop>
				<Prop Name="Visible">1</Prop>
				<Prop Name="DrawBg">1</Prop>
				<Prop Name="FocusType">0</Prop>
				<Prop Name="MenuType">0</Prop>
				<Prop Name="UseParentVars">0</Prop>
				<Event Name="onStart" Type="Pm">
					<Script><![CDATA[pMe.Vars("fraction").Value = pMe.GetPar("fraction");]]></Script>
				</Event>
				<Event Name="onStop" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onRefresh" Type="Pm">
					<Script><![CDATA[pMe.Vars("blink").Value = pMe.Vars("blink").Value === false ? true : false;

//Note check
pMe.GetChildByIndex(0).Visible = Pm.StringLen(pMe.Vars("Note").Value) > 0 ? true : false;]]></Script>
				</Event>
				<Event Name="onModeChange" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onFocusIn" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onFocusOut" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onKeyPress" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onMousePress" Type="Pm">
					<Script><![CDATA[if(pEvent.Action === 0)
{
    var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
    pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AIn_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";par:fraction=" + pMe.GetPar("fraction"));
}

]]></Script>
				</Event>
				<Event Name="onMenuSelect" Type="Pm">
					<Script><![CDATA[var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";

switch(pEvent.Name)
{
    case "AckAl":
        pMe.Vars("HH_ALAck").Value = false;
        pMe.Vars("H_ALAck").Value = false;
        pMe.Vars("L_ALAck").Value = false;
        pMe.Vars("LL_ALAck").Value = false;
        pMe.Vars("HWSigFault_ALAck").Value = false;
        break;
    case "Trend":
        pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_AInTrend_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
        break;
    case "Events":
        pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
        break;
    case "Alarms":
        pMe.PmPanel.OpenView("/Z45AppCore/Alarms/#state", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
        break;
}]]></Script>
				</Event>
				<Event Name="onMenuFill" Type="Pm">
					<Script><![CDATA[pEvent.Menu.AddMenu("Alarms", "Alarmy");
pEvent.Menu.AddMenu("Events", "Eventy");
pEvent.Menu.AddMenu("Trend", "Trend");
pEvent.Menu.AddMenu("AckAl", "Potvrdit Alarmy");]]></Script>
				</Event>
				<Methods/>
				<GItem Name="Note" Type="PmiRasterImage">
					<Prop Name="EnabledInRt">1</Prop>
					<Prop Name="EnabledInPanel">1</Prop>
					<Prop Name="EnabledInWeb">1</Prop>
					<Prop Name="EnabledInPrint">1</Prop>
					<Prop Name="Attr0Dt">;24960</Prop>
					<Prop Name="X">0</Prop>
					<Prop Name="Y">335</Prop>
					<Prop Name="Dx">20</Prop>
					<Prop Name="Dy">15</Prop>
					<Props Name="Params"/>
					<Prop Name="ToolTip"></Prop>
					<Props Name="LocalProps"/>
					<Prop Name="Enabled">1</Prop>
					<Prop Name="Visible">1</Prop>
					<Prop Name="DrawBg">0</Prop>
					<Prop Name="FocusType">1</Prop>
					<Prop Name="MenuType">0</Prop>
					<Prop Name="File">#pmres:Img/IconAbout1.svg</Prop>
					<Prop Name="TypeSize">0</Prop>
					<Prop Name="TilesEnabled">0</Prop>
					<Prop Name="CropEnabled">0</Prop>
					<Prop Name="CropX">0</Prop>
					<Prop Name="CropY">0</Prop>
					<Prop Name="CropDx">100</Prop>
					<Prop Name="CropDy">100</Prop>
					<Prop Name="TranspColorEnabled">1</Prop>
					<Prop Name="TranspColor">#ffffff</Prop>
					<Prop Name="BgColorEnabled">0</Prop>
					<Prop Name="LightColorEnabled">0</Prop>
					<Prop Name="BlendEnabled">0</Prop>
					<Prop Name="RotationType">0</Prop>
					<Prop Name="ConstPagesRatio">0</Prop>
					<Event Name="onStart" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onStop" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onRefresh" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onModeChange" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onFocusIn" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onFocusOut" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onKeyPress" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onMousePress" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onMenuSelect" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onMenuFill" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Methods/>
				</GItem>
				<Methods Name="Canvas">
					<Method Name="Alarm">
						<Prop Name="Params">ctx,dx,dy,blink</Prop>
						<Script><![CDATA[var alUnackColor = pEvent.GetVar("alUnackColor").Value;
var alActColor = pEvent.GetVar("alActColor").Value;
var alNormalColor = pEvent.GetVar("alNormalColor").Value;
var alInhColor = pEvent.GetVar("alInhColor").Value;

var Alarm = pEvent.GetVar("AnyAl").Value;
var ALAck = pEvent.GetVar("AnyAck").Value;
var AlInhibit = pEvent.GetVar("AlarmLInhibit").Value || pEvent.GetVar("AlarmLLInhibit").Value || pEvent.GetVar("AlarmHInhibit").Value || pEvent.GetVar("AlarmHHInhibit").Value;

if(AlInhibit)
{
    ctx.fillStyle = alInhColor;
}
else if(Alarm && ALAck)
{
    ctx.fillStyle = blink ? alActColor : alNormalColor;
}
else if(Alarm && !ALAck)
{
    ctx.fillStyle = alActColor;
}
else if(!Alarm && ALAck)
{
    ctx.fillStyle = blink ? alUnackColor : alNormalColor;
}
else
{
    ctx.fillStyle = alNormalColor;
}

ctx.fillRect(0, 0, dx, dy);]]></Script>
					</Method>
					<Method Name="Background">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var borderLineX = dx * 0.035;
var borderLineY = dy * 0.035 / 3.5;

ctx.fillStyle = "#c0c0c0";
ctx.fillRect(borderLineX, borderLineY, dx - 2 * borderLineX, dy - 2 * borderLineY);]]></Script>
					</Method>
					<Method Name="Bar">
						<Prop Name="Params">ctx,dx,dy,Value,Min,Max</Prop>
						<Script><![CDATA[//background
var barSpaceX = dx * 0.25;
var barSpaceY = dy * 0.25 / 3.5;

var barGraphColor1 = pEvent.GetVar("barGraphColor1").Value;
var barGraphColor2 = pEvent.GetVar("barGraphColor2").Value;

ctx.fillStyle =pEvent.GetVar("Force").Value ? "yellow" : "white";
ctx.fillRect(barSpaceX, barSpaceY, dx - 2 * barSpaceX, dy * 0.7);

//value
if(Value > Min)
    {
    var vBarSpaceX = dx * 0.28;
    var vBarSpaceY = dy * 0.28 / 3.5;
    
    var valPerc = Pm.Round((Value - Min) / ((Max - Min) / 1), 0.01);
    valPerc = valPerc > 1 ? 1 : valPerc;
    var invPerc = 1 - valPerc;
    
    var grd2 = ctx.createLinearGradient(vBarSpaceX, vBarSpaceY + invPerc*dy * 0.7, barSpaceX + dx - 2 * barSpaceX, barSpaceY + invPerc*dy * 0.7 + valPerc*dy * 0.7);
    grd2.addColorStop(0, barGraphColor1);
    grd2.addColorStop(1, barGraphColor2);
    
    var barDy = valPerc*dy * 0.7 - 2*(vBarSpaceY - barSpaceY);
    
    ctx.fillStyle = grd2;
    ctx.fillRect(vBarSpaceX, vBarSpaceY + invPerc*dy * 0.7, dx - 2 * vBarSpaceX, valPerc*dy * 0.7 - 2*(vBarSpaceY - barSpaceY))
}

//min, max
var mFontSize = Pm.Round(dy * 0.0375, 1) > 13 ? 13 : Pm.Round(dy * 0.0375, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = mFontSize + "px arial";
ctx.textAlign = "center";

ctx.fillText(Max, dx/2, barSpaceY - 0.4*mFontSize);
ctx.fillText(Min, dx/2, barSpaceY + (dy * 0.7) + mFontSize);]]></Script>
					</Method>
					<Method Name="Force">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var Force = pEvent.GetVar("Force").Value;
var fFontSize = Pm.Round(dy * 0.1, 1);
var borderLineY = dy * 0.035 / 3.5;

if(Force)
{
    ctx.strokeStyle = "gray";
    ctx.fillStyle = "gray";
    ctx.font = "bold " + fFontSize + "px arial";
    ctx.textAlign = "center";
    ctx.fillText("F", dx * 0.9, dy - borderLineY);
}]]></Script>
					</Method>
					<Method Name="Limit">
						<Prop Name="Params">ctx,dx,dy,Value,Min,Max</Prop>
						<Script><![CDATA[//init
var HHLevel = pEvent.GetVar("AELevelHH").Value;
var HLevel = pEvent.GetVar("AELevelH").Value;
var LLevel = pEvent.GetVar("AELevelL").Value;
var LLLevel = pEvent.GetVar("AELevelLL").Value;

var HH_ALEn = pEvent.GetVar("HH_ALEn").Value;
var H_ALEn = pEvent.GetVar("H_ALEn").Value;
var L_ALEn = pEvent.GetVar("L_ALEn").Value;
var LL_ALEn = pEvent.GetVar("LL_ALEn").Value;

var HH_En = pEvent.GetVar("HH_En").Value;
var H_En = pEvent.GetVar("H_En").Value;
var L_En = pEvent.GetVar("L_En").Value;
var LL_En = pEvent.GetVar("LL_En").Value;

var AlarmHH = pEvent.GetVar("AlarmHH").Value;
var AlarmH = pEvent.GetVar("AlarmH").Value;
var AlarmL = pEvent.GetVar("AlarmL").Value;
var AlarmLL = pEvent.GetVar("AlarmLL").Value;

var HHColor = "rgba(255,0,0,0.4)";
var HColor = "rgba(255,125,125,0.3)";

var barSpaceY = dy * 0.25 / 3.5;
var vBarSpaceY = dy * 0.28 / 3.5;

var limitLine = 2;

//HH Limit
if(HH_ALEn || HH_En)
{
  var HHx = dx * 0.2;
  var HHy = dy * 0.28 / 3.5;
  
  var HHPerc = Pm.Round((HHLevel - Min) / ((Max - Min) / 1), 0.01);
  HHPerc = HHPerc > 1 ? 1 : HHPerc;
  var invHHPerc = 1 - HHPerc;
  
  ctx.fillStyle = (HH_ALEn && AlarmHH) ? HHColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(HHx, HHy, dx - 2 * HHx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHHPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(HHx, HHy + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHHPerc, dx - 2 * HHx, limitLine);
}

//H Limit
if(H_ALEn || H_En)
{
  var Hx = dx * 0.2;
  var Hy = dy * 0.28 / 3.5;
  
  var HPerc = Pm.Round((HLevel - Min) / ((Max - Min) / 1), 0.01);
  HPerc = HPerc > 1 ? 1 : HPerc;
  var invHPerc = 1 - HPerc;
  
  ctx.fillStyle = (H_ALEn && AlarmH) ? HColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(Hx, Hy, dx - 2 * Hx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(Hx, Hy + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invHPerc, dx - 2 * Hx, limitLine);
}

//L Limit
if(L_ALEn || L_En)
{
  var LPerc = Pm.Round((LLevel - Min) / ((Max - Min) / 1), 0.01);
  LPerc = LPerc > 1 ? 1 : LPerc;
  var invLPerc = 1 - LPerc;
  
  var Lx = dx * 0.2;
  var Ly = (dy * 0.28 / 3.5) + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invLPerc;
  
  ctx.fillStyle = (L_ALEn && AlarmL) ? HColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(Lx, Ly, dx - 2 * Lx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*LPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(Lx, Ly, dx - 2 * Lx, limitLine);
}

//LL Limit
if(LL_ALEn || LL_En)
{
  var LLPerc = Pm.Round((LLLevel - Min) / ((Max - Min) / 1), 0.01);
  LLPerc = LLPerc > 1 ? 1 : LLPerc;
  var invLLPerc = 1 - LLPerc;
  
  var LLx = dx * 0.2;
  var LLy = (dy * 0.28 / 3.5) + (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*invLLPerc;
  
  ctx.fillStyle = (LL_ALEn && AlarmLL) ? HHColor : "rgba(100,100,100,0.3)";
  ctx.fillRect(LLx, LLy, dx - 2 * LLx, (dy * 0.7 - 2*(vBarSpaceY - barSpaceY))*LLPerc);
  
  ctx.fillStyle = "gray";
  ctx.fillRect(LLx, LLy, dx - 2 * LLx, limitLine);
}]]></Script>
					</Method>
					<Method Name="Quality">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dx * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]></Script>
					</Method>
					<Method Name="Value">
						<Prop Name="Params">ctx,dx,dy,Value</Prop>
						<Script><![CDATA[
var Unit = pEvent.GetVar("Unit").Value;
var vFontSize = Pm.Round(dy * 0.075, 1) > 26 ? 26 :Pm.Round(dy * 0.075, 1);
var barSpaceY = dy * 0.25 / 3.5;
var vBarSpaceY = dy * 0.28 / 3.5;

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Value, dx/2, barSpaceY + (dy * 0.7) + 2*vFontSize);

var uFontSize = Pm.Round(vFontSize * 0.5, 1) > 13 ? 13 : Pm.Round(vFontSize * 0.5, 1);

ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = uFontSize + "px arial";
ctx.textAlign = "center";
ctx.fillText(Unit, dx/2, vBarSpaceY + (dy * 0.7) + 2.5*vFontSize);]]></Script>
					</Method>
					<Method Name="onDraw">
						<Prop Name="Params"></Prop>
						<Script><![CDATA[//init
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;
var blink = pEvent.GetVar("blink").Value;

var Min = pEvent.GetVar("Min").Value;
var Max = pEvent.GetVar("Max").Value;
var fraction = pEvent.GetVar("fraction").Value;
var Value =  Pm.Round(pEvent.GetVar("Value").Value, 1 / Pm.Pow(10, fraction));

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Bar(ctx, dx, dy, Value, Min, Max);
pEvent.Methods.Value(ctx, dx, dy, Value);
pEvent.Methods.Limit(ctx, dx, dy,Value, Min, Max);
pEvent.Methods.Force(ctx, dx, dy);
pEvent.Methods.Quality(ctx, dx, dy);


]]></Script>
					</Method>
				</Methods>
			</GItem>
		</Content>
	</Cfg>
</Document>
