<?xml version="1.0" encoding="UTF-8"?>
<Document Load="Auto">
	<Cfg Name="Default">
		<Content ver="80323">
			<GItem Name="Canvas16" Type="PmiCanvas">
				<Prop Name="EnabledInRt">1</Prop>
				<Prop Name="EnabledInPanel">1</Prop>
				<Prop Name="EnabledInWeb">1</Prop>
				<Prop Name="EnabledInPrint">1</Prop>
				<Prop Name="Attr0Dt">;24960</Prop>
				<Prop Name="X">30</Prop>
				<Prop Name="Y">840</Prop>
				<Prop Name="Dx">700</Prop>
				<Prop Name="Dy">75</Prop>
				<Props Name="Params">
					<Prop Name="tagName" Type="par">group1</Prop>
					<Prop Name="locDescription" Type="par"></Prop>
				</Props>
				<Prop Name="ToolTip">
					<DStatic></DStatic>
					<DBind Type="GP">
						<Prop Name="Value">.;Vars("Description")</Prop>
						<Prop Name="Reconnect">0</Prop>
					</DBind>
				</Prop>
				<Props Name="LocalProps">
					<Prop Name="blink" Type="bool">0</Prop>
					<Prop Name="alNormalColor" Type="string">
						<DStatic Type="string">black</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">/Z45AppCore/Colors/#vars/alNormalColor;Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="quality" Type="integer">
						<DStatic Type="integer">0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/W1");Quality</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Description" Type="string">
						<DStatic Type="string">description</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/Description");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HMI_Start" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Start");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HMI_Stop" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Stop");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="HMI_Hold" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/HMI_Hold");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="GrpStarted" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStarted");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="GrpStopped" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStopped");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="GroupHold" Type="bool">
						<DStatic>1</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GroupHold");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="GrpStarting" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStarting");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="GrpStopping" Type="bool">
						<DStatic>0</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrpStopping");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="GrRR" Type="bool">
						<DStatic>1</DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/GrRR");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="Note" Type="string">
						<DStatic Type="string"></DStatic>
						<DBind Type="PP">
							<Prop Name="Value">$.join("/Z45AppCore/GrpData/",$.par("tagName"),"/#vars/Note");Value</Prop>
							<Prop Name="Reconnect">0</Prop>
						</DBind>
					</Prop>
					<Prop Name="locDescription" Type="string"></Prop>
					<Prop Name="ctr" Type="integer">0</Prop>
				</Props>
				<Prop Name="Enabled">1</Prop>
				<Prop Name="Visible">1</Prop>
				<Prop Name="DrawBg">1</Prop>
				<Prop Name="FocusType">0</Prop>
				<Prop Name="MenuType">0</Prop>
				<Prop Name="UseParentVars">0</Prop>
				<Event Name="onStart" Type="Pm">
					<Script><![CDATA[pMe.Vars("locDescription").Value = pMe.GetPar("locDescription");]]></Script>
				</Event>
				<Event Name="onStop" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onRefresh" Type="Pm">
					<Script><![CDATA[pMe.Vars("blink").Value = pMe.Vars("blink").Value === false ? true : false;
var ctr = pMe.Vars("ctr").Value;
var time = 2;

//auto reset
if(pMe.Vars("HMI_Start").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("HMI_Start").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("HMI_Start").Value = false;
}

if(pMe.Vars("HMI_Stop").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("HMI_Stop").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("HMI_Stop").Value = false;
}

if(pMe.Vars("HMI_Hold").Value && ctr <= time)
{
    pMe.Vars("ctr").Value = pMe.Vars("ctr").Value + 1;
}
else if(pMe.Vars("HMI_Hold").Value && ctr > time)
{
    pMe.Vars("ctr").Value = 0;
    pMe.Vars("HMI_Hold").Value = false;
}

//Note check
pMe.GetChildByIndex(0).Visible = Pm.StringLen(pMe.Vars("Note").Value) > 0 ? true : false;]]></Script>
				</Event>
				<Event Name="onModeChange" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onFocusIn" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onFocusOut" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onKeyPress" Type="Pm">
					<Script><![CDATA[]]></Script>
				</Event>
				<Event Name="onMousePress" Type="Pm">
					<Script><![CDATA[if(pEvent.Action == 0)
{
    if(pEvent.X < pMe.Dx * 0.7)
    {
        var sPos = "pos:view," + (pMe.X+pMe.Dx) + "," + pMe.Y + ";";
        pMe.PmPanel.OpenView("/Z45AppCore/Z45_Faceplates/_GrpCtrl_FP", "target:_blank;" + sPos, "par:tagName=" + pMe.GetPar("tagName") + ";");
    }
    else if(pEvent.X >= pMe.Dx * 0.7 && pEvent.X < pMe.Dx * 0.8)
    {
        pMe.Vars("HMI_Start").Value = true;
    }
    else if(pEvent.X >= pMe.Dx * 0.8 && pEvent.X < pMe.Dx * 0.9)
    {
        pMe.Vars("HMI_Stop").Value = true;
    }
    else if(pEvent.X >= pMe.Dx * 0.9 && pEvent.X < pMe.Dx)
    {
        pMe.Vars("HMI_Hold").Value = true;
    }
}
]]></Script>
				</Event>
				<Event Name="onMenuSelect" Type="Pm">
					<Script><![CDATA[switch(pEvent.Name)
{
    case "Events":
        pMe.PmPanel.OpenView("/Z45AppCore/Events/#history", "target:_blank;" + sPos, "s.source:" + pMe.GetPar("tagName") + ";");
        break;
}]]></Script>
				</Event>
				<Event Name="onMenuFill" Type="Pm">
					<Script><![CDATA[pEvent.Menu.AddMenu("Events", "Eventy");]]></Script>
				</Event>
				<Methods/>
				<GItem Name="Note" Type="PmiRasterImage">
					<Prop Name="EnabledInRt">1</Prop>
					<Prop Name="EnabledInPanel">1</Prop>
					<Prop Name="EnabledInWeb">1</Prop>
					<Prop Name="EnabledInPrint">1</Prop>
					<Prop Name="Attr0Dt">;24960</Prop>
					<Prop Name="X">0</Prop>
					<Prop Name="Y">60</Prop>
					<Prop Name="Dx">20</Prop>
					<Prop Name="Dy">15</Prop>
					<Props Name="Params"/>
					<Prop Name="ToolTip"></Prop>
					<Props Name="LocalProps"/>
					<Prop Name="Enabled">1</Prop>
					<Prop Name="Visible">1</Prop>
					<Prop Name="DrawBg">0</Prop>
					<Prop Name="FocusType">1</Prop>
					<Prop Name="MenuType">0</Prop>
					<Prop Name="File">#pmres:Img/IconAbout1.svg</Prop>
					<Prop Name="TypeSize">0</Prop>
					<Prop Name="TilesEnabled">0</Prop>
					<Prop Name="CropEnabled">0</Prop>
					<Prop Name="CropX">0</Prop>
					<Prop Name="CropY">0</Prop>
					<Prop Name="CropDx">100</Prop>
					<Prop Name="CropDy">100</Prop>
					<Prop Name="TranspColorEnabled">1</Prop>
					<Prop Name="TranspColor">#ffffff</Prop>
					<Prop Name="BgColorEnabled">0</Prop>
					<Prop Name="LightColorEnabled">0</Prop>
					<Prop Name="BlendEnabled">0</Prop>
					<Prop Name="RotationType">0</Prop>
					<Prop Name="ConstPagesRatio">0</Prop>
					<Event Name="onStart" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onStop" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onRefresh" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onModeChange" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onFocusIn" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onFocusOut" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onKeyPress" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onMousePress" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onMenuSelect" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Event Name="onMenuFill" Type="Pm">
						<Script><![CDATA[]]></Script>
					</Event>
					<Methods/>
				</GItem>
				<Methods Name="Canvas">
					<Method Name="Alarm">
						<Prop Name="Params">ctx,dx,dy,blink</Prop>
						<Script><![CDATA[var alNormalColor = pEvent.GetVar("alNormalColor").Value;

ctx.fillStyle = alNormalColor;
ctx.fillRect(0, 0, dx, dy);]]></Script>
					</Method>
					<Method Name="Background">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var grd = "#c0c0c0";
var borderLine = dy * 0.05;

ctx.beginPath();
ctx.lineWidth = 1;
ctx.strokeStyle = "#c0c0c0";
ctx.fillStyle = grd;
ctx.rect(borderLine, borderLine, dx - 2 * borderLine, dy - 2 * borderLine);

ctx.stroke();
ctx.fill();
ctx.closePath();]]></Script>
					</Method>
					<Method Name="Buttons">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var borderLine = dy * 0.05;
var borderLineButton = dy * 0.075;
var indSize = (dx - 2 * borderLine) * 0.1;
var arcLine = indSize * 0.07;
var r = indSize * 0.4;
var space = indSize * 0.1;
var Value = false;
var x = 0;

//button 1 - start group
Value = pEvent.GetVar("HMI_Start").Value;
x = borderLine + 7 * indSize;

ctx.beginPath();
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.strokeStyle = Value ? "#686868" : "white";
ctx.rect(x, borderLine, indSize, dy - 2 * borderLine);
ctx.stroke();
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "white" : "#686868";
ctx.strokeStyle = Value ? "white" : "#686868";
ctx.rect(x + borderLineButton, borderLine + borderLineButton, indSize - borderLineButton, dy - borderLineButton - 2 * borderLine);
ctx.stroke();
ctx.fill();
ctx.closePath();

ctx.strokeStyle = Value ? "white" : "#686868";
ctx.lineWidth = 1;

ctx.beginPath();
ctx.moveTo(x, dy - borderLine);
ctx.lineTo(x + borderLineButton, dy - borderLine - borderLineButton);
ctx.lineTo(x + borderLineButton, dy - borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(x + indSize, borderLine);
ctx.lineTo(x + indSize - borderLineButton, borderLine + borderLineButton);
ctx.lineTo(x + indSize, borderLine + borderLineButton);
ctx.closePath();
ctx.fill();
ctx.stroke();

var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);
grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.beginPath();
ctx.lineWidth = 1;
ctx.strokeStyle = "#c0c0c0";
ctx.fillStyle = grd;
ctx.rect(x + borderLineButton, borderLine + borderLineButton, indSize - 2 * borderLineButton, dy - 2 * borderLine - 2 * borderLineButton);
ctx.stroke();
ctx.fill();
ctx.closePath();

//symbol
ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(x + indSize * 0.5, dy * 0.5, r, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.fillStyle = "#c0c0c0";
ctx.arc(x + indSize * 0.5, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(x + indSize * 0.5, dy * 0.5, r - 2 * arcLine, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.strokeStyle = "#c0c0c0";
ctx.lineWidth = 1.5 * arcLine;
ctx.moveTo(x + indSize * 0.5, dy * 0.5 - 2.3 * arcLine);
ctx.lineTo(x + indSize * 0.5, dy * 0.5 + 2.3 * arcLine);
ctx.stroke();
ctx.closePath();

//button 2 - stop group
Value = pEvent.GetVar("HMI_Stop").Value;
x = borderLine + 8 * indSize;

ctx.beginPath();
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.strokeStyle = Value ? "#686868" : "white";
ctx.rect(x, borderLine, indSize, dy - 2 * borderLine);
ctx.stroke();
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "white" : "#686868";
ctx.strokeStyle = Value ? "white" : "#686868";
ctx.rect(x + borderLineButton, borderLine + borderLineButton, indSize - borderLineButton, dy - borderLineButton - 2 * borderLine);
ctx.stroke();
ctx.fill();
ctx.closePath();

ctx.strokeStyle = Value ? "white" : "#686868";
ctx.lineWidth = 1;

ctx.beginPath();
ctx.moveTo(x, dy - borderLine);
ctx.lineTo(x + borderLineButton, dy - borderLine - borderLineButton);
ctx.lineTo(x + borderLineButton, dy - borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(x + indSize, borderLine);
ctx.lineTo(x + indSize - borderLineButton, borderLine + borderLineButton);
ctx.lineTo(x + indSize, borderLine + borderLineButton);
ctx.closePath();
ctx.fill();
ctx.stroke();

var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);
grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.beginPath();
ctx.lineWidth = 1;
ctx.strokeStyle = "#c0c0c0";
ctx.fillStyle = grd;
ctx.rect(x + borderLineButton, borderLine + borderLineButton, indSize - 2 * borderLineButton, dy - 2 * borderLine - 2 * borderLineButton);
ctx.stroke();
ctx.fill();
ctx.closePath();

//symbol
ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(x + indSize * 0.5, dy * 0.5, r, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.fillStyle = "#c0c0c0";
ctx.arc(x + indSize * 0.5, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(x + indSize * 0.5, dy * 0.5, indSize * 0.2, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.fillStyle = "#c0c0c0";
ctx.arc(x + indSize * 0.5, dy * 0.5, indSize * 0.2 - arcLine, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

//button 3 - hold group
Value = pEvent.GetVar("HMI_Hold").Value;
x = borderLine + 9 * indSize;

ctx.beginPath();
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "#686868" : "white";
ctx.strokeStyle = Value ? "#686868" : "white";
ctx.rect(x, borderLine, indSize, dy - 2 * borderLine);
ctx.stroke();
ctx.fill();
ctx.closePath();

ctx.beginPath();
ctx.lineWidth = 1;
ctx.fillStyle = Value ? "white" : "#686868";
ctx.strokeStyle = Value ? "white" : "#686868";
ctx.rect(x + borderLineButton, borderLine + borderLineButton, indSize - borderLineButton, dy - borderLineButton - 2 * borderLine);
ctx.stroke();
ctx.fill();
ctx.closePath();

ctx.strokeStyle = Value ? "white" : "#686868";
ctx.lineWidth = 1;

ctx.beginPath();
ctx.moveTo(x, dy - borderLine);
ctx.lineTo(x + borderLineButton, dy - borderLine - borderLineButton);
ctx.lineTo(x + borderLineButton, dy - borderLine);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.beginPath();
ctx.moveTo(x + indSize, borderLine);
ctx.lineTo(x + indSize - borderLineButton, borderLine + borderLineButton);
ctx.lineTo(x + indSize, borderLine + borderLineButton);
ctx.closePath();
ctx.fill();
ctx.stroke();

var grd = ctx.createLinearGradient(dx * 0.5, 0, dx * 0.5, dy);
grd.addColorStop(0, "#c0c0c0");
grd.addColorStop(1, "#a8a8a8");

ctx.beginPath();
ctx.lineWidth = 1;
ctx.strokeStyle = "#c0c0c0";
ctx.fillStyle = grd;
ctx.rect(x + borderLineButton, borderLine + borderLineButton, indSize - 2 * borderLineButton, dy - 2 * borderLine - 2 * borderLineButton);
ctx.stroke();
ctx.fill();
ctx.closePath();

//symbol
ctx.beginPath();
ctx.fillStyle = "black";
ctx.arc(x + indSize * 0.5, dy * 0.5, r, 0, 2 * Pm.PI);
ctx.fill();
ctx.closePath();

//ctx.beginPath();
//ctx.fillStyle = "#c0c0c0";
//ctx.arc(x + indSize * 0.5, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
//ctx.fill();
//ctx.closePath();

//ctx.beginPath();
//ctx.fillStyle = "black";
//ctx.arc(x + indSize * 0.5, dy * 0.5, r - 2 * arcLine, 0, 2 * Pm.PI);
//ctx.fill();
//ctx.closePath();

ctx.beginPath();
ctx.strokeStyle = "#c0c0c0";
ctx.lineWidth = 1.5 * arcLine;
ctx.moveTo(x + indSize * 0.4, dy * 0.5 - 2.3 * arcLine);
ctx.lineTo(x + indSize * 0.4, dy * 0.5 + 2.3 * arcLine)
ctx.stroke();
ctx.closePath();

ctx.beginPath();
ctx.strokeStyle = "#c0c0c0";
ctx.lineWidth = 1.5 * arcLine;
ctx.moveTo(x + indSize * 0.6, dy * 0.5 - 2.3 * arcLine);
ctx.lineTo(x + indSize * 0.6, dy * 0.5 + 2.3 * arcLine)
ctx.stroke();
ctx.closePath();
]]></Script>
					</Method>
					<Method Name="Description">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var desc = Pm.StringLen(pEvent.GetVar("locDescription").Value) > 0 ? pEvent.GetVar("locDescription").Value : pEvent.GetVar("Description").Value;
var vFontSize = Pm.Round(dy * 0.5, 1);
var x = dx * 0.02;

ctx.beginPath();
ctx.strokeStyle = "black";
ctx.fillStyle = "black";
ctx.font = vFontSize + "px arial";
ctx.textAlign = "left";
ctx.fillText(desc, x, vFontSize * 1.4);
ctx.closePath();]]></Script>
					</Method>
					<Method Name="Indicators">
						<Prop Name="Params">ctx,dx,dy,blink</Prop>
						<Script><![CDATA[var GrpStarted = pEvent.GetVar("GrpStarted").Value;
var GrpStopped = pEvent.GetVar("GrpStopped").Value;
var GroupHold = pEvent.GetVar("GroupHold").Value;
var GrpStarting = pEvent.GetVar("GrpStarting").Value;
var GrpStopping = pEvent.GetVar("GrpStopping").Value;
var GrRR = pEvent.GetVar("GrRR").Value;

var indSize = dx * 0.1;
var arcLine = indSize * 0.07;
var r = indSize * 0.4;
var space = indSize * 0.1;

//indicator 1
if(GrpStarted || (GrpStarting && blink))
{
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "#c0c0c0";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r - 2 * arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.strokeStyle = "#c0c0c0";
    ctx.lineWidth = 1.5 * arcLine;
    ctx.moveTo(dx * 0.5 + indSize * 0.5, dy * 0.5 - 2.3 * arcLine);
    ctx.lineTo(dx * 0.5 + indSize * 0.5, dy * 0.5 + 2.3 * arcLine);
    ctx.stroke();
    ctx.closePath();
}
else if(GrpStopped || (GrpStopping && blink))
{
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "#c0c0c0";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, indSize * 0.2, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "#c0c0c0";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, indSize * 0.2 - arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
}
else if(GroupHold)
{
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "#c0c0c0";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + indSize * 0.5, dy * 0.5, r - 2 * arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.strokeStyle = "#c0c0c0";
    ctx.lineWidth = 1.5 * arcLine;
    ctx.moveTo(dx * 0.5 + indSize * 0.4, dy * 0.5 - 2.3 * arcLine);
    ctx.lineTo(dx * 0.5 + indSize * 0.4, dy * 0.5 + 2.3 * arcLine)
    ctx.stroke();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.strokeStyle = "#c0c0c0";
    ctx.lineWidth = 1.5 * arcLine;
    ctx.moveTo(dx * 0.5 + indSize * 0.6, dy * 0.5 - 2.3 * arcLine);
    ctx.lineTo(dx * 0.5 + indSize * 0.6, dy * 0.5 + 2.3 * arcLine)
    ctx.stroke();
    ctx.closePath();
}

//indicator 2
if(GrRR)
{
    //black circle
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(dx * 0.5 + 3 * indSize / 2, dy * 0.5, r, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    //gray circle
    ctx.beginPath();
    ctx.fillStyle = "#c0c0c0";
    ctx.arc(dx * 0.5 + 3 * indSize / 2, dy * 0.5, r - arcLine, 0, 2 * Pm.PI);
    ctx.fill();
    ctx.closePath();
    
    //gray rectangle
    ctx.beginPath();
    ctx.fillStyle = "#c0c0c0";
    ctx.rect(dx * 0.5 + indSize, dy * 0.45, indSize, dy * 0.1);
    ctx.fill();
    ctx.closePath();
    
    //left arrow
    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.lineWidth = arcLine;
    ctx.moveTo(dx * 0.5 + indSize + space + arcLine / 2, dy * 0.2);
    ctx.lineTo(dx * 0.5 + indSize + space + arcLine / 2, dy * 0.45)
    ctx.stroke();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.lineWidth = arcLine;
    ctx.moveTo(dx * 0.5 + indSize + space, dy * 0.45);
    ctx.lineTo(dx * 0.5 + indSize * 1.3 + space + arcLine / 2, dy * 0.45);
    ctx.stroke();
    ctx.closePath();
    
    //right arrow
    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.lineWidth = arcLine;
    ctx.moveTo(dx * 0.5 + 2 * indSize - space - arcLine / 2, dy * 0.8);
    ctx.lineTo(dx * 0.5 + 2 * indSize - space - arcLine / 2, dy * 0.55)
    ctx.stroke();
    ctx.closePath();
    
    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.lineWidth = arcLine;
    ctx.moveTo(dx * 0.5 + indSize * 1.5 + space, dy * 0.55);
    ctx.lineTo(dx * 0.5 + indSize * 1.76 + space + arcLine / 2, dy * 0.55);
    ctx.stroke();
    ctx.closePath();
}]]></Script>
					</Method>
					<Method Name="Quality">
						<Prop Name="Params">ctx,dx,dy</Prop>
						<Script><![CDATA[var quality = pEvent.GetVar("quality").Value;
var qBorderSize = dy * 0.05;

if(quality !== 192)
{
    ctx.beginPath();
    ctx.lineWidth = qBorderSize;
    ctx.strokeStyle = "red";
    ctx.moveTo(0, 0);
    ctx.lineTo(dx, dy);
    ctx.moveTo(dx, 0);
    ctx.lineTo(0, dy);
    ctx.stroke();
    ctx.closePath();
}]]></Script>
					</Method>
					<Method Name="onDraw">
						<Prop Name="Params"></Prop>
						<Script><![CDATA[//init
var blink = pEvent.GetVar("blink").Value;
var ctx = pEvent.GetCtx(0);
var dx = pEvent.CtxDx;
var dy = pEvent.CtxDy;

pEvent.Methods.Alarm(ctx, dx, dy, blink);
pEvent.Methods.Background(ctx, dx, dy);
pEvent.Methods.Description(ctx, dx, dy);
pEvent.Methods.Indicators(ctx, dx, dy, blink);
pEvent.Methods.Buttons(ctx, dx, dy, blink);
pEvent.Methods.Quality(ctx, dx, dy);]]></Script>
					</Method>
				</Methods>
			</GItem>
		</Content>
	</Cfg>
</Document>
